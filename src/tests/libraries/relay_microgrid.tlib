//
// Saved by sw version: 2020.3 DEV
// Save timestamp: 25-Sep-2020 @ 02:40:40 PM
//

library "core" {
    configuration {
        hil_device = "HIL604"
        hil_configuration_id = 1
        simulation_method = exact
        simulation_time_step = auto
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
    }

    component Subsystem Root {
        component Category Microgrid {
            layout = dynamic
            component Category Protection {
                layout = dynamic
                component Subsystem "Feeder Protection Relay (Example)" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "feeder_protection_relay.html"
                    component gen_probe CB_state {
                    }
                    [
                        position = 9272, 7928
                    ]

                    component gen_delay Delay1 {
                        del_length = "int(3.0/60.0/Ts)"
                        init_value = "[1]"
                    }
                    [
                        position = 9032, 8040
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch1" {
                        threshold = "0.5"
                    }
                    [
                        position = 9168, 8024
                        rotation = down
                        hide_name = True
                        scale = -1, 1
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                        value = "[0]"
                    }
                    [
                        position = 9088, 8008
                        hide_name = True
                    ]

                    component gen_bus_join "Bus Join1" {
                        inputs = "19"
                    }
                    [
                        position = 7288, 7832
                        rotation = left
                        hide_name = True
                    ]

                    component tm_delay "Unit Delay4" {
                    }
                    [
                        position = 8928, 8080
                        hide_name = True
                    ]

                    component gen_logic_op "Logical operator1" {
                        inputs = "4"
                        operator = "OR"
                    }
                    [
                        position = 8272, 8152
                        rotation = left
                        hide_name = True
                    ]

                    component Subsystem Measurements {
                        layout = dynamic
                        component gen_rms_value "RMS value5" {
                        }
                        [
                            position = 6408, 7624
                            hide_name = True
                        ]

                        component gen_rms_value "RMS value1" {
                        }
                        [
                            position = 6824, 7568
                            hide_name = True
                        ]

                        component gen_rms_value "RMS value4" {
                        }
                        [
                            position = 6408, 7568
                            hide_name = True
                        ]

                        component gen_rms_value "RMS value3" {
                        }
                        [
                            position = 6824, 7680
                            hide_name = True
                        ]

                        component gen_rms_value "RMS value2" {
                        }
                        [
                            position = 6824, 7624
                            hide_name = True
                        ]

                        component gen_rms_value "RMS value6" {
                        }
                        [
                            position = 6408, 7680
                            hide_name = True
                        ]

                        component Subsystem Meas_Power {
                            layout = dynamic
                            component gen_PQ_transform "PQ Power Meter1" {
                            }
                            [
                                position = 8032, 8152
                                hide_name = True
                            ]

                            component gen_terminator Termination4 {
                            }
                            [
                                position = 8192, 8200
                                rotation = right
                                hide_name = True
                            ]

                            component gen_terminator Termination3 {
                            }
                            [
                                position = 8232, 8200
                                rotation = right
                                hide_name = True
                            ]

                            component Subsystem Subsystem1 {
                                layout = dynamic
                                component gen_logic_op "Logical operator1" {
                                }
                                [
                                    position = 7976, 7856
                                    hide_name = True
                                ]

                                component gen_abs Abs2 {
                                }
                                [
                                    position = 7720, 7896
                                    hide_name = True
                                ]

                                component src_constant Constant1 {
                                    execution_rate = "Ts"
                                }
                                [
                                    position = 7768, 7856
                                    hide_name = True
                                ]

                                component gen_rel_op "Relational operator1" {
                                    relational_op = ">"
                                }
                                [
                                    position = 7840, 7800
                                    hide_name = True
                                ]

                                component gen_rel_op "Relational operator4" {
                                    relational_op = ">"
                                }
                                [
                                    position = 7856, 8096
                                    hide_name = True
                                ]

                                component src_constant Constant2 {
                                    execution_rate = "Ts"
                                    value = "[0]"
                                }
                                [
                                    position = 7752, 8048
                                    hide_name = True
                                ]

                                component gen_rel_op "Relational operator2" {
                                    relational_op = ">"
                                }
                                [
                                    position = 7840, 7904
                                    hide_name = True
                                ]

                                component gen_rel_op "Relational operator3" {
                                    relational_op = ">"
                                }
                                [
                                    position = 7856, 8000
                                    hide_name = True
                                ]

                                component gen_abs Abs1 {
                                }
                                [
                                    position = 7720, 7792
                                    hide_name = True
                                ]

                                component Subsystem Subsystem3 {
                                    layout = dynamic
                                    component tm_delay "Unit Delay1" {
                                        execution_rate = "Ts"
                                        init_value = "[1]"
                                        signal_out_type = "real"
                                    }
                                    [
                                        position = 7832, 8056
                                        hide_name = True
                                    ]

                                    component sys_mp_signal_switch "Multiport signal switch1" {
                                    }
                                    [
                                        position = 7752, 8056
                                        hide_name = True
                                    ]

                                    port u {
                                        position = left:1
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7616, 8040
                                    ]

                                    port Out1 {
                                        label = "Out1"
                                        position = auto:auto
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7912, 8056
                                    ]

                                    port E {
                                        position = left:2
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7656, 8056
                                    ]

                                    junction Junction1 sp
                                    [
                                        position = 7872, 8056
                                    ]

                                    connect E "Multiport signal switch1.in" as Connection1
                                    connect Junction1 Out1 as Connection2
                                    connect "Multiport signal switch1.in1" Junction1 as Connection3
                                    connect "Multiport signal switch1.ctrl" u as Connection4
                                    connect "Unit Delay1.out" Junction1 as Connection5
                                    connect "Unit Delay1.in" "Multiport signal switch1.out" as Connection6
                                }
                                [
                                    position = 8152, 8104
                                    hide_name = True
                                    size = 112, 56
                                ]

                                component Subsystem Subsystem2 {
                                    layout = dynamic
                                    component sys_mp_signal_switch "Multiport signal switch1" {
                                    }
                                    [
                                        position = 7752, 8056
                                        hide_name = True
                                    ]

                                    component tm_delay "Unit Delay1" {
                                        execution_rate = "Ts"
                                        init_value = "[1]"
                                        signal_out_type = "real"
                                    }
                                    [
                                        position = 7840, 8056
                                        hide_name = True
                                    ]

                                    port u {
                                        position = left:1
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7600, 8040
                                    ]

                                    port E {
                                        position = left:2
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7648, 8056
                                    ]

                                    port Out {
                                        label = "Out1"
                                        position = auto:auto
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7944, 8056
                                    ]

                                    junction Junction1 sp
                                    [
                                        position = 7888, 8056
                                    ]

                                    connect E "Multiport signal switch1.in" as Connection1
                                    connect Junction1 "Unit Delay1.out" as Connection2
                                    connect "Multiport signal switch1.in1" Junction1 as Connection3
                                    connect Out Junction1 as Connection4
                                    connect "Unit Delay1.in" "Multiport signal switch1.out" as Connection5
                                    connect u "Multiport signal switch1.ctrl" as Connection6
                                }
                                [
                                    position = 8152, 8008
                                    hide_name = True
                                    size = 112, 56
                                ]

                                port P {
                                    label = "P"
                                    position = left:1
                                    kind = sp
                                    direction =  out
                                    sp_type {
                                        default = auto
                                        readonly = True
                                    }
                                }
                                [
                                    position = 7512, 7992
                                ]

                                port Q {
                                    label = "Q"
                                    position = left:2
                                    kind = sp
                                    direction =  out
                                    sp_type {
                                        default = auto
                                        readonly = True
                                    }
                                }
                                [
                                    position = 7512, 8088
                                ]

                                port "Lagging or Leading" {
                                    label = "Lag or Lead"
                                    position = auto:auto
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8288, 8104
                                ]

                                port "Exporting or Importing" {
                                    label = "export or import"
                                    position = auto:auto
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8288, 8008
                                ]

                                junction Junction1 sp
                                [
                                    position = 7560, 8088
                                ]

                                junction Junction4 sp
                                [
                                    position = 7592, 7992
                                ]

                                junction Junction11 sp
                                [
                                    position = 7808, 7856
                                ]

                                junction Junction13 sp
                                [
                                    position = 7824, 8048
                                ]

                                junction Junction14 sp
                                [
                                    position = 8040, 8016
                                ]

                                connect Abs1.in Junction1 as Connection1
                                connect Abs1.out "Relational operator1.in" as Connection2
                                connect Abs2.out "Relational operator2.in" as Connection3
                                connect Constant1.out Junction11 as Connection8
                                connect Constant2.out Junction13 as Connection9
                                connect "Exporting or Importing" Subsystem2.Out as Connection10
                                connect Junction11 "Relational operator1.in1" as Connection12
                                connect Junction13 "Relational operator3.in1" as Connection14
                                connect Junction14 Subsystem3.E as Connection45
                                connect Junction4 Abs2.in as Connection39
                                connect Junction4 P as Connection18
                                connect "Lagging or Leading" Subsystem3.Out1 as Connection22
                                connect "Logical operator1.out" Junction14 as Connection44
                                connect Q Junction1 as Connection26
                                connect "Relational operator1.out" "Logical operator1.in" as Connection27
                                connect "Relational operator2.in1" Junction11 as Connection28
                                connect "Relational operator2.out" "Logical operator1.in1" as Connection29
                                connect "Relational operator3.in" Junction4 as Connection42
                                connect "Relational operator3.out" Subsystem2.u as Connection31
                                connect "Relational operator4.in" Junction1 as Connection40
                                connect "Relational operator4.in1" Junction13 as Connection32
                                connect "Relational operator4.out" Subsystem3.u as Connection34
                                connect Subsystem2.E Junction14 as Connection46
                            }
                            [
                                position = 8456, 8120
                                hide_name = True
                                size = 112, 56
                            ]

                            port Va {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7960, 8048
                                rotation = right
                            ]

                            port Vb {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7928, 8088
                                rotation = right
                            ]

                            port Vc {
                                position = left:3
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7888, 8048
                                rotation = right
                            ]

                            port Ia {
                                position = left:4
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7888, 8272
                                rotation = left
                            ]

                            port Ib {
                                position = left:5
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7928, 8240
                                rotation = left
                            ]

                            port Ic {
                                position = left:6
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7960, 8272
                                rotation = left
                            ]

                            port P {
                                position = right:10
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8352, 8080
                            ]

                            port export_or_import {
                                position = right:15
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8600, 8128
                            ]

                            port lag_or_lead {
                                position = right:14
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8560, 8112
                                rotation = down
                                scale = -1, 1
                            ]

                            port Q {
                                position = right:11
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8352, 8152
                            ]

                            port S {
                                position = right:12
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8160, 8296
                                rotation = right
                            ]

                            port pf {
                                position = right:13
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8296
                                rotation = right
                            ]

                            junction Junction1 sp
                            [
                                position = 8256, 8112
                            ]

                            junction Junction2 sp
                            [
                                position = 8256, 8128
                            ]

                            connect Junction1 "PQ Power Meter1.Pdc" as Connection123
                            connect Junction2 Subsystem1.Q as Connection126
                            connect P Junction1 as Connection124
                            connect "PQ Power Meter1.ia" Ia as Connection117
                            connect "PQ Power Meter1.ib" Ib as Connection109
                            connect "PQ Power Meter1.ic" Ic as Connection112
                            connect "PQ Power Meter1.Qdc" Junction2 as Connection125
                            connect "PQ Power Meter1.apparent" S as Connection119
                            connect "PQ Power Meter1.va" Va as Connection111
                            connect "PQ Power Meter1.vb" Vb as Connection116
                            connect "PQ Power Meter1.vc" Vc as Connection113
                            connect Q Junction2 as Connection127
                            connect Subsystem1.P Junction1 as Connection122
                            connect "Subsystem1.Exporting or Importing" export_or_import as Connection110
                            connect "Subsystem1.Lagging or Leading" lag_or_lead as Connection115
                            connect Termination3.in "PQ Power Meter1.Pac" as Connection50
                            connect Termination4.in "PQ Power Meter1.Qac" as Connection51
                            connect pf "PQ Power Meter1.k_factor" as Connection118
                        }
                        [
                            position = 6792, 7832
                            size = 120, 208
                        ]

                        component Subsystem Meas_phase1 {
                            layout = dynamic
                            component gen_terminator Termination3 {
                            }
                            [
                                position = 8288, 8336
                                rotation = right
                                hide_name = True
                            ]

                            component gen_terminator Termination2 {
                            }
                            [
                                position = 8368, 8160
                                rotation = left
                                hide_name = True
                            ]

                            component msr_phasor_3ph "Three Phase Phasor1" {
                            }
                            [
                                position = 8136, 8256
                            ]

                            component gen_terminator Termination1 {
                            }
                            [
                                position = 8224, 8160
                                rotation = left
                                hide_name = True
                            ]

                            port A {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7984, 8192
                                rotation = right
                            ]

                            port B {
                                position = left:3
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7984, 8312
                                rotation = left
                            ]

                            port C {
                                position = left:4
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8040, 8312
                                rotation = left
                            ]

                            port Phase_A {
                                position = right:11
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8112
                                rotation = left
                            ]

                            port Phase_C {
                                position = right:15
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8224, 8424
                                rotation = right
                            ]

                            port Phase_B {
                                position = right:13
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8352, 8424
                                rotation = right
                            ]

                            port Ref {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8040, 8192
                                rotation = right
                            ]

                            connect Ref "Three Phase Phasor1.in_ref" as Connection145
                            connect Termination1.in "Three Phase Phasor1.out1" as Connection141
                            connect Termination2.in "Three Phase Phasor1.out2" as Connection142
                            connect Termination3.in "Three Phase Phasor1.out3" as Connection143
                            connect "Three Phase Phasor1.in1" A as Connection144
                            connect "Three Phase Phasor1.in2" B as Connection131
                            connect "Three Phase Phasor1.in3" C as Connection137
                            connect "Three Phase Phasor1.phase1" Phase_A as Connection140
                            connect "Three Phase Phasor1.phase2" Phase_B as Connection139
                            connect "Three Phase Phasor1.phase3" Phase_C as Connection138
                        }
                        [
                            position = 6400, 7400
                            size = 64, 200
                        ]

                        component Subsystem Meas_phase {
                            layout = dynamic
                            component gen_terminator Termination1 {
                            }
                            [
                                position = 8224, 8160
                                rotation = left
                                hide_name = True
                            ]

                            component msr_phasor_3ph "Three Phase Phasor1" {
                            }
                            [
                                position = 8136, 8256
                            ]

                            component gen_terminator Termination3 {
                            }
                            [
                                position = 8288, 8336
                                rotation = right
                                hide_name = True
                            ]

                            component gen_terminator Termination2 {
                            }
                            [
                                position = 8368, 8160
                                rotation = left
                                hide_name = True
                            ]

                            port A {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7984, 8192
                                rotation = right
                            ]

                            port B {
                                position = left:3
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7984, 8312
                                rotation = left
                            ]

                            port C {
                                position = left:4
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8040, 8312
                                rotation = left
                            ]

                            port Phase_A {
                                position = right:11
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8112
                                rotation = left
                            ]

                            port Phase_C {
                                position = right:15
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8224, 8424
                                rotation = right
                            ]

                            port Phase_B {
                                position = right:13
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8352, 8424
                                rotation = right
                            ]

                            port Ref {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8040, 8192
                                rotation = right
                            ]

                            connect Ref "Three Phase Phasor1.in_ref" as Connection145
                            connect Termination1.in "Three Phase Phasor1.out1" as Connection141
                            connect Termination2.in "Three Phase Phasor1.out2" as Connection142
                            connect Termination3.in "Three Phase Phasor1.out3" as Connection143
                            connect "Three Phase Phasor1.in1" A as Connection144
                            connect "Three Phase Phasor1.in2" B as Connection131
                            connect "Three Phase Phasor1.in3" C as Connection137
                            connect "Three Phase Phasor1.phase1" Phase_A as Connection140
                            connect "Three Phase Phasor1.phase2" Phase_B as Connection139
                            connect "Three Phase Phasor1.phase3" Phase_C as Connection138
                        }
                        [
                            position = 6832, 7400
                            size = 64, 200
                        ]

                        component Subsystem PLL_bus {
                            layout = dynamic
                            component gen_terminator Termination8 {
                            }
                            [
                                position = 8184, 8120
                                rotation = left
                                hide_name = True
                            ]

                            component gen_terminator Termination9 {
                            }
                            [
                                position = 8224, 8160
                                rotation = left
                                hide_name = True
                            ]

                            component gen_terminator Termination7 {
                            }
                            [
                                position = 8160, 8072
                                rotation = left
                                hide_name = True
                            ]

                            component Subsystem PLL {
                                layout = dynamic
                                component gen_terminator Term {
                                }
                                [
                                    position = 7864, 8216
                                    rotation = right
                                    hide_name = True
                                ]

                                component gen_rate_limiter "Rate Limiter1" {
                                    falling_limit = "2*np.pi*w_fall"
                                    rising_limit = "2*np.pi*w_rise"
                                }
                                [
                                    position = 8304, 7984
                                    hide_name = True
                                ]

                                component gen_z_domain_transfer LPF_q1 {
                                    a_coeff = "[1,2*zeta*(2*np.pi*fc_w),(2*np.pi*fc_w)**2.0]"
                                    b_coeff = "(2*np.pi*fc_w)**2.0"
                                    domain = "S-domain"
                                    method = "Bilinear"
                                }
                                [
                                    position = 8376, 7984
                                    hide_name = True
                                ]

                                component gen_gain Gain1 {
                                    gain = "1.0/(2.0*np.pi)"
                                }
                                [
                                    position = 8448, 7984
                                    hide_name = True
                                ]

                                component tm_delay "Unit Delay1" {
                                }
                                [
                                    position = 8432, 8224
                                    rotation = right
                                    hide_name = True
                                ]

                                component gen_z_domain_transfer LPF_d {
                                    a_coeff = "[1.0/(2*np.pi*fc_d),1]"
                                    b_coeff = "1"
                                    domain = "S-domain"
                                    method = "Bilinear"
                                }
                                [
                                    position = 7856, 8120
                                    hide_name = True
                                ]

                                component gen_z_domain_transfer LPF_q {
                                    a_coeff = "[1.0/(2*np.pi*fc_q),1]"
                                    b_coeff = "1"
                                    domain = "S-domain"
                                    method = "Bilinear"
                                }
                                [
                                    position = 7912, 8152
                                    hide_name = True
                                ]

                                component gen_c_function integrator {
                                    global_variables = "real out_state;"
                                    in_terminal_dimensions = "inherit"
                                    in_terminal_dimensions_str = "in inherit"
                                    in_terminal_labels = "False;"
                                    init_fnc = "/*Begin code section*/
out_state = 0;
/*End code section*/"
                                    no_feed_inputs = "[\'\']"
                                    no_feed_outputs = "[\'\']"
                                    out_terminal_dimensions = "inherit"
                                    out_terminal_dimensions_str = "out inherit"
                                    out_terminal_labels = "False;"
                                    out_terminal_properties = "inherit out;"
                                    output_fnc = "/*Begin code section*/
out = out_state;
out += execution_rate*in;
if(in>=0.0){
    if(out >= 6.283185307179586)
    {
        out -= 6.283185307179586;
    }
}
else{
        if(out <= -6.283185307179586)
    {
        out += 6.283185307179586;
    }
}
out_state = out;
/*End code section*/"
                                }
                                [
                                    position = 8352, 8136
                                    size = 0, 0
                                ]

                                component Subsystem Normalize {
                                    layout = dynamic
                                    component gen_c_function V_terminal {
                                        in_terminal_dimensions_str = "d inherit;q inherit;"
                                        in_terminal_labels = "False;False;"
                                        in_terminal_properties = "real d;inherit q;"
                                        no_feed_inputs = "[u\'\']"
                                        no_feed_outputs = "[u\'\']"
                                        out_terminal_dimensions_str = "t inherit;q_pu inherit;"
                                        out_terminal_labels = "False;False;"
                                        out_terminal_properties = "real t;inherit q_pu;"
                                        output_fnc = "/*Begin code section*/
t = (powf(d,2.0)+powf(q,2.0));
t = sqrt(t);
if(t<0.1){
    q_pu = q/0.1;
}
else{
    q_pu = q/t;
}
/*End code section*/"
                                    }
                                    [
                                        position = 8192, 8192
                                        size = 0, 0
                                    ]

                                    port d {
                                        position = left:1
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8048, 8152
                                    ]

                                    port q {
                                        position = left:2
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8048, 8216
                                    ]

                                    port q_pu {
                                        position = right:1
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8352, 8200
                                    ]

                                    port Vt {
                                        position = top:1
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8280, 8104
                                        rotation = left
                                    ]

                                    connect V_terminal.t Vt as Connection8
                                    connect V_terminal.d d as Connection1
                                    connect V_terminal.q q as Connection3
                                    connect q_pu V_terminal.q_pu as Connection9
                                }
                                [
                                    position = 8096, 8136
                                    size = 64, 64
                                ]

                                component Subsystem PI {
                                    layout = dynamic
                                    component gen_gain Kp {
                                        gain = "Kp"
                                    }
                                    [
                                        position = 8056, 8136
                                    ]

                                    component gen_gain Kb {
                                    }
                                    [
                                        position = 8216, 8312
                                        scale = -1, 1
                                    ]

                                    component gen_sum Sum7 {
                                    }
                                    [
                                        position = 8088, 8224
                                    ]

                                    component gen_integrator Integrator1 {
                                        init_value = "2*np.pi*f"
                                        limit_lower = "-1"
                                        limit_upper = "1"
                                    }
                                    [
                                        position = 8216, 8224
                                    ]

                                    component gen_gain Ki {
                                        gain = "Ki"
                                    }
                                    [
                                        position = 7976, 8216
                                    ]

                                    component gen_integrator Integrator2 {
                                        limit_lower = "-1"
                                        limit_upper = "1"
                                    }
                                    [
                                        position = 8144, 8512
                                        scale = -1, 1
                                    ]

                                    component gen_gain Gain1 {
                                        gain = "2*np.pi*fc_Kd"
                                    }
                                    [
                                        position = 8160, 8416
                                    ]

                                    component gen_sum Sum6 {
                                        signs = "-+"
                                    }
                                    [
                                        position = 8320, 8312
                                        scale = -1, 1
                                    ]

                                    component gen_sum Sum5 {
                                        signs = "3"
                                    }
                                    [
                                        position = 8320, 8224
                                    ]

                                    component gen_limiter Limit1 {
                                        lower_limit = "lowLim*2*np.pi*f/100.0"
                                        upper_limit = "upLim*2*np.pi*f/100.0"
                                    }
                                    [
                                        position = 8408, 8224
                                    ]

                                    component gen_sum Sum8 {
                                        signs = "+-"
                                    }
                                    [
                                        position = 8040, 8416
                                    ]

                                    component gen_gain Kd {
                                        gain = "Kd"
                                    }
                                    [
                                        position = 7944, 8408
                                    ]

                                    port In {
                                        label = "In"
                                        position = left:1
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7752, 8216
                                    ]

                                    port Out {
                                        label = "Out"
                                        position = right:1
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8472, 8224
                                    ]

                                    junction Junction2 sp
                                    [
                                        position = 8368, 8224
                                    ]

                                    junction Junction3 sp
                                    [
                                        position = 8440, 8224
                                    ]

                                    junction Junction5 sp
                                    [
                                        position = 8232, 8416
                                    ]

                                    junction Junction7 sp
                                    [
                                        position = 7792, 8216
                                    ]

                                    junction Junction8 sp
                                    [
                                        position = 7792, 8216
                                    ]

                                    connect Gain1.out Junction5 as Connection63
                                    connect Gain1.in Sum8.out as Connection61
                                    connect In Junction7 as Connection81
                                    connect Integrator2.in Junction5 as Connection65
                                    connect Integrator2.out Sum8.in1 as Connection66
                                    connect Junction2 Limit1.in as Connection45
                                    connect Junction3 Out as Connection48
                                    connect Junction5 Sum5.in2 as Connection64
                                    connect Junction8 Junction7 as Connection83
                                    connect Kb.in Sum6.out as Connection50
                                    connect Kd.in Junction8 as Connection84
                                    connect Ki.in Junction8 as Connection82
                                    connect Kp.in Junction7 as Connection76
                                    connect Kp.out Sum5.in as Connection68
                                    connect Limit1.out Junction3 as Connection47
                                    connect Sum5.in1 Integrator1.out as Connection5
                                    connect Sum5.out Junction2 as Connection44
                                    connect Sum6.in Junction2 as Connection46
                                    connect Sum6.in1 Junction3 as Connection49
                                    connect Sum7.out Integrator1.in as Connection52
                                    connect Sum7.in1 Kb.out as Connection53
                                    connect Sum7.in Ki.out as Connection73
                                    connect Sum8.in Kd.out as Connection79
                                }
                                [
                                    position = 8200, 8136
                                    size = 64, 48
                                ]

                                component Subsystem ABC_dqz {
                                    layout = dynamic
                                    component gen_abc2alpha_beta "abc to alpha beta" {
                                    }
                                    [
                                        position = 8024, 8192
                                    ]

                                    component gen_alpha_beta2d_q "alpha beta to dq" {
                                    }
                                    [
                                        position = 8248, 8192
                                    ]

                                    port A {
                                        position = left:1
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7952, 8104
                                        rotation = right
                                    ]

                                    port B {
                                        position = left:2
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7904, 8104
                                        rotation = right
                                    ]

                                    port C {
                                        position = left:3
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7856, 8104
                                        rotation = right
                                    ]

                                    port wt {
                                        position = left:4
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8176, 8288
                                        rotation = left
                                    ]

                                    port d {
                                        position = right:1
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8320, 8136
                                        rotation = left
                                    ]

                                    port q {
                                        position = right:2
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8368, 8136
                                        rotation = left
                                    ]

                                    port z {
                                        position = right:3
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8096, 8288
                                        rotation = right
                                    ]

                                    connect "abc to alpha beta.A" A as Connection2685
                                    connect "abc to alpha beta.B" B as Connection2686
                                    connect "abc to alpha beta.C" C as Connection2687
                                    connect "abc to alpha beta.beta" "alpha beta to dq.beta" as Connection2689
                                    connect "alpha beta to dq.alpha" "abc to alpha beta.alpha" as Connection2688
                                    connect "alpha beta to dq.wt" wt as Connection2690
                                    connect d "alpha beta to dq.d" as Connection2692
                                    connect q "alpha beta to dq.q" as Connection2693
                                    connect z "abc to alpha beta.gamma" as Connection2691
                                }
                                [
                                    position = 7776, 8152
                                    size = 48, 104
                                ]

                                port A {
                                    position = left:1
                                    kind = sp
                                    direction =  out
                                    sp_type {
                                        default = auto
                                        readonly = True
                                    }
                                }
                                [
                                    position = 7608, 8168
                                    rotation = left
                                ]

                                port B {
                                    label = "B"
                                    position = left:2
                                    kind = sp
                                    direction =  out
                                    sp_type {
                                        default = auto
                                        readonly = True
                                    }
                                }
                                [
                                    position = 7648, 8192
                                    rotation = left
                                ]

                                port C {
                                    label = "C"
                                    position = left:3
                                    kind = sp
                                    direction =  out
                                    sp_type {
                                        default = auto
                                        readonly = True
                                    }
                                }
                                [
                                    position = 7688, 8216
                                    rotation = left
                                ]

                                port d {
                                    position = right:1
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8032, 8024
                                ]

                                port q {
                                    label = "q"
                                    position = right:2
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8032, 8080
                                ]

                                port Vt {
                                    position = right:3
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8160, 8072
                                ]

                                port wt {
                                    position = right:5
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8472, 8072
                                ]

                                port f {
                                    position = right:4
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8536, 7984
                                ]

                                junction Junction14 sp
                                [
                                    position = 7960, 8120
                                ]

                                junction Junction15 sp
                                [
                                    position = 8000, 8152
                                ]

                                junction Junction16 sp
                                [
                                    position = 8272, 8136
                                ]

                                junction Junction17 sp
                                [
                                    position = 8432, 8136
                                ]

                                connect ABC_dqz.A A as Connection278
                                connect ABC_dqz.C C as Connection276
                                connect ABC_dqz.d LPF_d.in as Connection272
                                connect ABC_dqz.q LPF_q.in as Connection273
                                connect ABC_dqz.z Term.in as Connection274
                                connect B ABC_dqz.B as Connection277
                                connect Gain1.in LPF_q1.out as Connection269
                                connect Junction14 Normalize.d as Connection253
                                connect Junction14 d as Connection262
                                connect Junction15 q as Connection261
                                connect Junction16 "Rate Limiter1.in" as Connection280
                                connect Junction17 "Unit Delay1.in" as Connection283
                                connect LPF_d.out Junction14 as Connection254
                                connect LPF_q.out Junction15 as Connection257
                                connect LPF_q1.in "Rate Limiter1.out" as Connection259
                                connect Normalize.q Junction15 as Connection255
                                connect Normalize.Vt Vt as Connection211
                                connect PI.Out Junction16 as Connection279
                                connect PI.In Normalize.q_pu as Connection264
                                connect "Unit Delay1.out" ABC_dqz.wt as Connection275
                                connect f Gain1.out as Connection268
                                connect integrator.in Junction16 as Connection281
                                connect integrator.out Junction17 as Connection284
                                connect wt Junction17 as Connection282

                                lowLim = "70"
                                upLim = "140"
                                w_fall = "-60.0/5"
                                w_rise = "60.0/5"

                                mask {
                                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">Simple PLL with wrapped wt</span></p></body></html>"

                                    Kp {
                                        label = "Proportional gain"
                                        widget = edit
                                        type = generic
                                        default_value = "100.0"
                                    }

                                    Ki {
                                        label = "Integral gain"
                                        widget = edit
                                        type = generic
                                        default_value = "3200.0"
                                    }

                                    Kd {
                                        label = "Differential gain"
                                        widget = edit
                                        type = generic
                                        default_value = "1.0"
                                    }

                                    fc_Kd {
                                        label = "Derivative control LPF cut-off freq."
                                        widget = edit
                                        type = generic
                                        default_value = "113.6821"
                                    }

                                    fc_d {
                                        label = "d channel LPF cut-off freq."
                                        widget = edit
                                        type = generic
                                        default_value = "10.0"
                                        unit = "Hz"
                                    }

                                    fc_q {
                                        label = "q channel LPF cut-off freq."
                                        widget = edit
                                        type = generic
                                        default_value = "10.0"
                                        unit = "Hz"
                                    }

                                    f {
                                        label = "Target frequency"
                                        widget = edit
                                        type = generic
                                        default_value = "60.0"
                                        unit = "Hz"
                                    }

                                    upLim {
                                        label = "Frequency deviation upper limit"
                                        widget = edit
                                        type = generic
                                        default_value = "10"
                                        unit = "%"
                                    }

                                    lowLim {
                                        label = "Frequency deviation lower limit"
                                        widget = edit
                                        type = generic
                                        default_value = "-10"
                                        unit = "%"
                                    }

                                    zeta {
                                        label = "w 2nd order LPF damping ratio"
                                        widget = edit
                                        type = generic
                                        default_value = "0.707"
                                    }

                                    fc_w {
                                        label = "w 2nd order LPF cut-off freq."
                                        widget = edit
                                        type = generic
                                        default_value = "25.0"
                                        unit = "Hz"
                                    }

                                    Ts {
                                        label = "Execution rate"
                                        widget = edit
                                        type = generic
                                        default_value = "Ts"
                                    }

                                    w_rise {
                                        label = "w Rising rate"
                                        widget = edit
                                        type = generic
                                        default_value = "0"
                                        unit = "Hz/s"
                                    }

                                    w_fall {
                                        label = "w Falling rate"
                                        widget = edit
                                        type = generic
                                        default_value = "0"
                                        unit = "Hz/s"
                                    }

                                    CODE open
                                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                                    
                                        dialog = RegularComponentPropertiesDialog(
                                            component=component,
                                            property_container=component.masks[-1],
                                            current_diagram=current_diagram
                                        )
                                        dialog.exec_()
                                        
                                    ENDCODE
                                }
                            }
                            [
                                position = 8088, 8216
                                rotation = down
                                scale = -1, -1
                                size = 72, 152
                            ]

                            port f {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8256, 8240
                            ]

                            port wt {
                                position = right:2
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8192, 8264
                            ]

                            port A {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8000, 8160
                            ]

                            port C {
                                position = left:3
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8000, 8272
                            ]

                            port B {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8000, 8216
                            ]

                            connect A PLL.A as Connection112
                            connect B PLL.B as Connection111
                            connect C PLL.C as Connection110
                            connect Termination7.in PLL.d as Connection113
                            connect Termination8.in PLL.q as Connection114
                            connect Termination9.in PLL.Vt as Connection115
                            connect f PLL.f as Connection117
                            connect wt PLL.wt as Connection116
                        }
                        [
                            position = 6416, 7792
                            size = 64, 120
                        ]

                        component Subsystem PLL_line {
                            layout = dynamic
                            component gen_terminator Termination11 {
                            }
                            [
                                position = 8184, 8088
                                rotation = left
                                hide_name = True
                            ]

                            component gen_terminator Termination13 {
                            }
                            [
                                position = 8264, 8160
                                rotation = left
                                hide_name = True
                            ]

                            component gen_terminator Termination12 {
                            }
                            [
                                position = 8216, 8128
                                rotation = left
                                hide_name = True
                            ]

                            component Subsystem PLL {
                                layout = dynamic
                                component gen_z_domain_transfer LPF_q1 {
                                    a_coeff = "[1,2*zeta*(2*np.pi*fc_w),(2*np.pi*fc_w)**2.0]"
                                    b_coeff = "(2*np.pi*fc_w)**2.0"
                                    domain = "S-domain"
                                    method = "Bilinear"
                                }
                                [
                                    position = 8376, 7984
                                    hide_name = True
                                ]

                                component gen_z_domain_transfer LPF_q {
                                    a_coeff = "[1.0/(2*np.pi*fc_q),1]"
                                    b_coeff = "1"
                                    domain = "S-domain"
                                    method = "Bilinear"
                                }
                                [
                                    position = 7912, 8152
                                    hide_name = True
                                ]

                                component gen_gain Gain1 {
                                    gain = "1.0/(2.0*np.pi)"
                                }
                                [
                                    position = 8448, 7984
                                    hide_name = True
                                ]

                                component gen_terminator Term {
                                }
                                [
                                    position = 7864, 8208
                                    rotation = right
                                    hide_name = True
                                ]

                                component tm_delay "Unit Delay1" {
                                }
                                [
                                    position = 8432, 8224
                                    rotation = right
                                    hide_name = True
                                ]

                                component gen_rate_limiter "Rate Limiter1" {
                                    falling_limit = "2*np.pi*w_fall"
                                    rising_limit = "2*np.pi*w_rise"
                                }
                                [
                                    position = 8304, 7984
                                    hide_name = True
                                ]

                                component gen_z_domain_transfer LPF_d {
                                    a_coeff = "[1.0/(2*np.pi*fc_d),1]"
                                    b_coeff = "1"
                                    domain = "S-domain"
                                    method = "Bilinear"
                                }
                                [
                                    position = 7856, 8120
                                    hide_name = True
                                ]

                                component gen_c_function integrator {
                                    global_variables = "real out_state;"
                                    in_terminal_dimensions = "inherit"
                                    in_terminal_dimensions_str = "in inherit"
                                    in_terminal_labels = "False;"
                                    init_fnc = "/*Begin code section*/
out_state = 0;
/*End code section*/"
                                    no_feed_inputs = "[\'\']"
                                    no_feed_outputs = "[\'\']"
                                    out_terminal_dimensions = "inherit"
                                    out_terminal_dimensions_str = "out inherit"
                                    out_terminal_labels = "False;"
                                    out_terminal_properties = "inherit out;"
                                    output_fnc = "/*Begin code section*/
out = out_state;
out += execution_rate*in;
if(in>=0.0){
    if(out >= 6.283185307179586)
    {
        out -= 6.283185307179586;
    }
}
else{
        if(out <= -6.283185307179586)
    {
        out += 6.283185307179586;
    }
}
out_state = out;
/*End code section*/"
                                }
                                [
                                    position = 8336, 8136
                                    size = 0, 0
                                ]

                                component Subsystem Normalize {
                                    layout = dynamic
                                    component gen_c_function V_terminal {
                                        in_terminal_dimensions_str = "d inherit;q inherit;"
                                        in_terminal_labels = "False;False;"
                                        in_terminal_properties = "real d;inherit q;"
                                        no_feed_inputs = "[u\'\']"
                                        no_feed_outputs = "[u\'\']"
                                        out_terminal_dimensions_str = "t inherit;q_pu inherit;"
                                        out_terminal_labels = "False;False;"
                                        out_terminal_properties = "real t;inherit q_pu;"
                                        output_fnc = "/*Begin code section*/
t = (powf(d,2.0)+powf(q,2.0));
t = sqrt(t);
if(t<0.1){
    q_pu = q/0.1;
}
else{
    q_pu = q/t;
}
/*End code section*/"
                                    }
                                    [
                                        position = 8192, 8192
                                        size = 0, 0
                                    ]

                                    port d {
                                        position = left:1
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8048, 8152
                                    ]

                                    port q {
                                        position = left:2
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8048, 8216
                                    ]

                                    port q_pu {
                                        position = right:1
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8352, 8200
                                    ]

                                    port Vt {
                                        position = top:1
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8280, 8104
                                        rotation = left
                                    ]

                                    connect V_terminal.t Vt as Connection8
                                    connect V_terminal.d d as Connection1
                                    connect V_terminal.q q as Connection3
                                    connect q_pu V_terminal.q_pu as Connection9
                                }
                                [
                                    position = 8096, 8136
                                    size = 64, 64
                                ]

                                component Subsystem PI {
                                    layout = dynamic
                                    component gen_sum Sum7 {
                                    }
                                    [
                                        position = 8088, 8224
                                    ]

                                    component gen_gain Gain1 {
                                        gain = "2*np.pi*fc_Kd"
                                    }
                                    [
                                        position = 8160, 8416
                                    ]

                                    component gen_gain Kd {
                                        gain = "Kd"
                                    }
                                    [
                                        position = 7944, 8408
                                    ]

                                    component gen_gain Kb {
                                    }
                                    [
                                        position = 8216, 8312
                                        scale = -1, 1
                                    ]

                                    component gen_integrator Integrator1 {
                                        init_value = "2*np.pi*f"
                                        limit_lower = "-1"
                                        limit_upper = "1"
                                    }
                                    [
                                        position = 8216, 8224
                                    ]

                                    component gen_gain Kp {
                                        gain = "Kp"
                                    }
                                    [
                                        position = 8056, 8136
                                    ]

                                    component gen_integrator Integrator2 {
                                        limit_lower = "-1"
                                        limit_upper = "1"
                                    }
                                    [
                                        position = 8144, 8512
                                        scale = -1, 1
                                    ]

                                    component gen_limiter Limit1 {
                                        lower_limit = "lowLim*2*np.pi*f/100.0"
                                        upper_limit = "upLim*2*np.pi*f/100.0"
                                    }
                                    [
                                        position = 8408, 8224
                                    ]

                                    component gen_gain Ki {
                                        gain = "Ki"
                                    }
                                    [
                                        position = 7976, 8216
                                    ]

                                    component gen_sum Sum5 {
                                        signs = "3"
                                    }
                                    [
                                        position = 8320, 8224
                                    ]

                                    component gen_sum Sum6 {
                                        signs = "-+"
                                    }
                                    [
                                        position = 8320, 8312
                                        scale = -1, 1
                                    ]

                                    component gen_sum Sum8 {
                                        signs = "+-"
                                    }
                                    [
                                        position = 8040, 8416
                                    ]

                                    port In {
                                        label = "In"
                                        position = left:1
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7752, 8216
                                    ]

                                    port Out {
                                        label = "Out"
                                        position = right:1
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8472, 8224
                                    ]

                                    junction Junction2 sp
                                    [
                                        position = 8368, 8224
                                    ]

                                    junction Junction3 sp
                                    [
                                        position = 8440, 8224
                                    ]

                                    junction Junction5 sp
                                    [
                                        position = 8232, 8416
                                    ]

                                    junction Junction7 sp
                                    [
                                        position = 7792, 8216
                                    ]

                                    junction Junction8 sp
                                    [
                                        position = 7792, 8216
                                    ]

                                    connect Gain1.out Junction5 as Connection63
                                    connect Gain1.in Sum8.out as Connection61
                                    connect In Junction7 as Connection81
                                    connect Integrator2.in Junction5 as Connection65
                                    connect Integrator2.out Sum8.in1 as Connection66
                                    connect Junction2 Limit1.in as Connection45
                                    connect Junction3 Out as Connection48
                                    connect Junction5 Sum5.in2 as Connection64
                                    connect Junction8 Junction7 as Connection83
                                    connect Kb.in Sum6.out as Connection50
                                    connect Kd.in Junction8 as Connection84
                                    connect Ki.in Junction8 as Connection82
                                    connect Kp.in Junction7 as Connection76
                                    connect Kp.out Sum5.in as Connection68
                                    connect Limit1.out Junction3 as Connection47
                                    connect Sum5.in1 Integrator1.out as Connection5
                                    connect Sum5.out Junction2 as Connection44
                                    connect Sum6.in Junction2 as Connection46
                                    connect Sum6.in1 Junction3 as Connection49
                                    connect Sum7.out Integrator1.in as Connection52
                                    connect Sum7.in1 Kb.out as Connection53
                                    connect Sum7.in Ki.out as Connection73
                                    connect Sum8.in Kd.out as Connection79
                                }
                                [
                                    position = 8200, 8136
                                    size = 64, 48
                                ]

                                component Subsystem ABC_dqz {
                                    layout = dynamic
                                    component gen_abc2alpha_beta "abc to alpha beta" {
                                    }
                                    [
                                        position = 8024, 8192
                                    ]

                                    component gen_alpha_beta2d_q "alpha beta to dq" {
                                    }
                                    [
                                        position = 8248, 8192
                                    ]

                                    port A {
                                        position = left:1
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7952, 8104
                                        rotation = right
                                    ]

                                    port B {
                                        position = left:2
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7904, 8104
                                        rotation = right
                                    ]

                                    port C {
                                        position = left:3
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 7856, 8104
                                        rotation = right
                                    ]

                                    port wt {
                                        position = left:4
                                        kind = sp
                                        direction =  out
                                        sp_type {
                                            default = auto
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8176, 8288
                                        rotation = left
                                    ]

                                    port d {
                                        position = right:1
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8320, 8136
                                        rotation = left
                                    ]

                                    port q {
                                        position = right:2
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8368, 8136
                                        rotation = left
                                    ]

                                    port z {
                                        position = right:3
                                        kind = sp
                                        direction =  in
                                        sp_type {
                                            default = inherit
                                            readonly = True
                                        }
                                    }
                                    [
                                        position = 8096, 8288
                                        rotation = right
                                    ]

                                    connect "abc to alpha beta.A" A as Connection2685
                                    connect "abc to alpha beta.B" B as Connection2686
                                    connect "abc to alpha beta.C" C as Connection2687
                                    connect "abc to alpha beta.beta" "alpha beta to dq.beta" as Connection2689
                                    connect "alpha beta to dq.alpha" "abc to alpha beta.alpha" as Connection2688
                                    connect "alpha beta to dq.wt" wt as Connection2690
                                    connect d "alpha beta to dq.d" as Connection2692
                                    connect q "alpha beta to dq.q" as Connection2693
                                    connect z "abc to alpha beta.gamma" as Connection2691
                                }
                                [
                                    position = 7760, 8152
                                    size = 48, 104
                                ]

                                port A {
                                    position = left:1
                                    kind = sp
                                    direction =  out
                                    sp_type {
                                        default = auto
                                        readonly = True
                                    }
                                }
                                [
                                    position = 7608, 8152
                                    rotation = left
                                ]

                                port B {
                                    label = "B"
                                    position = left:2
                                    kind = sp
                                    direction =  out
                                    sp_type {
                                        default = auto
                                        readonly = True
                                    }
                                }
                                [
                                    position = 7648, 8176
                                    rotation = left
                                ]

                                port C {
                                    label = "C"
                                    position = left:3
                                    kind = sp
                                    direction =  out
                                    sp_type {
                                        default = auto
                                        readonly = True
                                    }
                                }
                                [
                                    position = 7688, 8200
                                    rotation = left
                                ]

                                port d {
                                    position = right:1
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8032, 8024
                                ]

                                port q {
                                    label = "q"
                                    position = right:2
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8032, 8080
                                ]

                                port Vt {
                                    position = right:3
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8160, 8072
                                ]

                                port wt {
                                    position = right:5
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8496, 8072
                                ]

                                port f {
                                    position = right:4
                                    kind = sp
                                    direction =  in
                                    sp_type {
                                        default = inherit
                                        readonly = True
                                    }
                                }
                                [
                                    position = 8536, 7984
                                ]

                                junction Junction14 sp
                                [
                                    position = 7960, 8120
                                ]

                                junction Junction15 sp
                                [
                                    position = 8000, 8152
                                ]

                                junction Junction16 sp
                                [
                                    position = 8264, 8136
                                ]

                                junction Junction17 sp
                                [
                                    position = 8432, 8136
                                ]

                                connect A ABC_dqz.A as Connection281
                                connect ABC_dqz.B B as Connection280
                                connect ABC_dqz.d LPF_d.in as Connection282
                                connect ABC_dqz.q LPF_q.in as Connection283
                                connect C ABC_dqz.C as Connection279
                                connect Gain1.in LPF_q1.out as Connection269
                                connect Junction14 Normalize.d as Connection253
                                connect Junction14 d as Connection262
                                connect Junction15 q as Connection261
                                connect Junction16 PI.Out as Connection273
                                [
                                    position = 0, 0
                                    breakpoints = 8264, 8136
                                ]
                                connect Junction17 wt as Connection276
                                [
                                    position = 0, 0
                                    breakpoints = 8432, 8136
                                ]
                                connect LPF_d.out Junction14 as Connection254
                                connect LPF_q.out Junction15 as Connection257
                                connect LPF_q1.in "Rate Limiter1.out" as Connection259
                                connect Normalize.q Junction15 as Connection255
                                connect Normalize.Vt Vt as Connection211
                                connect PI.In Normalize.q_pu as Connection264
                                connect "Rate Limiter1.in" Junction16 as Connection272
                                connect Term.in ABC_dqz.z as Connection284
                                connect "Unit Delay1.out" ABC_dqz.wt as Connection278
                                connect "Unit Delay1.in" Junction17 as Connection275
                                connect f Gain1.out as Connection268
                                connect integrator.in Junction16 as Connection274
                                connect integrator.out Junction17 as Connection277

                                lowLim = "70"
                                upLim = "140"
                                w_fall = "-60.0/5"
                                w_rise = "60.0/5"

                                mask {
                                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">Simple PLL with wrapped wt</span></p></body></html>"

                                    Kp {
                                        label = "Proportional gain"
                                        widget = edit
                                        type = generic
                                        default_value = "100.0"
                                    }

                                    Ki {
                                        label = "Integral gain"
                                        widget = edit
                                        type = generic
                                        default_value = "3200.0"
                                    }

                                    Kd {
                                        label = "Differential gain"
                                        widget = edit
                                        type = generic
                                        default_value = "1.0"
                                    }

                                    fc_Kd {
                                        label = "Derivative control LPF cut-off freq."
                                        widget = edit
                                        type = generic
                                        default_value = "113.6821"
                                    }

                                    fc_d {
                                        label = "d channel LPF cut-off freq."
                                        widget = edit
                                        type = generic
                                        default_value = "10.0"
                                        unit = "Hz"
                                    }

                                    fc_q {
                                        label = "q channel LPF cut-off freq."
                                        widget = edit
                                        type = generic
                                        default_value = "10.0"
                                        unit = "Hz"
                                    }

                                    f {
                                        label = "Target frequency"
                                        widget = edit
                                        type = generic
                                        default_value = "60.0"
                                        unit = "Hz"
                                    }

                                    upLim {
                                        label = "Frequency deviation upper limit"
                                        widget = edit
                                        type = generic
                                        default_value = "10"
                                        unit = "%"
                                    }

                                    lowLim {
                                        label = "Frequency deviation lower limit"
                                        widget = edit
                                        type = generic
                                        default_value = "-10"
                                        unit = "%"
                                    }

                                    zeta {
                                        label = "w 2nd order LPF damping ratio"
                                        widget = edit
                                        type = generic
                                        default_value = "0.707"
                                    }

                                    fc_w {
                                        label = "w 2nd order LPF cut-off freq."
                                        widget = edit
                                        type = generic
                                        default_value = "25.0"
                                        unit = "Hz"
                                    }

                                    Ts {
                                        label = "Execution rate"
                                        widget = edit
                                        type = generic
                                        default_value = "Ts"
                                    }

                                    w_rise {
                                        label = "w Rising rate"
                                        widget = edit
                                        type = generic
                                        default_value = "0"
                                        unit = "Hz/s"
                                    }

                                    w_fall {
                                        label = "w Falling rate"
                                        widget = edit
                                        type = generic
                                        default_value = "0"
                                        unit = "Hz/s"
                                    }

                                    CODE open
                                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                                    
                                        dialog = RegularComponentPropertiesDialog(
                                            component=component,
                                            property_container=component.masks[-1],
                                            current_diagram=current_diagram
                                        )
                                        dialog.exec_()
                                        
                                    ENDCODE
                                }
                            }
                            [
                                position = 8104, 8216
                                rotation = down
                                scale = -1, -1
                                size = 72, 152
                            ]

                            port f {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8296, 8240
                            ]

                            port wt {
                                position = right:2
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8248, 8264
                            ]

                            port A {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8016, 8160
                            ]

                            port B {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8016, 8216
                            ]

                            port C {
                                position = left:3
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8016, 8272
                            ]

                            connect B PLL.B as Connection2
                            connect C PLL.C as Connection3
                            connect PLL.A A as Connection1
                            connect PLL.wt wt as Connection7
                            connect Termination11.in PLL.d as Connection4
                            connect Termination12.in PLL.q as Connection5
                            connect Termination13.in PLL.Vt as Connection6
                            connect f PLL.f as Connection8
                        }
                        [
                            position = 5944, 7792
                            size = 64, 120
                        ]

                        port Ia {
                            position = left:10
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 5784, 7512
                        ]

                        port Ia_rms {
                            position = right:36
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6928, 7568
                        ]

                        port Ib {
                            position = left:11
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 5784, 7560
                        ]

                        port Ib_rms {
                            position = right:38
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6928, 7624
                        ]

                        port Ic {
                            position = left:12
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 5784, 7608
                        ]

                        port Ic_rms {
                            position = right:40
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6928, 7680
                        ]

                        port Va {
                            position = left:13
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 5784, 7352
                        ]

                        port Va_rms {
                            position = right:30
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6512, 7568
                        ]

                        port Vb {
                            position = left:14
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 5784, 7400
                        ]

                        port Vc {
                            position = left:15
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 5784, 7448
                        ]

                        port Vb_rms {
                            position = right:32
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6512, 7624
                        ]

                        port Vc_rms {
                            position = right:34
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6512, 7680
                        ]

                        port P {
                            position = right:42
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6928, 7752
                        ]

                        port Q {
                            position = right:43
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6992, 7784
                        ]

                        port S {
                            position = right:44
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6928, 7816
                        ]

                        port pf {
                            position = right:45
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6992, 7848
                        ]

                        port Ia_phase {
                            position = right:37
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6928, 7320
                        ]

                        port Ib_phase {
                            position = right:39
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6928, 7400
                        ]

                        port Ic_phase {
                            position = right:41
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6928, 7480
                        ]

                        port Va_phase {
                            position = right:31
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6512, 7320
                        ]

                        port Vb_phase {
                            position = right:33
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6512, 7400
                        ]

                        port Vc_phase {
                            position = right:35
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6512, 7480
                        ]

                        port "Export Import" {
                            position = right:52
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6992, 7912
                        ]

                        port "Lag Lead" {
                            position = right:51
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6928, 7880
                        ]

                        port bus_freq {
                            position = right:46
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6512, 7752
                        ]

                        port bus_wt {
                            position = right:47
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6512, 7832
                        ]

                        port Vline_a {
                            position = left:16
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 5784, 7752
                        ]

                        port Vline_b {
                            position = left:17
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 5832, 7792
                        ]

                        port Vline_c {
                            position = left:18
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 5784, 7832
                        ]

                        port line_freq {
                            position = right:49
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6040, 7752
                        ]

                        port line_wt {
                            position = right:50
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 6040, 7832
                        ]

                        tag From22 {
                            value = "Ic"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6704, 7472
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto19 {
                            value = "Vc"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 5912, 7448
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From23 {
                            value = "Vc"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6288, 7472
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From30 {
                            value = "Vb"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6288, 7624
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From35 {
                            value = "Ib"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6648, 7880
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto18 {
                            value = "Vb"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 5912, 7400
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From20 {
                            value = "Ia"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6704, 7376
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From31 {
                            value = "Va"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6288, 7568
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From21 {
                            value = "Ib"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6704, 7424
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From40 {
                            value = "Vc"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6288, 7832
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From34 {
                            value = "Vb"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6648, 7784
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From38 {
                            value = "Vb"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6288, 7792
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From41 {
                            value = "Va"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6704, 7328
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From27 {
                            value = "Ia"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6704, 7568
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From26 {
                            value = "Ib"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6704, 7624
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From39 {
                            value = "Va"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6288, 7752
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From36 {
                            value = "Ic"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6648, 7912
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From32 {
                            value = "Vc"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6648, 7816
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto17 {
                            value = "Va"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 5912, 7352
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From24 {
                            value = "Va"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6288, 7376
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From33 {
                            value = "Va"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6648, 7752
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From25 {
                            value = "Vb"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6288, 7424
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From28 {
                            value = "Ic"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6704, 7680
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto16 {
                            value = "Ic"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 5872, 7608
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From37 {
                            value = "Ia"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6648, 7848
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto14 {
                            value = "Ia"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 5872, 7512
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From29 {
                            value = "Vc"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 6288, 7680
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto15 {
                            value = "Ib"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 5872, 7560
                            hide_name = True
                            size = 0, 0
                        ]

                        junction Junction1 sp
                        [
                            position = 6336, 7376
                        ]

                        comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:18pt;">Measurements</span></p></body></html> ENDCOMMENT 
                        [
                            position = 6576, 7232
                        ]

                        comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:18pt;">Inputs</span></p></body></html> ENDCOMMENT 
                        [
                            position = 5848, 7256
                        ]

                        connect "Export Import" Meas_Power.export_or_import as Connection169
                        connect From20 Meas_phase.A as Connection210
                        connect From21 Meas_phase.B as Connection209
                        connect From22 Meas_phase.C as Connection208
                        connect From23 Meas_phase1.C as Connection141
                        connect From24 Junction1 as Connection202
                        connect From25 Meas_phase1.B as Connection143
                        connect From27 "RMS value1.in" as Connection156
                        connect From28 "RMS value3.in" as Connection158
                        connect From29 "RMS value6.in" as Connection164
                        connect From30 "RMS value5.in" as Connection163
                        connect From31 "RMS value4.in" as Connection162
                        connect From32 Meas_Power.Vc as Connection185
                        connect From33 Meas_Power.Va as Connection183
                        connect From34 Meas_Power.Vb as Connection184
                        connect From35 Meas_Power.Ib as Connection187
                        connect From36 Meas_Power.Ic as Connection188
                        connect From37 Meas_Power.Ia as Connection186
                        connect From38 PLL_bus.B as Connection200
                        connect From39 PLL_bus.A as Connection199
                        connect From40 PLL_bus.C as Connection201
                        connect From41 Meas_phase.Ref as Connection211
                        connect Goto15 Ib as Connection178
                        connect Goto16 Ic as Connection182
                        connect Goto17 Va as Connection189
                        connect Goto19 Vc as Connection191
                        connect Ia Goto14 as Connection180
                        connect Ia_rms "RMS value1.out" as Connection4
                        connect Ib_rms "RMS value2.out" as Connection6
                        connect Ic_rms "RMS value3.out" as Connection9
                        connect Junction1 Meas_phase1.A as Connection203
                        connect "Lag Lead" Meas_Power.lag_or_lead as Connection174
                        connect Meas_phase.Phase_A Ia_phase as Connection205
                        connect Meas_phase.Phase_B Ib_phase as Connection206
                        connect Meas_phase.Phase_C Ic_phase as Connection207
                        connect Meas_phase1.Ref Junction1 as Connection204
                        connect Meas_phase1.Phase_B Vb_phase as Connection150
                        connect Meas_phase1.Phase_C Vc_phase as Connection152
                        connect P Meas_Power.P as Connection173
                        connect Q Meas_Power.Q as Connection166
                        connect "RMS value2.in" From26 as Connection157
                        connect S Meas_Power.S as Connection167
                        connect Va_phase Meas_phase1.Phase_A as Connection148
                        connect Va_rms "RMS value4.out" as Connection74
                        connect Vb Goto18 as Connection190
                        connect Vb_rms "RMS value5.out" as Connection75
                        connect Vc_rms "RMS value6.out" as Connection78
                        connect Vline_a PLL_line.A as Connection196
                        connect Vline_b PLL_line.B as Connection195
                        connect Vline_c PLL_line.C as Connection194
                        connect bus_freq PLL_bus.f as Connection198
                        connect bus_wt PLL_bus.wt as Connection197
                        connect line_freq PLL_line.f as Connection192
                        connect line_wt PLL_line.wt as Connection193
                        connect pf Meas_Power.pf as Connection165
                    }
                    [
                        position = 7008, 8104
                        size = 96, 472
                    ]

                    component Subsystem Relay_Param {
                        layout = dynamic
                        component gen_bus_join "Bus Join1" {
                            inputs = "4"
                        }
                        [
                            position = 8240, 7648
                            hide_name = True
                        ]

                        component gen_bus_split "Bus Split1" {
                            outputs = "3"
                        }
                        [
                            position = 8200, 8096
                            rotation = down
                            hide_name = True
                            scale = -1, -1
                        ]

                        component sys_signal_switch "Signal switch1" {
                            threshold = "0.5"
                        }
                        [
                            position = 8976, 7944
                            hide_name = True
                            scale = 1, -1
                        ]

                        component src_constant dV_threshold {
                            execution_rate = "Ts"
                            value = "dV_threshold"
                        }
                        [
                            position = 8136, 7560
                            rotation = right
                        ]

                        component src_constant CT_primary {
                            execution_rate = "Ts"
                            value = "CT_primary"
                        }
                        [
                            position = 8088, 7928
                        ]

                        component src_constant Initial_status {
                            execution_rate = "Ts"
                            value = "Initial_status"
                        }
                        [
                            position = 8088, 7992
                        ]

                        component src_constant 27P_59P_tripDelay {
                            execution_rate = "Ts"
                            value = "R27P_R59P_tripDelay"
                        }
                        [
                            position = 8088, 7872
                        ]

                        component src_constant angle_threshold {
                            execution_rate = "Ts"
                            value = "angle_threshold"
                        }
                        [
                            position = 8136, 7768
                            rotation = left
                        ]

                        component src_constant dF_threshold {
                            execution_rate = "Ts"
                            value = "dF_threshold"
                        }
                        [
                            position = 8168, 7728
                            rotation = left
                        ]

                        component src_constant VRMSLL {
                            execution_rate = "Ts"
                            value = "VRMSLL"
                        }
                        [
                            position = 8168, 7504
                            rotation = right
                        ]

                        component Subsystem Grid_Tied_param {
                            layout = dynamic
                            component gen_bus_join "Bus Join1" {
                                inputs = "10"
                            }
                            [
                                position = 8552, 8040
                                hide_name = True
                            ]

                            component src_constant 51P_curveType {
                                execution_rate = "Ts"
                                value = "R51P_curveType1"
                            }
                            [
                                position = 8256, 7784
                                rotation = right
                            ]

                            component gen_gain divide_sqrt3 {
                                gain = "1.0/np.sqrt(3.0)"
                            }
                            [
                                position = 8504, 7808
                                rotation = right
                                hide_name = True
                            ]

                            component src_constant 27P_pickup {
                                execution_rate = "Ts"
                                value = "R27P_pickup1"
                            }
                            [
                                position = 8112, 7744
                                rotation = right
                            ]

                            component src_constant 50P_pickup {
                                execution_rate = "Ts"
                                value = "R50P_pickup1"
                            }
                            [
                                position = 8432, 7816
                                rotation = right
                            ]

                            component src_constant 59P_pickup {
                                execution_rate = "Ts"
                                value = "R59P_pickup1"
                            }
                            [
                                position = 8080, 7784
                                rotation = right
                            ]

                            component src_constant 51P_pickup {
                                execution_rate = "Ts"
                                value = "R51P_pickup1"
                            }
                            [
                                position = 8288, 7744
                                rotation = right
                            ]

                            component src_constant 51P_timeDial {
                                execution_rate = "Ts"
                                value = "R51P_timeDial1"
                            }
                            [
                                position = 8224, 7824
                                rotation = right
                            ]

                            component src_constant 50P_tripDelay {
                                execution_rate = "Ts"
                                value = "R50P_tripDelay1"
                            }
                            [
                                position = 8400, 7856
                                rotation = right
                            ]

                            port VRMSLL {
                                label = "VRMSLL"
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8504, 7744
                                rotation = right
                            ]

                            port CT_primary {
                                label = "CT_primary"
                                position = left:3
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8464, 7776
                                rotation = right
                            ]

                            port 27P_59P_tripDelay {
                                label = "27P_59P_tripDelay"
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8056, 7824
                                rotation = right
                            ]

                            port relay_param {
                                label = "relay_param"
                                position = right:auto
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8704, 8040
                            ]

                            comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">In bus join:</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in = VRMSLN</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in1 = CT_p</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in2 = IOC_pickup</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in3 = IOC_tripDelay</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in4 = TOC_pickup</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in5 = curveType</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in6 = timeDial</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in7 = UV_pickup</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in8 = OV_pickup</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in9 = UVOV_tripDelay</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html> ENDCOMMENT 
                            [
                                position = 8776, 7936
                            ]

                            connect 27P_59P_tripDelay "Bus Join1.in9" as Connection11
                            connect 27P_pickup.out "Bus Join1.in7" as Connection6
                            connect 50P_pickup.out "Bus Join1.in2" as Connection1
                            connect 50P_tripDelay.out "Bus Join1.in3" as Connection2
                            connect 51P_curveType.out "Bus Join1.in5" as Connection4
                            connect 51P_pickup.out "Bus Join1.in4" as Connection3
                            connect 51P_timeDial.out "Bus Join1.in6" as Connection5
                            connect 59P_pickup.out "Bus Join1.in8" as Connection7
                            connect CT_primary "Bus Join1.in1" as Connection10
                            connect divide_sqrt3.out "Bus Join1.in" as Connection9
                            connect divide_sqrt3.in VRMSLL as Connection8
                            connect relay_param "Bus Join1.out" as Connection12
                        }
                        [
                            position = 8744, 7864
                            size = 216, 104
                        ]

                        component Subsystem Islanded_param {
                            layout = dynamic
                            component gen_gain divide_sqrt3 {
                                gain = "1.0/np.sqrt(3.0)"
                            }
                            [
                                position = 8504, 7800
                                rotation = right
                                hide_name = True
                            ]

                            component gen_bus_join "Bus Join1" {
                                inputs = "10"
                            }
                            [
                                position = 8544, 8048
                                hide_name = True
                            ]

                            component src_constant 50P_tripDelay {
                                execution_rate = "Ts"
                                value = "R50P_tripDelay2"
                            }
                            [
                                position = 8392, 7840
                                rotation = right
                            ]

                            component src_constant 51P_timeDial {
                                execution_rate = "Ts"
                                value = "R51P_timeDial2"
                            }
                            [
                                position = 8216, 7816
                                rotation = right
                            ]

                            component src_constant 51P_curveType {
                                execution_rate = "Ts"
                                value = "R51P_curveType2"
                            }
                            [
                                position = 8248, 7776
                                rotation = right
                            ]

                            component src_constant 50P_pickup {
                                execution_rate = "Ts"
                                value = "R50P_pickup2"
                            }
                            [
                                position = 8432, 7800
                                rotation = right
                            ]

                            component src_constant 27P_pickup {
                                execution_rate = "Ts"
                                value = "R27P_pickup2"
                            }
                            [
                                position = 8104, 7736
                                rotation = right
                            ]

                            component src_constant 51P_pickup {
                                execution_rate = "Ts"
                                value = "R51P_pickup2"
                            }
                            [
                                position = 8280, 7736
                                rotation = right
                            ]

                            component src_constant 59P_pickup {
                                execution_rate = "Ts"
                                value = "R59P_pickup2"
                            }
                            [
                                position = 8072, 7776
                                rotation = right
                            ]

                            port VRMSLL {
                                label = "VRMSLL"
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8504, 7736
                                rotation = right
                            ]

                            port CT_primary {
                                label = "CT_primary"
                                position = left:3
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8464, 7768
                                rotation = right
                            ]

                            port 27P_59P_tripDelay {
                                label = "27P_59P_tripDelay"
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8040, 7816
                                rotation = right
                            ]

                            port relay_param {
                                label = "relay_param"
                                position = right:auto
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8696, 8048
                            ]

                            comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">In bus join:</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in = VRMSLN</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in1 = CT_p</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in2 = IOC_pickup</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in3 = IOC_tripDelay</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in4 = TOC_pickup</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in5 = curveType</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in6 = timeDial</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in7 = UV_pickup</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in8 = OV_pickup</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">in9 = UVOV_tripDelay</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html> ENDCOMMENT 
                            [
                                position = 8744, 7928
                            ]

                            connect 27P_59P_tripDelay "Bus Join1.in9" as Connection11
                            connect 27P_pickup.out "Bus Join1.in7" as Connection6
                            connect 50P_pickup.out "Bus Join1.in2" as Connection1
                            connect 50P_tripDelay.out "Bus Join1.in3" as Connection2
                            connect 51P_curveType.out "Bus Join1.in5" as Connection4
                            connect 51P_pickup.out "Bus Join1.in4" as Connection3
                            connect 51P_timeDial.out "Bus Join1.in6" as Connection5
                            connect 59P_pickup.out "Bus Join1.in8" as Connection7
                            connect CT_primary "Bus Join1.in1" as Connection10
                            connect divide_sqrt3.out "Bus Join1.in" as Connection9
                            connect divide_sqrt3.in VRMSLL as Connection8
                            connect relay_param "Bus Join1.out" as Connection12
                        }
                        [
                            position = 8744, 8008
                            size = 216, 104
                        ]

                        component Subsystem Reset {
                            layout = dynamic
                            component gen_c_function DetectChange_and_Hold {
                                global_variables = "real in_old;real counter;real change_flag;real out_old;"
                                in_terminal_dimensions = "inherit"
                                in_terminal_dimensions_str = "in inherit"
                                in_terminal_labels = "False;"
                                init_fnc = "/*Begin code section*/
in_old = 0;
counter = 0.0;
change_flag = 0;
out_old = 0;
/*End code section*/"
                                no_feed_inputs = "[\'\']"
                                no_feed_outputs = "[\'\']"
                                out_terminal_dimensions = "inherit"
                                out_terminal_dimensions_str = "out inherit"
                                out_terminal_labels = "False;"
                                output_fnc = "/*Begin code section*/
out = out_old;
//Detect if input signal changed and hold the output for 0.1 seconds
if(in != in_old){
    change_flag = 1;
    out = 1;
}
if(change_flag == 1){
    counter += execution_rate;
    if(counter>0.1){
        change_flag = 0;
        counter -= counter;
        out = 0;
    }
}
in_old = in;
out_old = out;
/*End code section*/"
                            }
                            [
                                position = 8056, 8232
                                hide_name = True
                                size = 0, 0
                            ]

                            component gen_logic_op or {
                                operator = "OR"
                            }
                            [
                                position = 8152, 8192
                                hide_name = True
                            ]

                            component "core/Edge Detection" "Edge Detection1" {
                                edge = "rising"
                            }
                            [
                                position = 8248, 8192
                                hide_name = True
                                size = 32, 32
                            ]

                            port reset {
                                label = "Reset"
                                position = right:2
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8344, 8152
                            ]

                            port op_mode {
                                label = "Op_mode"
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8344, 8288
                            ]

                            port "Reset in" {
                                label = "Reset in"
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8064, 8168
                            ]

                            port "op_mode in" {
                                label = "op_mode in"
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7944, 8288
                            ]

                            junction Junction3 sp
                            [
                                position = 8000, 8288
                            ]

                            connect DetectChange_and_Hold.in Junction3 as Connection34
                            connect DetectChange_and_Hold.out or.in1 as Connection43
                            connect "Edge Detection1.In1" or.out as Connection39
                            connect Junction3 op_mode as Connection33
                            connect "op_mode in" Junction3 as Connection32
                            connect or.in "Reset in" as Connection2
                            connect reset "Edge Detection1.Out1" as Connection44
                        }
                        [
                            position = 8352, 8096
                            rotation = down
                            scale = -1, -1
                            size = 144, 104
                        ]

                        port op_mode {
                            label = "op_mode"
                            position = right:4
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8480, 8064
                        ]

                        port reset {
                            label = "reset"
                            position = right:5
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8480, 8128
                        ]

                        port relay_paramR25 {
                            label = "relay_paramR25"
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8352, 7648
                        ]

                        port Initial_condition {
                            label = "Initial_condition"
                            position = right:3
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8192, 7992
                        ]

                        port from_Modbus {
                            label = "from_Modbus"
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8088, 8096
                        ]

                        port relay_param {
                            label = "relay_param"
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 9072, 7944
                        ]

                        tag Goto2 {
                            value = "27P_59P_tripDelay"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8208, 7872
                            hide_name = True
                            size = 96, 20
                        ]

                        tag From3 {
                            value = "CT_primary"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8488, 7896
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From2 {
                            value = "27P_59P_tripDelay"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8472, 7864
                            hide_name = True
                            size = 100, 20
                        ]

                        tag Goto1 {
                            value = "protection_mode"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8344, 8184
                            hide_name = True
                            size = 97, 20
                        ]

                        tag From1 {
                            value = "VRMSLL"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8488, 7832
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto3 {
                            value = "CT_primary"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8192, 7928
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto4 {
                            value = "VRMSLL"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8232, 7560
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From4 {
                            value = "protection_mode"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8976, 8064
                            rotation = right
                            hide_name = True
                            scale = 1, -1
                            size = 91, 20
                        ]

                        junction Junction1 sp
                        [
                            position = 8168, 7560
                        ]

                        junction Junction2 sp
                        [
                            position = 8608, 7832
                        ]

                        junction Junction3 sp
                        [
                            position = 8584, 7864
                        ]

                        junction Junction4 sp
                        [
                            position = 8560, 7896
                        ]

                        connect "Bus Join1.in" Junction1 as Connection54
                        connect "Bus Join1.in2" angle_threshold.out as Connection48
                        connect "Bus Join1.in3" dF_threshold.out as Connection49
                        connect "Bus Join1.in1" dV_threshold.out as Connection47
                        connect "Bus Split1.out1" "Reset.Reset in" as Connection78
                        connect "Bus Split1.in" from_Modbus as Connection42
                        connect From1 Junction2 as Connection60
                        connect From2 Junction3 as Connection63
                        connect From3 Junction4 as Connection66
                        connect From4 "Signal switch1.in2" as Connection71
                        connect Goto1 "Bus Split1.out2" as Connection45
                        connect Goto2 27P_59P_tripDelay.out as Connection51
                        connect Goto3 CT_primary.out as Connection52
                        connect Goto4 Junction1 as Connection56
                        connect Initial_condition Initial_status.out as Connection53
                        connect Islanded_param.VRMSLL Junction2 as Connection62
                        connect Islanded_param.27P_59P_tripDelay Junction3 as Connection65
                        connect Islanded_param.CT_primary Junction4 as Connection68
                        connect Junction1 VRMSLL.out as Connection55
                        connect Junction2 Grid_Tied_param.VRMSLL as Connection61
                        connect Junction3 Grid_Tied_param.27P_59P_tripDelay as Connection64
                        connect Junction4 Grid_Tied_param.CT_primary as Connection67
                        connect "Reset.op_mode in" "Bus Split1.out" as Connection77
                        connect Reset.op_mode op_mode as Connection75
                        connect "Signal switch1.in1" Grid_Tied_param.relay_param as Connection73
                        connect "Signal switch1.in" Islanded_param.relay_param as Connection72
                        connect relay_param "Signal switch1.out" as Connection74
                        connect relay_paramR25 "Bus Join1.out" as Connection50
                        connect reset Reset.reset as Connection76
                    }
                    [
                        position = 7904, 8000
                        size = 168, 160
                    ]

                    component Subsystem Read_CB_state {
                        layout = dynamic
                        component gen_gain Gain7 {
                            gain = "2"
                        }
                        [
                            position = 8160, 8176
                            hide_name = True
                        ]

                        component gen_sum Sum3 {
                            signs = "3"
                        }
                        [
                            position = 8288, 8176
                            hide_name = True
                        ]

                        component gen_gain Gain8 {
                            gain = "4"
                        }
                        [
                            position = 8128, 8240
                            hide_name = True
                        ]

                        component gen_logic_op not {
                            operator = "NOT"
                        }
                        [
                            position = 8088, 8176
                            hide_name = True
                        ]

                        component tm_delay "Unit Delay5" {
                            signal_out_type = "real"
                        }
                        [
                            position = 8368, 8176
                            hide_name = True
                        ]

                        port Trip_Cmd {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7976, 8096
                        ]

                        port CB_fb {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8176
                        ]

                        port Out {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8432, 8176
                        ]

                        junction Junction106 sp
                        [
                            position = 8016, 8176
                        ]

                        comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">52B</p></body></html> ENDCOMMENT 
                        [
                            position = 8080, 8272
                        ]

                        comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">52A</p></body></html> ENDCOMMENT 
                        [
                            position = 8048, 8120
                        ]

                        connect Gain7.out Sum3.in1 as Connection180
                        connect Gain8.in Junction106 as Connection186
                        connect Gain8.out Sum3.in2 as Connection183
                        connect Junction106 CB_fb as Connection192
                        connect Junction106 not.in as Connection185
                        connect Sum3.in Trip_Cmd as Connection193
                        connect Sum3.out "Unit Delay5.in" as Connection190
                        connect "Unit Delay5.out" Out as Connection191
                        connect not.out Gain7.in as Connection181
                    }
                    [
                        position = 7296, 8552
                        size = 72, 72
                    ]

                    component Subsystem "State Condition Mng" {
                        layout = dynamic
                        component gen_terminator Termination1 {
                        }
                        [
                            position = 8248, 8272
                            rotation = right
                            hide_name = True
                            scale = 1, -1
                        ]

                        component gen_logic_op not1 {
                            operator = "NOT"
                        }
                        [
                            position = 8032, 8416
                            hide_name = True
                        ]

                        component gen_sr_ff "SR Flip Flop1" {
                        }
                        [
                            position = 8264, 8344
                            rotation = right
                            hide_name = True
                            scale = 1, -1
                        ]

                        component gen_digital_probe trip {
                        }
                        [
                            position = 8472, 8160
                            rotation = left
                        ]

                        component gen_c_function "Trip_out mng fnc" {
                            global_variables = "uint ctrl_on_flag;uint close_cmd_flag;"
                            in_terminal_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit"
                            in_terminal_dimensions_str = "bool_R25 inherit;op_mode inherit;fault_flag inherit;time_flag inherit;init_cond inherit;isToggled_op_mode inherit"
                            in_terminal_labels = "False;False;False;False;False;False;"
                            in_terminal_properties = "real bool_R25;inherit op_mode;inherit fault_flag;inherit time_flag;inherit init_cond;inherit isToggled_op_mode;"
                            no_feed_inputs = "[\'\']"
                            no_feed_outputs = "[\'\']"
                            out_terminal_dimensions = "inherit"
                            out_terminal_dimensions_str = "trip_out inherit"
                            out_terminal_labels = "False;"
                            out_terminal_properties = "real trip_out;"
                            output_fnc = "/*Begin code section*/
if ((init_cond == 1) && (isToggled_op_mode == 1) && (op_mode == 0 || op_mode == 1)){
    ctrl_on_flag = 1;
}
else{
    ctrl_on_flag = 0;
}

if ((op_mode == 0 || op_mode == 1) && (isToggled_op_mode == 1)){
    close_cmd_flag =  1;
}
else{
    close_cmd_flag = 0;
}

if (time_flag && fault_flag==0 && bool_R25==1 && (ctrl_on_flag || close_cmd_flag)){
    trip_out = 1;
}
else if (time_flag && (fault_flag == 1 || bool_R25 == 0 )){
    if ( op_mode == 0 ||  op_mode == 2){
    trip_out = 0;
    }
    else if (op_mode == 1 && bool_R25 == 0){
        trip_out = 0;
    }
    else if (op_mode ==1){
        trip_out = 1;
    }
}
else{
    trip_out = init_cond;
}
/*End code section*/"
                        }
                        [
                            position = 8408, 8208
                            size = 0, 0
                        ]

                        component Subsystem detect_change {
                            layout = dynamic
                            component tm_delay "Unit Delay1" {
                            }
                            [
                                position = 8144, 8200
                                hide_name = True
                            ]

                            component gen_rel_op "Relational operator1" {
                                relational_op = "!="
                            }
                            [
                                position = 8240, 8192
                                hide_name = True
                            ]

                            port In {
                                label = "In"
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8032, 8200
                            ]

                            port Out {
                                label = "Out"
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8192
                            ]

                            junction Junction1 sp
                            [
                                position = 8080, 8200
                            ]

                            connect Junction1 In as Connection1
                            connect "Relational operator1.in" Junction1 as Connection2
                            connect "Relational operator1.out" Out as Connection3
                            connect "Unit Delay1.in" Junction1 as Connection4
                            connect "Unit Delay1.out" "Relational operator1.in1" as Connection5
                        }
                        [
                            position = 7944, 8488
                            size = 48, 48
                        ]

                        port Trip_in {
                            label = "Trip_in"
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7904, 8200
                        ]

                        port R25 {
                            label = "R25"
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8320, 8112
                            rotation = right
                        ]

                        port op_mode {
                            label = "op_mode"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7792, 8184
                        ]

                        port trip_out {
                            label = "trip_out"
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8536, 8208
                        ]

                        port enable {
                            label = "enable"
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7952, 8416
                        ]

                        port initial_condition {
                            label = "initial_condition"
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8088, 8328
                            rotation = left
                        ]

                        junction Junction1 sp
                        [
                            position = 8472, 8208
                        ]

                        junction Junction2 sp
                        [
                            position = 7840, 8184
                        ]

                        junction Junction3 sp
                        [
                            position = 7984, 8416
                        ]

                        connect Junction1 trip_out as Connection175
                        connect Junction2 detect_change.In as Connection179
                        connect Junction3 not1.in as Connection183
                        connect "SR Flip Flop1.r_in" not1.out as Connection136
                        connect Termination1.in "SR Flip Flop1.out_n" as Connection138
                        connect Trip_in "Trip_out mng fnc.fault_flag" as Connection181
                        connect "Trip_out mng fnc.trip_out" Junction1 as Connection176
                        connect "Trip_out mng fnc.op_mode" Junction2 as Connection180
                        connect "Trip_out mng fnc.time_flag" Junction3 as Connection184
                        connect "Trip_out mng fnc.bool_R25" R25 as Connection177
                        connect "Trip_out mng fnc.isToggled_op_mode" "SR Flip Flop1.out" as Connection186
                        connect "Trip_out mng fnc.init_cond" initial_condition as Connection185
                        connect detect_change.Out "SR Flip Flop1.s_in" as Connection156
                        connect enable Junction3 as Connection182
                        connect op_mode Junction2 as Connection178
                        connect trip.in Junction1 as Connection174
                    }
                    [
                        position = 8800, 8080
                        size = 128, 136
                    ]

                    component Subsystem "Relay 25-Sync Check" {
                        layout = dynamic
                        component gen_digital_probe freq_lock {
                            addr = "2"
                        }
                        [
                            position = 8200, 8024
                        ]

                        component gen_gain Gain2 {
                            gain = "np.sqrt(3)"
                        }
                        [
                            position = 7864, 7840
                            hide_name = True
                        ]

                        component gen_digital_probe phase_lock {
                            addr = "2"
                        }
                        [
                            position = 8344, 8200
                        ]

                        component gen_bus_split "Bus Split1" {
                            outputs = "4"
                        }
                        [
                            position = 7392, 7976
                            hide_name = True
                        ]

                        component gen_digital_probe volt_lock {
                            addr = "2"
                        }
                        [
                            position = 8336, 7872
                        ]

                        component gen_gain Gain1 {
                            gain = "np.sqrt(3)"
                        }
                        [
                            position = 7864, 7776
                            hide_name = True
                        ]

                        component gen_logic_op "Logical operator3" {
                            inputs = "3"
                        }
                        [
                            position = 8336, 8064
                            hide_name = True
                        ]

                        component gen_rms_value "RMS value2" {
                        }
                        [
                            position = 7784, 7840
                            hide_name = True
                        ]

                        component gen_digital_probe deadbus {
                            addr = "2"
                        }
                        [
                            position = 8592, 7672
                        ]

                        component gen_c_function "Deadbus fcn" {
                            global_variables = "real threshold;uint a;uint c;uint b;"
                            in_terminal_dimensions_str = "Vbus inherit;Vline inherit;VRMSLL inherit;"
                            in_terminal_properties = "real Vbus;real Vline;real VRMSLL;"
                            no_feed_inputs = "[u\'\']"
                            no_feed_outputs = "[u\'\']"
                            out_terminal_dimensions_str = "out inherit;"
                            output_fnc = "/*Begin code section*/
if (VRMSLL > 400)
    threshold=VRMSLL*0.003;
else
    threshold = VRMSLL*0.05;

if ((Vbus > (VRMSLL*0.90)) && (Vbus < (VRMSLL*1.20)) && (Vline < threshold))
    a = 1;
else
    a = 0;

if ((Vline > (VRMSLL*0.90)) && (Vline < (VRMSLL*1.20)) && (Vbus < threshold))
    b = 1;
else
    b = 0;

if ((Vline < threshold) && (Vbus < threshold))
    c = 1;
else
    c = 0;

out = a || b || c;
/*End code section*/"
                        }
                        [
                            position = 8208, 7672
                            size = 0, 0
                        ]

                        component gen_digital_probe R25 {
                            addr = "2"
                        }
                        [
                            position = 8704, 7944
                            rotation = left
                        ]

                        component Subsystem "Freq Comparator" {
                            layout = dynamic
                            component gen_probe freq_diff {
                                addr = "17943"
                            }
                            [
                                position = 7824, 7984
                            ]

                            component gen_rel_op "Relational operator1" {
                                relational_op = "<="
                            }
                            [
                                position = 7832, 8048
                                hide_name = True
                            ]

                            component gen_c_function "C function1" {
                                in_terminal_dimensions_str = "fbus inherit;fline inherit;"
                                in_terminal_properties = "real fbus;inherit fline;"
                                no_feed_inputs = "[u\'\']"
                                no_feed_outputs = "[u\'\']"
                                out_terminal_dimensions_str = "out inherit;"
                                output_fnc = "/*Begin code section*/
out=fabs(fline-fbus);
/*End code section*/"
                            }
                            [
                                position = 7736, 8040
                                hide_name = True
                                size = 0, 0
                            ]

                            port Locked {
                                label = "locked"
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 7912, 8048
                            ]

                            port f_bus {
                                label = "f_bus"
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7600, 8016
                            ]

                            port f_line {
                                label = "f_line"
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7600, 8080
                            ]

                            port dF_threshold {
                                label = "dF_threshold"
                                position = left:3
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7728, 8112
                            ]

                            junction Junction1 sp
                            [
                                position = 7776, 8040
                            ]

                            connect Junction1 "C function1.out" as Connection10
                            connect "Relational operator1.in" Junction1 as Connection9
                            connect "Relational operator1.out" Locked as Connection8
                            connect "Relational operator1.in1" dF_threshold as Connection7
                            connect f_bus "C function1.fbus" as Connection4
                            connect f_line "C function1.fline" as Connection5
                            connect freq_diff.in Junction1 as Connection11
                        }
                        [
                            position = 8016, 8064
                            size = 112, 88
                        ]

                        component Subsystem SignalTime_CheckCounter {
                            layout = dynamic
                            component src_constant Constant4 {
                                execution_rate = "Ts"
                                value = "[0]"
                            }
                            [
                                position = 7760, 8216
                                hide_name = True
                                scale = 1, -1
                            ]

                            component gen_logic_op "Logical operator9" {
                            }
                            [
                                position = 8136, 8176
                                hide_name = True
                            ]

                            component src_constant Constant2 {
                                execution_rate = "Ts"
                                value = "[2]"
                            }
                            [
                                position = 7760, 8344
                                hide_name = True
                                scale = 1, -1
                            ]

                            component sys_signal_switch "Signal switch1" {
                                threshold = "0.5"
                            }
                            [
                                position = 7840, 8200
                                hide_name = True
                                scale = 1, -1
                            ]

                            component gen_logic_op "Logical operator10" {
                                operator = "NOT"
                            }
                            [
                                position = 8056, 8184
                                hide_name = True
                            ]

                            component gen_logic_op or {
                                operator = "OR"
                            }
                            [
                                position = 7960, 8240
                                hide_name = True
                            ]

                            component src_constant Constant5 {
                                execution_rate = "Ts"
                                value = "[1]"
                            }
                            [
                                position = 7728, 8256
                                hide_name = True
                                scale = 1, -1
                            ]

                            component gen_sr_ff "SR Flip Flop1" {
                            }
                            [
                                position = 8512, 8192
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator8" {
                                operator = "OR"
                            }
                            [
                                position = 7968, 8088
                                hide_name = True
                            ]

                            component gen_logic_op and {
                            }
                            [
                                position = 8416, 8176
                                hide_name = True
                            ]

                            component gen_rel_op equal {
                            }
                            [
                                position = 7864, 8312
                                hide_name = True
                                scale = 1, -1
                            ]

                            component gen_rel_op equal1 {
                            }
                            [
                                position = 7800, 8264
                                hide_name = True
                                scale = 1, -1
                            ]

                            component gen_terminator Term {
                            }
                            [
                                position = 8608, 8248
                                hide_name = True
                            ]

                            component gen_c_function c_function {
                                in_terminal_dimensions = "inherit"
                                in_terminal_dimensions_str = "counter inherit"
                                in_terminal_labels = "False;"
                                in_terminal_properties = "real counter;"
                                no_feed_inputs = "[\'\']"
                                no_feed_outputs = "[\'\']"
                                out_terminal_dimensions = "inherit"
                                out_terminal_dimensions_str = "out inherit"
                                out_terminal_labels = "False;"
                                output_fnc = "/*Begin code section*/
if(counter>=(2.0/60.0)/execution_rate){
    out = 1;
}
else{
    out = 0;
}
/*End code section*/"
                            }
                            [
                                position = 8304, 8184
                                size = 0, 0
                            ]

                            component "core/Counter" Counter1 {
                                execution_rate = "Ts"
                            }
                            [
                                position = 8224, 8184
                                hide_name = True
                                size = 48, 48
                            ]

                            port trip_or {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7712, 8184
                            ]

                            port mode_in {
                                position = left:3
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7704, 8304
                                scale = 1, -1
                            ]

                            port deadbus {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7840, 8056
                            ]

                            port protection_status {
                                position = left:4
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7840, 8104
                            ]

                            port Bool_R25 {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8616, 8176
                            ]

                            junction Junction27 sp
                            [
                                position = 8000, 8240
                            ]

                            junction Junction29 sp
                            [
                                position = 8184, 8240
                            ]

                            junction Junction30 sp
                            [
                                position = 8096, 8088
                            ]

                            junction Junction31 sp
                            [
                                position = 7768, 8304
                            ]

                            connect Constant2.out equal.in as Connection1
                            connect Constant4.out "Signal switch1.in" as Connection179
                            connect Constant5.out equal1.in1 as Connection183
                            connect Junction27 Junction29 as Connection164
                            connect Junction27 or.out as Connection154
                            connect Junction29 Counter1.reset as Connection165
                            connect Junction30 "Logical operator9.in" as Connection174
                            connect Junction31 mode_in as Connection181
                            connect "Logical operator10.in" Junction27 as Connection153
                            connect "Logical operator8.out" Junction30 as Connection173
                            connect "Logical operator8.in" deadbus as Connection167
                            connect "Logical operator8.in1" protection_status as Connection168
                            connect "Logical operator9.out" Counter1.en as Connection151
                            connect "Logical operator9.in1" "Logical operator10.out" as Connection152
                            connect "SR Flip Flop1.out" Bool_R25 as Connection169
                            connect "SR Flip Flop1.r_in" Junction29 as Connection166
                            connect "SR Flip Flop1.out_n" Term.in as Connection38
                            connect "SR Flip Flop1.s_in" and.out as Connection163
                            connect "Signal switch1.out" or.in as Connection192
                            connect "Signal switch1.in1" trip_or as Connection177
                            connect and.in Junction30 as Connection175
                            connect c_function.counter Counter1.out as Connection193
                            connect c_function.out and.in1 as Connection194
                            connect equal.in1 Junction31 as Connection180
                            connect equal1.in Junction31 as Connection182
                            connect equal1.out "Signal switch1.in2" as Connection184
                            connect or.in1 equal.out as Connection27
                        }
                        [
                            position = 8616, 7992
                            size = 96, 184
                        ]

                        component Subsystem "Phase Comparator" {
                            layout = dynamic
                            component gen_rel_op "Relational operator1" {
                                relational_op = "<="
                            }
                            [
                                position = 7808, 8056
                                hide_name = True
                            ]

                            component gen_c_function "C function1" {
                                global_variables = "real mod_L;real wrap_out1;real wrap_out2;real mod_B;real k;real alpha;real PI2;real PI;"
                                in_terminal_dimensions_str = "phase_bus inherit;phase_line inherit;"
                                in_terminal_labels = "False;False;"
                                in_terminal_properties = "real phase_bus;real phase_line;"
                                init_fnc = "/*Begin code section*/
PI = 3.1415926536;
PI2 = 2*PI;
/*End code section*/"
                                no_feed_inputs = "[u\'\']"
                                no_feed_outputs = "[u\'\']"
                                out_terminal_dimensions_str = "out inherit;"
                                out_terminal_labels = "False;"
                                output_fnc = "/*Begin code section*/
mod_L=fmod(phase_line, PI2);
mod_B=fmod(phase_bus, PI2);

if (fabs(mod_L - mod_B) > PI) {
    if (mod_L < mod_B)
        mod_B -= PI2;
    else
        mod_B += PI2;
}

out=fabs(mod_L-mod_B)*180.0/PI;
/*End code section*/"
                            }
                            [
                                position = 7656, 8048
                                hide_name = True
                                size = 0, 0
                            ]

                            component gen_probe Phase_diff {
                                addr = "17943"
                            }
                            [
                                position = 7744, 8000
                            ]

                            port Locked {
                                label = "locked"
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 7912, 8056
                            ]

                            port wt_grid {
                                label = "wt_grid"
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7544, 8016
                            ]

                            port wt_gen {
                                label = "wt_gen"
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7544, 8080
                            ]

                            port angle_threshold {
                                label = "angle_threshold"
                                position = left:3
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7576, 8136
                            ]

                            junction Junction1 sp
                            [
                                position = 7712, 8048
                            ]

                            connect Junction1 "C function1.out" as Connection2
                            connect Locked "Relational operator1.out" as Connection3
                            connect Phase_diff.in Junction1 as Connection5
                            connect "Relational operator1.in" Junction1 as Connection4
                            connect angle_threshold "Relational operator1.in1" as Connection8
                            connect wt_gen "C function1.phase_line" as Connection6
                            connect wt_grid "C function1.phase_bus" as Connection7
                        }
                        [
                            position = 8016, 8200
                            size = 112, 88
                        ]

                        component Subsystem "Voltage Comparator" {
                            layout = dynamic
                            component gen_c_function "C function1" {
                                in_terminal_dimensions_str = "Vbus inherit;Vline inherit;"
                                in_terminal_properties = "real Vbus;inherit Vline;"
                                no_feed_inputs = "[u\'\']"
                                no_feed_outputs = "[u\'\']"
                                out_terminal_dimensions_str = "out inherit;"
                                output_fnc = "/*Begin code section*/
out=fabs(Vline-Vbus);
/*End code section*/"
                            }
                            [
                                position = 7736, 8040
                                hide_name = True
                                size = 0, 0
                            ]

                            component gen_rel_op "Relational operator1" {
                                relational_op = "<="
                            }
                            [
                                position = 7856, 8048
                                hide_name = True
                            ]

                            component gen_gain Gain1 {
                                gain = "0.01"
                            }
                            [
                                position = 7680, 8200
                                hide_name = True
                            ]

                            component gen_product Product1 {
                            }
                            [
                                position = 7760, 8160
                                hide_name = True
                            ]

                            component gen_probe Volt_diff {
                                addr = "17943"
                            }
                            [
                                position = 7824, 7976
                            ]

                            port V_bus {
                                label = "V_bus"
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7600, 8016
                            ]

                            port V_line {
                                label = "V_line"
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7600, 8080
                            ]

                            port Locked {
                                label = "locked"
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 7928, 8048
                            ]

                            port VRMSLL {
                                label = "VRMSLL"
                                position = left:3
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7600, 8152
                            ]

                            port dV_threshold {
                                label = "dV_threshold"
                                position = left:4
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7600, 8200
                            ]

                            junction Junction1 sp
                            [
                                position = 7784, 8040
                            ]

                            connect Gain1.in dV_threshold as Connection8
                            connect Junction1 "C function1.out" as Connection11
                            connect Product1.in1 Gain1.out as Connection7
                            connect Product1.out "Relational operator1.in1" as Connection9
                            connect Product1.in VRMSLL as Connection6
                            connect "Relational operator1.in" Junction1 as Connection10
                            connect "Relational operator1.out" Locked as Connection3
                            connect V_bus "C function1.Vbus" as Connection4
                            connect V_line "C function1.Vline" as Connection5
                            connect Volt_diff.in Junction1 as Connection12
                        }
                        [
                            position = 8016, 7872
                            size = 112, 232
                        ]

                        port trip_or {
                            label = "trip_or"
                            position = left:8
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8520, 7968
                        ]

                        port mode_in {
                            label = "mode_in"
                            position = left:7
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8472, 8016
                        ]

                        port bool_R25 {
                            label = "bool_R25"
                            position = auto:auto
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8760, 7992
                        ]

                        port Vline_a {
                            label = "Vline_A"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7712, 7840
                        ]

                        port bus_freq {
                            label = "bus_freq"
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7760, 8040
                        ]

                        port line_freq {
                            label = "line_freq"
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7808, 8064
                        ]

                        port bus_wt {
                            label = "bus_wt"
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7752, 8176
                        ]

                        port line_wt {
                            label = "line_wt"
                            position = left:6
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7808, 8200
                        ]

                        port relay_paramR25 {
                            label = "relay_paramR25"
                            position = left:9
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7296, 7976
                        ]

                        port Va_rms {
                            label = "Va"
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7712, 7776
                        ]

                        tag Goto4 {
                            value = "dF_threshold"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7616, 8000
                            hide_name = True
                            size = 97, 20
                        ]

                        tag Goto3 {
                            value = "angle_threshold"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7496, 7984
                            hide_name = True
                            size = 88, 20
                        ]

                        tag From4 {
                            value = "VRMSLL"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7896, 7904
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From1 {
                            value = "angle_threshold"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7880, 8224
                            hide_name = True
                            size = 81, 20
                        ]

                        tag Goto1 {
                            value = "VRMSLL"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7480, 7952
                            rotation = down
                            hide_name = True
                            scale = -1, 1
                            size = 0, 0
                        ]

                        tag Goto2 {
                            value = "dV_threshold"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7616, 7968
                            rotation = down
                            hide_name = True
                            scale = -1, 1
                            size = 100, 20
                        ]

                        tag From3 {
                            value = "dV_threshold"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7888, 7968
                            hide_name = True
                            size = 79, 20
                        ]

                        tag From5 {
                            value = "VRMSLL"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8112, 7688
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From2 {
                            value = "dF_threshold"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7888, 8088
                            hide_name = True
                            size = 73, 20
                        ]

                        junction Junction4 sp
                        [
                            position = 7920, 7840
                        ]

                        junction Junction23 sp
                        [
                            position = 7904, 7776
                        ]

                        junction Junction26 sp
                        [
                            position = 8152, 8064
                        ]

                        junction Junction27 sp
                        [
                            position = 8280, 8200
                        ]

                        junction Junction28 sp
                        [
                            position = 8704, 7992
                        ]

                        junction Junction29 sp
                        [
                            position = 8536, 7672
                        ]

                        junction Junction30 sp
                        [
                            position = 8272, 7872
                        ]

                        connect "Bus Split1.in" relay_paramR25 as Connection69
                        connect "Deadbus fcn.Vbus" Junction23 as Connection103
                        connect "Freq Comparator.Locked" Junction26 as Connection115
                        connect "Freq Comparator.f_line" line_freq as Connection133
                        connect From1 "Phase Comparator.angle_threshold" as Connection74
                        connect From2 "Freq Comparator.dF_threshold" as Connection79
                        connect From3 "Voltage Comparator.dV_threshold" as Connection80
                        connect From4 "Voltage Comparator.VRMSLL" as Connection81
                        connect From5 "Deadbus fcn.VRMSLL" as Connection90
                        connect Goto1 "Bus Split1.out" as Connection70
                        connect Goto2 "Bus Split1.out1" as Connection71
                        connect Goto3 "Bus Split1.out2" as Connection72
                        connect Goto4 "Bus Split1.out3" as Connection73
                        connect Junction23 Gain1.out as Connection16
                        connect Junction26 "Logical operator3.in1" as Connection116
                        connect Junction27 "Phase Comparator.Locked" as Connection119
                        connect Junction28 R25.in as Connection137
                        connect Junction29 "Deadbus fcn.out" as Connection143
                        connect Junction30 volt_lock.in as Connection153
                        connect Junction4 "Deadbus fcn.Vline" as Connection104
                        connect Junction4 Gain2.out as Connection21
                        connect "Logical operator3.in2" Junction27 as Connection118
                        connect "Logical operator3.in" Junction30 as Connection154
                        connect "Phase Comparator.wt_grid" bus_wt as Connection110
                        connect "RMS value2.out" Gain2.in as Connection150
                        connect SignalTime_CheckCounter.Bool_R25 Junction28 as Connection138
                        connect SignalTime_CheckCounter.deadbus Junction29 as Connection144
                        connect SignalTime_CheckCounter.protection_status "Logical operator3.out" as Connection139
                        connect Va_rms Gain1.in as Connection145
                        connect Vline_a "RMS value2.in" as Connection102
                        connect "Voltage Comparator.V_bus" Junction23 as Connection47
                        connect "Voltage Comparator.Locked" Junction30 as Connection152
                        connect "Voltage Comparator.V_line" Junction4 as Connection48
                        connect bool_R25 Junction28 as Connection136
                        connect bus_freq "Freq Comparator.f_bus" as Connection146
                        connect deadbus.in Junction29 as Connection142
                        connect freq_lock.in Junction26 as Connection117
                        connect line_wt "Phase Comparator.wt_gen" as Connection111
                        connect mode_in SignalTime_CheckCounter.mode_in as Connection140
                        connect phase_lock.in Junction27 as Connection120
                        connect trip_or SignalTime_CheckCounter.trip_or as Connection141
                    }
                    [
                        position = 8480, 7912
                        size = 120, 248
                    ]

                    component Subsystem R50512759 {
                        layout = dynamic
                        component gen_digital_probe R27 {
                        }
                        [
                            position = 8800, 8176
                            rotation = left
                        ]

                        component gen_digital_probe R59 {
                        }
                        [
                            position = 8800, 8464
                            rotation = left
                        ]

                        component gen_digital_probe R50 {
                        }
                        [
                            position = 8808, 7624
                            rotation = left
                        ]

                        component gen_logic_op not1 {
                        }
                        [
                            position = 8064, 7776
                            hide_name = True
                        ]

                        component tm_delay "Unit Delay1" {
                        }
                        [
                            position = 7984, 7784
                            hide_name = True
                        ]

                        component gen_logic_op or {
                            inputs = "4"
                            operator = "OR"
                        }
                        [
                            position = 7792, 7784
                            hide_name = True
                        ]

                        component gen_digital_probe R51 {
                        }
                        [
                            position = 8808, 7968
                            rotation = left
                        ]

                        component gen_bus_split "Bus Split1" {
                            outputs = "10"
                        }
                        [
                            position = 7792, 8152
                            hide_name = True
                        ]

                        component gen_logic_op not {
                            operator = "NOT"
                        }
                        [
                            position = 7904, 7784
                            hide_name = True
                        ]

                        component Subsystem "ANSI27n59 - Under and Overvoltage" {
                            layout = dynamic
                            component gen_c_function "ANSI 27 and 59 - Under and Overvoltage" {
                                global_variables = "real R27;real R59;real n59;real n27;real t59;real bool_27;real t27;real bool_59;uint i;real ratio[3];real Vrms[3];real UV_pickup_var;real OV_pickup_var;"
                                in_terminal_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                                in_terminal_dimensions_str = "enable inherit;Reset inherit;VrmsA inherit;VrmsB inherit;VrmsC inherit;VRMSLN inherit;UV_pickup inherit;OV_pickup inherit;UVOV_tripDelay inherit"
                                in_terminal_labels = "False;False;False;False;False;False;False;False;False;"
                                in_terminal_properties = "inherit enable;inherit Reset;inherit VrmsA;inherit VrmsB;inherit VrmsC;inherit VRMSLN;inherit UV_pickup;inherit OV_pickup;inherit UVOV_tripDelay;"
                                init_fnc = "/*Begin code section*/
R27=0;
R59=0;
n59=0;
n27=0;
t59 = 0;
t27 = 0;
bool_27 = 0;
bool_59 = 0;
/*End code section*/"
                                no_feed_inputs = "[\'\']"
                                no_feed_outputs = "[\'\']"
                                out_terminal_dimensions = "inherit;inherit"
                                out_terminal_dimensions_str = "trip27 inherit;trip59 inherit"
                                out_terminal_labels = "False;False;"
                                out_terminal_properties = "inherit trip27;inherit trip59;"
                                output_fnc = "/*Begin code section*/
Vrms[0] = VrmsA;
Vrms[1] = VrmsB;
Vrms[2] = VrmsC;

if (Reset==1) {
    R59=0;
    R27=0;
}


if (enable==1){

    if((UV_pickup>1)||(UV_pickup==0)){
        UV_pickup_var = 0.9;
    }
    else{
        UV_pickup_var = UV_pickup;
    }
    if((OV_pickup<1)||(OV_pickup==0)){
        OV_pickup_var = 1.1;
    }
    else{
        OV_pickup_var = OV_pickup;
    }

    for(i=0; i<3; i++){
        ratio[i] = Vrms[i]/VRMSLN;
    }

    t27 = 0.004167 + UVOV_tripDelay;
    t59 = 0.004167 + UVOV_tripDelay;


    for(i=0; i<3; i++){
        if(ratio[i]<=UV_pickup_var){
            bool_27 = 1;
            break;
        }
        else{
            bool_27 = 0;
        }
    }
    for(i=0; i<3; i++){
        if(ratio[i]>=OV_pickup_var){
            bool_59 = 1;
            break;
        }
        else{
            bool_59 = 0;
        }
    }

    n27 *= bool_27;
    n59 *= bool_59;

    n27 += bool_27  * execution_rate;
    n59 += bool_59  * execution_rate;

    if(n27 > t27){
        R27 = 1;
    }
    else{
        R27 = 0;
    }

    if(n59 > t59){
        R59 = 1;
    }
    else{
        R59 = 0;
    }
}

trip27 = R27;
trip59 = R59;
/*End code section*/"
                            }
                            [
                                position = 8192, 8192
                                size = 0, 0
                            ]

                            port Trip27 {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8344, 8128
                            ]

                            port Trip59 {
                                position = right:2
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8344, 8256
                            ]

                            port enable {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8088, 8048
                                rotation = right
                            ]

                            port Reset {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8040, 8080
                                rotation = right
                            ]

                            port VrmsA {
                                position = left:4
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7920, 8080
                                rotation = right
                            ]

                            port VrmsB {
                                position = left:5
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7848, 8048
                                rotation = right
                            ]

                            port VrmsC {
                                position = left:6
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7792, 8080
                                rotation = right
                            ]

                            port VRMSLN {
                                position = left:7
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7792, 8360
                                rotation = left
                            ]

                            port UV_pickup {
                                position = left:9
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7848, 8320
                                rotation = left
                            ]

                            port OV_pickup {
                                position = left:10
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7904, 8360
                                rotation = left
                            ]

                            port UVOV_tripDelay {
                                position = left:11
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7960, 8320
                                rotation = left
                            ]

                            connect "ANSI 27 and 59 - Under and Overvoltage.OV_pickup" OV_pickup as Connection19
                            connect "ANSI 27 and 59 - Under and Overvoltage.Reset" Reset as Connection13
                            connect "ANSI 27 and 59 - Under and Overvoltage.trip27" Trip27 as Connection12
                            connect "ANSI 27 and 59 - Under and Overvoltage.trip59" Trip59 as Connection10
                            connect "ANSI 27 and 59 - Under and Overvoltage.VRMSLN" VRMSLN as Connection17
                            connect "ANSI 27 and 59 - Under and Overvoltage.VrmsA" VrmsA as Connection14
                            connect "ANSI 27 and 59 - Under and Overvoltage.VrmsC" VrmsC as Connection16
                            connect "ANSI 27 and 59 - Under and Overvoltage.enable" enable as Connection9
                            connect UVOV_tripDelay "ANSI 27 and 59 - Under and Overvoltage.UVOV_tripDelay" as Connection20
                            connect UV_pickup "ANSI 27 and 59 - Under and Overvoltage.UV_pickup" as Connection18
                            connect VrmsB "ANSI 27 and 59 - Under and Overvoltage.VrmsB" as Connection15
                        }
                        [
                            position = 8608, 8376
                            size = 96, 320
                        ]

                        component Subsystem "ANSI51 - Inverse Time Overcurrent" {
                            layout = dynamic
                            component gen_c_function "ANSI 51 - Inverse Time Overcurrent" {
                                global_variables = "real R51;real n51;real t51;uint i;real bool_51;real A;real B;real P;real Ipu51;real CT_tap;real M[3];real t51s[3];real Irms[3];"
                                in_terminal_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                                in_terminal_dimensions_str = "enable inherit;Reset inherit;IrmsA inherit;IrmsB inherit;IrmsC inherit;CT_p inherit;TOC_pickup inherit;curveType inherit;timeDial inherit"
                                in_terminal_labels = "False;False;False;False;False;False;False;False;False;"
                                in_terminal_properties = "inherit enable;inherit Reset;inherit IrmsA;inherit IrmsB;inherit IrmsC;inherit CT_p;inherit TOC_pickup;inherit curveType;inherit timeDial;"
                                init_fnc = "/*Begin code section*/
R51=0;
n51=0;
A = 5.67;
B = 0.0352;
P = 2.0;
t51 = 0;
bool_51 = 0;
Ipu51 = 1;
/*End code section*/"
                                no_feed_inputs = "[\'\']"
                                no_feed_outputs = "[\'\']"
                                out_terminal_dimensions = "inherit"
                                out_terminal_dimensions_str = "trip51 inherit"
                                out_terminal_labels = "False;"
                                out_terminal_properties = "inherit trip51;"
                                output_fnc = "/*Begin code section*/
Irms[0] = IrmsA;
Irms[1] = IrmsB;
Irms[2] = IrmsC;

if (Reset==1) {
    R51=0;
}

if(curveType==1){
    A = 0.0104;
    B = 0.0226;
    P = 0.02;
}
else if(curveType==2){
    A = 5.95;
    B = 0.180;
    P = 2.0;
}
else if(curveType==3){
    A = 3.88;
    B = 0.0923;
    P = 2.0;
}
else{
    A = 5.67;
    B = 0.0352;
    P = 2.0;
}

if (enable==1){

    Ipu51 = TOC_pickup*CT_p/5.0; // Refer pickup to the primary side.  N1 = CT_p; N2 = 5.0

    for(i=0; i<3; i++){
        M[i] = Irms[i]/Ipu51; // Normalize RMS current based on the pickup.
        if(M[i]<=1.0){
            t51s[i] = 1e6;
        }
        else{
            t51s[i] = timeDial*(B+(A/(pow(M[i],P)-1))); // Calculate inverse time overcurrent trip delay.
        }
    }

    if((t51s[0]<=t51s[1])&&(t51s[0]<=t51s[2])){
        t51 = t51s[0];
    }
    else if(t51s[1]<=t51s[2]){
        t51 = t51s[1];
    }
    else{
        t51 = t51s[2];
    }

    for(i=0; i<3; i++){
        if(Irms[i]>Ipu51){
            bool_51 = 1;
            break;
        }
        else{
            bool_51 = 0;
        }
    }

    n51 *= bool_51;

    n51 += bool_51  * execution_rate;

    if(n51 > t51){
        R51 = 1;
    }
    else{
        R51 = 0;
    }
}

trip51 = R51;
/*End code section*/"
                            }
                            [
                                position = 8192, 8192
                                size = 0, 0
                            ]

                            port Enable {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8080, 8056
                                rotation = right
                            ]

                            port Reset {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8032, 8088
                                rotation = right
                            ]

                            port IrmsA {
                                position = left:4
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7920, 8088
                                rotation = right
                            ]

                            port IrmsB {
                                position = left:5
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7864, 8056
                                rotation = right
                            ]

                            port IrmsC {
                                position = left:6
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7824, 8088
                                rotation = right
                            ]

                            port CT_p {
                                position = left:7
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7808, 8344
                                rotation = left
                            ]

                            port Trip51 {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8264, 8192
                            ]

                            port TOC_pickup {
                                position = left:8
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7856, 8296
                                rotation = left
                            ]

                            port curveType {
                                position = left:9
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7952, 8344
                                rotation = left
                            ]

                            port timeDial {
                                position = left:10
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8000, 8296
                                rotation = left
                            ]

                            connect "ANSI 51 - Inverse Time Overcurrent.enable" Enable as Connection9
                            connect "ANSI 51 - Inverse Time Overcurrent.IrmsA" IrmsA as Connection10
                            connect "ANSI 51 - Inverse Time Overcurrent.IrmsC" IrmsC as Connection12
                            connect "ANSI 51 - Inverse Time Overcurrent.Reset" Reset as Connection3
                            connect "ANSI 51 - Inverse Time Overcurrent.TOC_pickup" TOC_pickup as Connection14
                            connect "ANSI 51 - Inverse Time Overcurrent.trip51" Trip51 as Connection5
                            connect "ANSI 51 - Inverse Time Overcurrent.timeDial" timeDial as Connection16
                            connect CT_p "ANSI 51 - Inverse Time Overcurrent.CT_p" as Connection13
                            connect IrmsB "ANSI 51 - Inverse Time Overcurrent.IrmsB" as Connection11
                            connect curveType "ANSI 51 - Inverse Time Overcurrent.curveType" as Connection15
                        }
                        [
                            position = 8608, 8016
                            size = 80, 280
                        ]

                        component Subsystem "ANSI50 - Instant Overcurrent" {
                            layout = dynamic
                            component gen_c_function "ANSI 50  - Instant Overcurrent" {
                                global_variables = "real R50;real n50;real t50;uint i;real bool_50;real Ipu50;real Iinst[3];"
                                in_terminal_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                                in_terminal_dimensions_str = "enable inherit;Reset inherit;IinstA inherit;IinstB inherit;IinstC inherit;IOC_pickup inherit;IOC_tripDelay inherit;CT_p inherit"
                                in_terminal_labels = "False;False;False;False;False;False;False;False;"
                                in_terminal_properties = "inherit enable;inherit Reset;inherit IinstA;inherit IinstB;inherit IinstC;inherit IOC_pickup;inherit IOC_tripDelay;inherit CT_p;"
                                init_fnc = "/*Begin code section*/
R50=0;
n50=0;
t50 = 0;
bool_50 = 0;
/*End code section*/"
                                no_feed_inputs = "[\'\']"
                                no_feed_outputs = "[\'\']"
                                out_terminal_dimensions = "inherit"
                                out_terminal_dimensions_str = "trip50 inherit"
                                out_terminal_labels = "False;"
                                out_terminal_properties = "inherit trip50;"
                                output_fnc = "/*Begin code section*/
Iinst[0] = fabs(IinstA);
Iinst[1] = fabs(IinstB);
Iinst[2] = fabs(IinstC);

if (Reset==1) {
    R50=0;
    bool_50 = 0.0;
}

//for(i=0; i<3; i++){
//    Iinst[i] = Iinst[i]*5.0/CT_p;
//}

if (enable==1){

    Ipu50 = IOC_pickup*1.41421356; //pickup times sqrt(2)

    t50 = 0.004167 + IOC_tripDelay;

    for(i=0; i<3; i++){
        Iinst[i] = Iinst[i]*5.0/CT_p;
        if(Iinst[i]>Ipu50){
            bool_50 = 1;
            break;
        }
    }

    n50 *= bool_50;

    n50 += bool_50  * execution_rate;

    if(n50 > t50)
        R50 = 1;
    else
        R50 = 0;
}

trip50 = R50;
/*End code section*/"
                            }
                            [
                                position = 8208, 8192
                                size = 0, 0
                            ]

                            port Enable {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8048, 8080
                                rotation = right
                            ]

                            port Reset {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7992, 8112
                                rotation = right
                            ]

                            port IinstA {
                                position = left:4
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7776, 8288
                                rotation = left
                            ]

                            port IinstB {
                                position = left:5
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7832, 8328
                                rotation = left
                            ]

                            port IinstC {
                                position = left:6
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7880, 8288
                                rotation = left
                            ]

                            port IOC_pickup {
                                position = left:7
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7936, 8328
                                rotation = left
                            ]

                            port IOC_tripDelay {
                                position = left:8
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7984, 8288
                                rotation = left
                            ]

                            port CT_p {
                                position = left:9
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8088, 8328
                                rotation = left
                            ]

                            port Trip50 {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8296, 8192
                            ]

                            connect "ANSI 50  - Instant Overcurrent.IOC_tripDelay" IOC_tripDelay as Connection8
                            connect "ANSI 50  - Instant Overcurrent.IinstA" IinstA as Connection4
                            connect "ANSI 50  - Instant Overcurrent.IinstC" IinstC as Connection6
                            connect "ANSI 50  - Instant Overcurrent.Reset" Reset as Connection3
                            connect "ANSI 50  - Instant Overcurrent.trip50" Trip50 as Connection1
                            connect CT_p "ANSI 50  - Instant Overcurrent.CT_p" as Connection9
                            connect Enable "ANSI 50  - Instant Overcurrent.enable" as Connection2
                            connect IOC_pickup "ANSI 50  - Instant Overcurrent.IOC_pickup" as Connection7
                            connect IinstB "ANSI 50  - Instant Overcurrent.IinstB" as Connection5
                        }
                        [
                            position = 8608, 7672
                            size = 80, 272
                        ]

                        port trip_50 {
                            label = "trip_50"
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8856, 7672
                        ]

                        port trip_51 {
                            label = "trip_51"
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8856, 8016
                        ]

                        port trip_59 {
                            label = "trip_59"
                            position = right:4
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8848, 8520
                        ]

                        port trip_27 {
                            label = "trip_27"
                            position = right:3
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8848, 8232
                        ]

                        port relay_param {
                            label = "Relay Param"
                            position = left:12
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7656, 8152
                        ]

                        port Irms_c {
                            label = "Irms_c"
                            position = left:8
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8328, 7944
                            rotation = right
                        ]

                        port Irms_a {
                            label = "Irms_a"
                            position = left:6
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8432, 7944
                            rotation = right
                        ]

                        port Enable {
                            label = "Enable"
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7984, 7720
                        ]

                        port Irms_b {
                            label = "Irms_b"
                            position = left:7
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8368, 7904
                            rotation = right
                        ]

                        port Reset {
                            label = "Reset"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7736, 7904
                        ]

                        port Vrms_b {
                            label = "Vrms_b"
                            position = left:10
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8376, 8272
                            rotation = right
                        ]

                        port Vrms_c {
                            label = "Vrms_c"
                            position = left:11
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8304, 8232
                            rotation = right
                        ]

                        port Vrms_a {
                            label = "Vrms_a"
                            position = left:9
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8416, 8232
                            rotation = right
                        ]

                        port Iinst_a {
                            label = "Iinst_a"
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8392, 7576
                            rotation = right
                        ]

                        port Iinst_b {
                            label = "Iinst_b"
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8352, 7616
                            rotation = right
                        ]

                        port Iinst_c {
                            label = "Iinst_c"
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8288, 7576
                            rotation = right
                        ]

                        tag Goto6 {
                            value = "IOC_pickup"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7896, 8112
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From16 {
                            value = "curveType"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8496, 8088
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto11 {
                            value = "UV_pickup"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7968, 8192
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From19 {
                            value = "IOC_pickup"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8488, 7720
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From26 {
                            value = "Enable"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8496, 7920
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto9 {
                            value = "curveType"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7968, 8160
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From23 {
                            value = "Trip27"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7624, 7792
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From12 {
                            value = "OV_pickup"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8488, 8472
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From20 {
                            value = "IOC_tripDelay"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8480, 7752
                            hide_name = True
                            size = 73, 20
                        ]

                        tag From15 {
                            value = "CT_p"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8496, 8040
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From11 {
                            value = "UV_pickup"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8488, 8440
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From2 {
                            value = "Reset"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8488, 7592
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From24 {
                            value = "Trip59"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7696, 7808
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From4 {
                            value = "Reset"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8496, 7944
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From25 {
                            value = "Enable"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8488, 7560
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From22 {
                            value = "Trip51"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7696, 7776
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From18 {
                            value = "CT_p"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8488, 7784
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto14 {
                            value = "Trip50"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8736, 7648
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From10 {
                            value = "VRMSLN"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8488, 8408
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto7 {
                            value = "IOC_tripDelay"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7976, 8128
                            hide_name = True
                            size = 82, 20
                        ]

                        tag Goto10 {
                            value = "timeDial"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7896, 8176
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto5 {
                            value = "CT_p"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7968, 8096
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From13 {
                            value = "UVOV_tripDelay"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8480, 8504
                            hide_name = True
                            size = 80, 20
                        ]

                        tag Goto12 {
                            value = "OV_pickup"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7896, 8208
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto17 {
                            value = "Trip59"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8736, 8488
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From14 {
                            value = "timeDial"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8496, 8112
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto15 {
                            value = "Trip51"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8728, 7976
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From27 {
                            value = "Enable"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8488, 8248
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From8 {
                            value = "Reset"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8488, 8280
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From17 {
                            value = "TOC_pickup"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8496, 8064
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto13 {
                            value = "UVOV_tripDelay"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7976, 8224
                            hide_name = True
                            size = 82, 20
                        ]

                        tag Goto18 {
                            value = "Enable"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8160, 7776
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From21 {
                            value = "Trip50"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7624, 7760
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto2 {
                            value = "Reset"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7848, 7904
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto8 {
                            value = "TOC_pickup"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7896, 8144
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto4 {
                            value = "VRMSLN"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7896, 8080
                            hide_name = True
                            size = 0, 0
                        ]

                        tag Goto16 {
                            value = "Trip27"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8736, 8264
                            hide_name = True
                            size = 0, 0
                        ]

                        junction Junction1 sp
                        [
                            position = 8808, 7672
                        ]

                        junction Junction2 sp
                        [
                            position = 8808, 8016
                        ]

                        junction Junction3 sp
                        [
                            position = 8800, 8520
                        ]

                        junction Junction4 sp
                        [
                            position = 8800, 8232
                        ]

                        junction Junction5 sp
                        [
                            position = 8680, 7672
                        ]

                        junction Junction6 sp
                        [
                            position = 8672, 8016
                        ]

                        junction Junction7 sp
                        [
                            position = 8680, 8232
                        ]

                        junction Junction8 sp
                        [
                            position = 8680, 8520
                        ]

                        connect "ANSI27n59 - Under and Overvoltage.Trip27" Junction7 as Connection139
                        connect "ANSI27n59 - Under and Overvoltage.Trip59" Junction8 as Connection142
                        connect "ANSI50 - Instant Overcurrent.Trip50" Junction5 as Connection133
                        connect "ANSI51 - Inverse Time Overcurrent.Trip51" Junction6 as Connection136
                        connect "Bus Split1.in" relay_param as Connection36
                        connect Enable not1.in as Connection153
                        connect From10 "ANSI27n59 - Under and Overvoltage.VRMSLN" as Connection122
                        connect From11 "ANSI27n59 - Under and Overvoltage.UV_pickup" as Connection123
                        connect From12 "ANSI27n59 - Under and Overvoltage.OV_pickup" as Connection124
                        connect From13 "ANSI27n59 - Under and Overvoltage.UVOV_tripDelay" as Connection125
                        connect From14 "ANSI51 - Inverse Time Overcurrent.timeDial" as Connection127
                        connect From15 "ANSI51 - Inverse Time Overcurrent.CT_p" as Connection126
                        connect From16 "ANSI51 - Inverse Time Overcurrent.curveType" as Connection128
                        connect From17 "ANSI51 - Inverse Time Overcurrent.TOC_pickup" as Connection129
                        connect From18 "ANSI50 - Instant Overcurrent.CT_p" as Connection130
                        connect From19 "ANSI50 - Instant Overcurrent.IOC_pickup" as Connection131
                        connect From2 "ANSI50 - Instant Overcurrent.Reset" as Connection82
                        connect From20 "ANSI50 - Instant Overcurrent.IOC_tripDelay" as Connection132
                        connect From21 or.in as Connection145
                        connect From22 or.in1 as Connection147
                        connect From23 or.in2 as Connection146
                        connect From24 or.in3 as Connection148
                        connect From25 "ANSI50 - Instant Overcurrent.Enable" as Connection155
                        connect From26 "ANSI51 - Inverse Time Overcurrent.Enable" as Connection156
                        connect From27 "ANSI27n59 - Under and Overvoltage.enable" as Connection157
                        connect From4 "ANSI51 - Inverse Time Overcurrent.Reset" as Connection85
                        connect From8 "ANSI27n59 - Under and Overvoltage.Reset" as Connection88
                        connect Goto10 "Bus Split1.out6" as Connection118
                        connect Goto11 "Bus Split1.out7" as Connection119
                        connect Goto12 "Bus Split1.out8" as Connection120
                        connect Goto13 "Bus Split1.out9" as Connection121
                        connect Goto14 Junction5 as Connection135
                        connect Goto15 Junction6 as Connection138
                        connect Goto16 Junction7 as Connection141
                        connect Goto17 Junction8 as Connection144
                        connect Goto18 not1.out as Connection154
                        connect Goto2 Reset as Connection76
                        connect Goto4 "Bus Split1.out" as Connection112
                        connect Goto5 "Bus Split1.out1" as Connection113
                        connect Goto6 "Bus Split1.out2" as Connection114
                        connect Goto7 "Bus Split1.out3" as Connection115
                        connect Goto8 "Bus Split1.out4" as Connection116
                        connect Goto9 "Bus Split1.out5" as Connection117
                        connect Iinst_a "ANSI50 - Instant Overcurrent.IinstA" as Connection78
                        connect Iinst_b "ANSI50 - Instant Overcurrent.IinstB" as Connection79
                        connect Iinst_c "ANSI50 - Instant Overcurrent.IinstC" as Connection80
                        connect Irms_a "ANSI51 - Inverse Time Overcurrent.IrmsA" as Connection90
                        connect Irms_b "ANSI51 - Inverse Time Overcurrent.IrmsB" as Connection91
                        connect Irms_c "ANSI51 - Inverse Time Overcurrent.IrmsC" as Connection92
                        connect Junction1 trip_50 as Connection101
                        connect Junction2 R51.in as Connection104
                        connect Junction3 trip_59 as Connection107
                        connect Junction4 R27.in as Connection110
                        connect Junction5 Junction1 as Connection134
                        connect Junction6 Junction2 as Connection137
                        connect Junction7 Junction4 as Connection140
                        connect Junction8 Junction3 as Connection143
                        connect R50.in Junction1 as Connection100
                        connect R59.in Junction3 as Connection106
                        connect "Unit Delay1.in" not.out as Connection150
                        connect Vrms_a "ANSI27n59 - Under and Overvoltage.VrmsA" as Connection93
                        connect Vrms_b "ANSI27n59 - Under and Overvoltage.VrmsB" as Connection94
                        connect Vrms_c "ANSI27n59 - Under and Overvoltage.VrmsC" as Connection95
                        connect not.in or.out as Connection149
                        connect not1.in1 "Unit Delay1.out" as Connection152
                        connect trip_27 Junction4 as Connection109
                        connect trip_51 Junction2 as Connection103
                    }
                    [
                        position = 7976, 8392
                        size = 144, 408
                    ]

                    component Subsystem Read_fault {
                        layout = dynamic
                        component gen_gain Gain1 {
                            gain = "2"
                        }
                        [
                            position = 8096, 8136
                            rotation = right
                            hide_name = True
                        ]

                        component gen_gain Gain5 {
                            gain = "8"
                        }
                        [
                            position = 8104, 8232
                            rotation = left
                            hide_name = True
                        ]

                        component gen_gain Gain4 {
                            gain = "4"
                        }
                        [
                            position = 8072, 8184
                            hide_name = True
                        ]

                        component gen_gain Gain6 {
                            gain = "16"
                        }
                        [
                            position = 8176, 8256
                            rotation = left
                            hide_name = True
                        ]

                        component tm_delay "Unit Delay2" {
                            signal_out_type = "real"
                        }
                        [
                            position = 8320, 8184
                            hide_name = True
                        ]

                        component gen_sum Sum1 {
                            signs = "5"
                        }
                        [
                            position = 8240, 8184
                            hide_name = True
                        ]

                        port R25 {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8184, 8112
                            rotation = right
                        ]

                        port R50 {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8096, 8072
                            rotation = right
                        ]

                        port R51 {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8008, 8184
                        ]

                        port R27 {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8104, 8296
                            rotation = left
                        ]

                        port R59 {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8176, 8320
                            rotation = left
                        ]

                        port Out {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8384, 8184
                        ]

                        connect Gain1.in R50 as Connection180
                        connect Gain1.out Sum1.in1 as Connection21
                        connect Gain4.in R51 as Connection176
                        connect Gain4.out Sum1.in2 as Connection170
                        connect Gain5.in R27 as Connection177
                        connect Gain5.out Sum1.in3 as Connection172
                        connect Gain6.in R59 as Connection179
                        connect Gain6.out Sum1.in4 as Connection174
                        connect Sum1.in R25 as Connection175
                        connect "Unit Delay2.out" Out as Connection178
                        connect "Unit Delay2.in" Sum1.out as Connection104
                    }
                    [
                        position = 7296, 8416
                        size = 64, 136
                    ]

                    port Ia {
                        position = -80.0, -96.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6792, 7912
                    ]

                    port Ib {
                        position = -80.0, -72.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6792, 7960
                    ]

                    port Ic {
                        position = -80.0, -48.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6792, 8008
                    ]

                    port Enable {
                        position = -0.1, -120.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7768, 8216
                    ]

                    port CB_cmd {
                        position = -0.1, 120.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 9272, 8024
                    ]

                    port Va_line {
                        position = -80.0, 48.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6792, 8200
                    ]

                    port Vb_line {
                        position = -80.0, 72.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6792, 8248
                    ]

                    port Vc_line {
                        position = -80.0, 96.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6792, 8296
                    ]

                    port Va_bus {
                        position = -80.0, -24.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6792, 8056
                    ]

                    port Vb_bus {
                        position = -80.0, -0.1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6792, 8104
                    ]

                    port Vc_bus {
                        position = -80.0, 24.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6792, 8152
                    ]

                    port Outputs {
                        position = 80.0, -96.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7336, 7760
                    ]

                    port Inputs {
                        position = 80.0, 96.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7752, 8000
                    ]

                    tag From29 {
                        value = "op_mode"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8632, 8056
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto27 {
                        value = "initial_condition"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8072, 8000
                        hide_name = True
                        scale = 1, -1
                        size = 92, 20
                    ]

                    tag Goto24 {
                        value = "lag_lead"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7304, 8256
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto16 {
                        value = "Ic"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6896, 7984
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto20 {
                        value = "Vb_rms"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7624, 7968
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto8 {
                        value = "Vline_a"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6896, 8176
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From21 {
                        value = "Ib"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7840, 8312
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From16 {
                        value = "line_freq"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8352, 7888
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From3 {
                        value = "R51"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7176, 8416
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From33 {
                        value = "initial_condition"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8616, 8104
                        hide_name = True
                        size = 89, 20
                    ]

                    tag From4 {
                        value = "R27"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7176, 8440
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto4 {
                        value = "R59"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8136, 8544
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From37 {
                        value = "op_mode"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8352, 7960
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto21 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7624, 7936
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From23 {
                        value = "Ib_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7840, 8408
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto1 {
                        value = "R50"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8136, 8192
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto3 {
                        value = "R27"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8136, 8432
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From25 {
                        value = "Ic_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7840, 8440
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto6 {
                        value = "trip_cmd"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9016, 8120
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From36 {
                        value = "Reset"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7840, 8248
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto5 {
                        value = "R25"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8640, 7888
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto19 {
                        value = "Ic_rms"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7624, 8096
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto10 {
                        value = "line_freq"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7304, 8224
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto28 {
                        value = "relay_param"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8072, 7952
                        hide_name = True
                        scale = 1, -1
                        size = 90, 20
                    ]

                    tag From14 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8352, 7816
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto25 {
                        value = "exp_imp"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7232, 8272
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From1 {
                        value = "R25"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7176, 8368
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From27 {
                        value = "Vb_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7840, 8504
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto29 {
                        value = "relay_paramR25"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8072, 7976
                        hide_name = True
                        scale = 1, -1
                        size = 91, 20
                    ]

                    tag From5 {
                        value = "R59"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7176, 8464
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From18 {
                        value = "bus_wt"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8352, 7912
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From38 {
                        value = "CB_state"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7184, 8568
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From28 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7840, 8472
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From32 {
                        value = "enable"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8632, 8128
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto23 {
                        value = "op_mode"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8056, 8024
                        hide_name = True
                        scale = 1, -1
                        size = 0, 0
                    ]

                    tag Goto15 {
                        value = "Ib"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6896, 7936
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From26 {
                        value = "Vc_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7840, 8536
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto11 {
                        value = "bus_freq"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7624, 8192
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto12 {
                        value = "bus_wt"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7232, 8208
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto17 {
                        value = "Ib_rms"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7624, 8064
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From20 {
                        value = "Ia"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7840, 8280
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From35 {
                        value = "relay_param"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7824, 8568
                        hide_name = True
                        size = 88, 20
                    ]

                    tag From2 {
                        value = "R50"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7176, 8392
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto14 {
                        value = "Ia"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6896, 7888
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From6 {
                        value = "trip_cmd"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7184, 8536
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From22 {
                        value = "Ic"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7840, 8344
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From34 {
                        value = "relay_paramR25"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8344, 8008
                        hide_name = True
                        size = 83, 20
                    ]

                    tag Goto22 {
                        value = "Vc_rms"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7624, 8000
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From17 {
                        value = "bus_freq"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8352, 7864
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From19 {
                        value = "line_wt"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8352, 7936
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto26 {
                        value = "enable"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7856, 8192
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From24 {
                        value = "Ia_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7840, 8376
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto13 {
                        value = "line_wt"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7232, 8240
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto18 {
                        value = "Ia_rms"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7624, 8032
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto30 {
                        value = "CB_state"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9280, 7984
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto7 {
                        value = "Reset"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8056, 8048
                        hide_name = True
                        scale = 1, -1
                        size = 0, 0
                    ]

                    tag From15 {
                        value = "Vline_a"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8352, 7840
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto2 {
                        value = "R51"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8136, 8304
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction51 sp
                    [
                        position = 8272, 8080
                    ]

                    junction Junction100 sp
                    [
                        position = 8088, 8216
                    ]

                    junction Junction101 sp
                    [
                        position = 8088, 8328
                    ]

                    junction Junction104 sp
                    [
                        position = 8576, 7912
                    ]

                    junction Junction105 sp
                    [
                        position = 8968, 8080
                    ]

                    junction Junction108 sp
                    [
                        position = 6840, 8200
                    ]

                    junction Junction111 sp
                    [
                        position = 6840, 7912
                    ]

                    junction Junction112 sp
                    [
                        position = 6840, 7960
                    ]

                    junction Junction113 sp
                    [
                        position = 6840, 8008
                    ]

                    junction Junction120 sp
                    [
                        position = 8088, 8456
                    ]

                    junction Junction121 sp
                    [
                        position = 8088, 8568
                    ]

                    junction Junction122 sp
                    [
                        position = 7808, 8216
                    ]

                    junction Junction124 sp
                    [
                        position = 8992, 8080
                    ]

                    junction Junction125 sp
                    [
                        position = 9216, 8024
                    ]

                    junction Junction126 sp
                    [
                        position = 9216, 7984
                    ]

                    junction Junction127 sp
                    [
                        position = 7144, 7936
                    ]

                    junction Junction128 sp
                    [
                        position = 7176, 7968
                    ]

                    junction Junction129 sp
                    [
                        position = 7208, 8000
                    ]

                    junction Junction130 sp
                    [
                        position = 7240, 8032
                    ]

                    junction Junction131 sp
                    [
                        position = 7272, 8064
                    ]

                    junction Junction132 sp
                    [
                        position = 7304, 8096
                    ]

                    junction Junction133 sp
                    [
                        position = 7400, 8192
                    ]

                    comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:18pt;">Protective functions</span></p></body></html> ENDCOMMENT 
                    [
                        position = 8120, 7744
                    ]

                    comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:18pt;">Read Measurements</span></p></body></html> ENDCOMMENT 
                    [
                        position = 6904, 7736
                    ]

                    connect "Bus Join1.in" Junction127 as Connection910
                    connect "Bus Join1.in2" Junction128 as Connection914
                    connect "Bus Join1.in4" Junction129 as Connection918
                    connect "Bus Join1.in6" Junction130 as Connection922
                    connect "Bus Join1.in8" Junction131 as Connection926
                    connect "Bus Join1.in10" Junction132 as Connection930
                    connect "Bus Join1.in16" Junction133 as Connection938
                    connect "Bus Join1.in7" Measurements.Ia_phase as Connection923
                    connect "Bus Join1.in13" Measurements.Q as Connection933
                    connect "Bus Join1.in9" Measurements.Ib_phase as Connection927
                    connect "Bus Join1.in5" Measurements.Vc_phase as Connection919
                    connect "Bus Join1.in1" Measurements.Va_phase as Connection911
                    connect "Bus Join1.in15" Measurements.pf as Connection935
                    connect "Bus Join1.in11" Measurements.Ic_phase as Connection931
                    connect "Bus Join1.in3" Measurements.Vb_phase as Connection915
                    connect "Bus Join1.in18" Read_CB_state.Out as Connection940
                    connect "Bus Join1.in17" Read_fault.Out as Connection939
                    connect CB_cmd Junction125 as Connection893
                    connect CB_state.in Junction126 as Connection896
                    connect Constant2.out "Signal switch1.in1" as Connection880
                    connect Delay1.in Junction124 as Connection891
                    connect Delay1.out "Signal switch1.in" as Connection383
                    connect Enable Junction122 as Connection373
                    connect From14 "Relay 25-Sync Check.Va_rms" as Connection219
                    connect From15 "Relay 25-Sync Check.Vline_a" as Connection220
                    connect From16 "Relay 25-Sync Check.line_freq" as Connection225
                    connect From17 "Relay 25-Sync Check.bus_freq" as Connection238
                    connect From18 "Relay 25-Sync Check.bus_wt" as Connection244
                    connect From19 "Relay 25-Sync Check.line_wt" as Connection246
                    connect From2 Read_fault.R50 as Connection375
                    connect From20 R50512759.Iinst_a as Connection336
                    connect From21 R50512759.Iinst_b as Connection337
                    connect From22 R50512759.Iinst_c as Connection338
                    connect From23 R50512759.Irms_b as Connection340
                    connect From24 R50512759.Irms_a as Connection339
                    connect From25 R50512759.Irms_c as Connection341
                    connect From26 R50512759.Vrms_c as Connection344
                    connect From27 R50512759.Vrms_b as Connection343
                    connect From28 R50512759.Vrms_a as Connection342
                    connect From29 "State Condition Mng.op_mode" as Connection309
                    connect From32 "State Condition Mng.enable" as Connection318
                    connect From33 "State Condition Mng.initial_condition" as Connection319
                    connect From34 "Relay 25-Sync Check.relay_paramR25" as Connection320
                    connect From35 R50512759.relay_param as Connection321
                    connect From36 R50512759.Reset as Connection335
                    connect From37 "Relay 25-Sync Check.mode_in" as Connection334
                    connect From38 Read_CB_state.CB_fb as Connection899
                    connect From4 Read_fault.R27 as Connection377
                    connect From6 Read_CB_state.Trip_Cmd as Connection382
                    connect Goto1 Junction100 as Connection152
                    connect Goto12 Measurements.bus_wt as Connection243
                    connect Goto14 Junction111 as Connection249
                    connect Goto15 Junction112 as Connection252
                    connect Goto16 Junction113 as Connection255
                    connect Goto18 Junction130 as Connection920
                    connect Goto2 Junction101 as Connection155
                    connect Goto20 Junction128 as Connection912
                    connect Goto22 Junction129 as Connection916
                    connect Goto23 Relay_Param.op_mode as Connection329
                    connect Goto24 "Measurements.Lag Lead" as Connection310
                    connect Goto25 "Measurements.Export Import" as Connection311
                    connect Goto27 Relay_Param.Initial_condition as Connection331
                    connect Goto28 Relay_Param.relay_param as Connection333
                    connect Goto29 Relay_Param.relay_paramR25 as Connection332
                    connect Goto30 Junction126 as Connection898
                    connect Goto4 Junction121 as Connection298
                    connect Goto5 Junction104 as Connection164
                    connect Goto6 Junction105 as Connection178
                    connect Goto7 Relay_Param.reset as Connection330
                    connect Goto8 Junction108 as Connection213
                    connect Ia Junction111 as Connection247
                    connect Ib Junction112 as Connection250
                    connect Ic Junction113 as Connection253
                    connect Inputs Relay_Param.from_Modbus as Connection328
                    connect Junction100 "Logical operator1.in" as Connection196
                    connect Junction101 "Logical operator1.in1" as Connection198
                    connect Junction101 R50512759.trip_51 as Connection154
                    connect Junction104 "State Condition Mng.R25" as Connection303
                    connect Junction105 "Unit Delay4.out" as Connection202
                    connect Junction120 Goto3 as Connection296
                    connect Junction121 R50512759.trip_59 as Connection299
                    connect Junction122 Goto26 as Connection372
                    connect Junction124 Junction105 as Connection889
                    connect Junction125 "Signal switch1.out" as Connection894
                    connect Junction126 Junction125 as Connection897
                    connect Junction127 Goto21 as Connection909
                    connect Junction128 Measurements.Vb_rms as Connection913
                    connect Junction129 Measurements.Vc_rms as Connection917
                    connect Junction130 Measurements.Ia_rms as Connection921
                    connect Junction131 Goto17 as Connection925
                    connect Junction132 Goto19 as Connection929
                    connect Junction133 Goto11 as Connection937
                    connect Junction51 "State Condition Mng.Trip_in" as Connection302
                    connect "Logical operator1.in2" Junction120 as Connection297
                    connect "Logical operator1.in3" Junction121 as Connection300
                    connect "Logical operator1.out" Junction51 as Connection79
                    connect Measurements.P "Bus Join1.in12" as Connection932
                    connect Measurements.S "Bus Join1.in14" as Connection934
                    connect Measurements.line_freq Goto10 as Connection224
                    connect Measurements.line_wt Goto13 as Connection245
                    connect Measurements.Vline_a Junction108 as Connection217
                    connect Measurements.Ia Junction111 as Connection257
                    connect Measurements.Ib Junction112 as Connection256
                    connect Measurements.Ic Junction113 as Connection258
                    connect Measurements.Va_rms Junction127 as Connection908
                    connect Measurements.Ib_rms Junction131 as Connection924
                    connect Measurements.Ic_rms Junction132 as Connection928
                    connect Measurements.bus_freq Junction133 as Connection936
                    connect Outputs "Bus Join1.out" as Connection101
                    connect R50512759.trip_50 Junction100 as Connection150
                    connect R50512759.trip_27 Junction120 as Connection295
                    connect R50512759.Enable Junction122 as Connection371
                    connect Read_fault.R25 From1 as Connection374
                    connect Read_fault.R51 From3 as Connection376
                    connect Read_fault.R59 From5 as Connection378
                    connect "Relay 25-Sync Check.bool_R25" Junction104 as Connection162
                    connect "Relay 25-Sync Check.trip_or" Junction51 as Connection94
                    connect "Signal switch1.in2" Junction124 as Connection890
                    connect "Unit Delay4.in" "State Condition Mng.trip_out" as Connection304
                    connect Va_bus Measurements.Va as Connection900
                    connect Va_line Junction108 as Connection211
                    connect Vb_bus Measurements.Vb as Connection108
                    connect Vb_line Measurements.Vline_b as Connection111
                    connect Vc_bus Measurements.Vc as Connection109
                    connect Vc_line Measurements.Vline_c as Connection112

                    mask {
                        icon = "image(\'relay_simple.svg\')"
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">Feeder protection relay example with protective functions 25 (synchronism check), 27 (Under Voltage), 50 (Instantaneous Overcurrent), 51 (Time Overcurrent) and 59 (Overvoltage). </span></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">                                                                                                            </span></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">The relay outputs are: 0 - Va_RMS; 1 - Va_Phase; 2 - Vb_RMS; 3 - Vb_Phase; 4 - Vc_RMS; 5 - Vc_Phase; 6 - Ia_RMS; 7 - Ia_Phase; 8 - Ib_RMS; 9 - Ib_Phase; 10 - Ic_RMS; 11 - Ic_Phase; 12 - P; 13 - Q; 14 - S; 15 - pf; 16 - bus_freq; 17 - protection functions status; 18 - Circuit Breaker status.</span></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">                                                                                                            </span></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">The relay inputs are: 0 - op_mode; 1 - Reset; 2 - protection_mode.</span></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">                                                                                                            </span></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">The trip pickups for functions 50 and 51 are defined as currents in the secondary of the current transformer (CT). The secondary of the CT has 5 turns.</span></p></body></html>"
                        help_file = "feeder_protection_relay.html"

                        VRMSLL {
                            label = "Line to Line RMS voltage"
                            widget = edit
                            type = generic
                            default_value = "13800.0"
                            unit = "V"
                            group = "Base Parameters"
                        }

                        dV_threshold {
                            label = "Voltage deviation threshold"
                            widget = edit
                            type = generic
                            default_value = "5.0"
                            unit = "%"
                            group = "Base Parameters"
                        }

                        angle_threshold {
                            label = "Angle deviation threshold"
                            widget = edit
                            type = generic
                            default_value = "12.0"
                            unit = "degree"
                            group = "Base Parameters"
                        }

                        dF_threshold {
                            label = "Frequency deviation threshold"
                            widget = edit
                            type = generic
                            default_value = "0.5"
                            unit = "Hz"
                            group = "Base Parameters"
                        }

                        R27P_R59P_tripDelay {
                            label = "R27 UV and R59 OV trip delay"
                            widget = edit
                            type = generic
                            default_value = "0.5"
                            unit = "s"
                            group = "Base Parameters"
                        }

                        CT_primary {
                            label = "CT primary turns number"
                            widget = edit
                            type = generic
                            default_value = "600"
                            group = "Base Parameters"
                        }

                        Initial_status {
                            label = "Initial relay status"
                            widget = edit
                            type = generic
                            default_value = "1.0"
                            group = "Base Parameters"
                        }

                        Ts {
                            label = "Execution rate"
                            widget = edit
                            type = generic
                            default_value = "200e-6"
                            unit = "s"
                            group = "Base Parameters"
                        }

                        R50P_pickup1 {
                            label = "R50 IOC trip pickup 1"
                            widget = edit
                            type = generic
                            default_value = "20.0"
                            unit = "A"
                            group = "GridTied Parameters"
                        }

                        R50P_tripDelay1 {
                            label = "R50 IOC trip delay 1"
                            widget = edit
                            type = generic
                            default_value = "0"
                            unit = "s"
                            group = "GridTied Parameters"
                        }

                        R51P_pickup1 {
                            label = "R51 TOC trip pickup 1"
                            widget = edit
                            type = generic
                            default_value = "0.8"
                            unit = "A"
                            group = "GridTied Parameters"
                        }

                        R51P_curveType1 {
                            label = "R51 TOC curve type 1"
                            widget = edit
                            type = generic
                            default_value = "1.0"
                            group = "GridTied Parameters"
                        }

                        R51P_timeDial1 {
                            label = "R51 TOC time dial 1"
                            widget = edit
                            type = generic
                            default_value = "1.0"
                            group = "GridTied Parameters"
                        }

                        R27P_pickup1 {
                            label = "R27 UV trip pickup 1"
                            widget = edit
                            type = generic
                            default_value = "0.9"
                            unit = "pu"
                            group = "GridTied Parameters"
                        }

                        R59P_pickup1 {
                            label = "R59 OV trip pickup 1"
                            widget = edit
                            type = generic
                            default_value = "1.1"
                            unit = "pu"
                            group = "GridTied Parameters"
                        }

                        R50P_pickup2 {
                            label = "R50 IOC trip pickup 2"
                            widget = edit
                            type = generic
                            default_value = "20.0"
                            unit = "A"
                            group = "Islanded Parameters"
                        }

                        R50P_tripDelay2 {
                            label = "R50 IOC trip delay 2"
                            widget = edit
                            type = generic
                            default_value = "1.0"
                            unit = "s"
                            group = "Islanded Parameters"
                        }

                        R51P_pickup2 {
                            label = "R51 TOC trip pickup 2"
                            widget = edit
                            type = generic
                            default_value = "0.7"
                            unit = "A"
                            group = "Islanded Parameters"
                        }

                        R51P_curveType2 {
                            label = "R51 TOC curve type 2"
                            widget = edit
                            type = generic
                            default_value = "2.0"
                            group = "Islanded Parameters"
                        }

                        R51P_timeDial2 {
                            label = "R51 TOC time dial 2"
                            widget = edit
                            type = generic
                            default_value = "3.0"
                            group = "Islanded Parameters"
                        }

                        R27P_pickup2 {
                            label = "R27 UV trip pickup 2"
                            widget = edit
                            type = generic
                            default_value = "0.9"
                            unit = "pu"
                            group = "Islanded Parameters"
                        }

                        R59P_pickup2 {
                            label = "R59 OV trip pickup 2"
                            widget = edit
                            type = generic
                            default_value = "1.1"
                            unit = "pu"
                            group = "Islanded Parameters"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7504, 8048
                    size = 160, 240
                ]

                component Subsystem "(59N) Neutral Overvoltage" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_zlk_21l_n3b"
                    component src_constant VLn {
                        execution_rate = "execution_rate"
                        value = "Vn/3.0**0.5"
                    }
                    [
                        position = 7392, 8192
                    ]

                    component src_constant OV_threshold_pu {
                        execution_rate = "execution_rate"
                        value = "NOV_thresh*3"
                    }
                    [
                        position = 7472, 8248
                    ]

                    component gen_digital_probe TRIP-INST {
                    }
                    [
                        position = 7704, 8472
                        rotation = left
                        scale = -1, -1
                    ]

                    component src_constant OV_delay_s {
                        execution_rate = "execution_rate"
                        value = "NOV_delay"
                    }
                    [
                        position = 7392, 8304
                    ]

                    component gen_sum Sum1 {
                        signs = "3"
                    }
                    [
                        position = 7264, 8392
                        hide_name = True
                    ]

                    component "core/Single-phase RMS variable frequency" RMS {
                        Ts = "execution_rate"
                        n_cycles = "1"
                    }
                    [
                        position = 7384, 8416
                        size = 88, 88
                    ]

                    component "core/Meter Split" "Meter Split1" {
                        freq = "True"
                    }
                    [
                        position = 7200, 8512
                        rotation = left
                        size = 96, 80
                    ]

                    component Subsystem OV {
                        layout = dynamic
                        component gen_comparator CMP1 {
                        }
                        [
                            position = 7808, 8240
                            hide_name = True
                        ]

                        component gen_logic_op LG4 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8224, 8280
                            rotation = down
                            hide_name = True
                        ]

                        component gen_comparator CMP4 {
                        }
                        [
                            position = 8288, 8352
                            hide_name = True
                        ]

                        component gen_product PD1 {
                        }
                        [
                            position = 7696, 8312
                            hide_name = True
                        ]

                        component gen_logic_op LG3 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8104, 8352
                            hide_name = True
                        ]

                        component "core/Counter" CNT1 {
                            execution_rate = "execution_rate"
                        }
                        [
                            position = 8200, 8344
                            hide_name = True
                            size = 48, 48
                        ]

                        component Subsystem gain {
                            layout = dynamic
                            component gen_gain GN1 {
                                gain = "1/Ts"
                            }
                            [
                                position = 8192, 8192
                                hide_name = True
                            ]

                            port In {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8192
                            ]

                            port Out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8288, 8192
                            ]

                            connect GN1.in In as Connection1
                            connect GN1.out Out as Connection2

                            mask {
                                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                                CODE open
                                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                    dialog = RegularComponentPropertiesDialog(
                                        component=component,
                                        property_container=component.masks[-1],
                                        current_diagram=current_diagram
                                    )
                                    dialog.exec_()

                                ENDCODE

                                CODE pre_compile
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    gain = mdl.get_item("GN1", parent=comp_handle, item_type="component")
                                    Ts = mdl.get_property_value(mdl.prop(gain, "execution_rate"))
                                ENDCODE
                            }
                        }
                        [
                            position = 8160, 8416
                            size = 48, 48
                        ]

                        component Subsystem "block function" {
                            layout = dynamic
                            component gen_logic_op "Logical operator1" {
                            }
                            [
                                position = 8224, 8104
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator2" {
                                operator = "NOT"
                            }
                            [
                                position = 7968, 8008
                                hide_name = True
                            ]

                            port in {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8128
                            ]

                            port Block {
                                position = top:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7928, 7960
                                rotation = right
                            ]

                            port out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8104
                            ]

                            tag Goto1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = in
                            }
                            [
                                position = 8056, 8008
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8128, 8080
                                hide_name = True
                                size = 0, 0
                            ]

                            connect From1 "Logical operator1.in" as Connection26
                            connect "Logical operator1.out" out as Connection28
                            connect in "Logical operator1.in1" as Connection29
                            connect Block "Logical operator2.in" as Connection30
                            connect "Logical operator2.out" Goto1 as Connection31
                        }
                        [
                            position = 7920, 8240
                            size = 80, 64
                        ]

                        port Threshold {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7616, 8336
                        ]

                        port Time {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8072, 8416
                        ]

                        port Scale {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7616, 8288
                        ]

                        port trip_inst {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8072, 8240
                        ]

                        port trip_delayed {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8376, 8352
                        ]

                        port 3V0_RMS {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7616, 8232
                        ]

                        port Block {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7616, 8416
                        ]

                        tag Goto1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7712, 8416
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7864, 8168
                            hide_name = True
                            size = 0, 0
                        ]

                        junction Junction13 sp
                        [
                            position = 8336, 8352
                        ]

                        junction Junction14 sp
                        [
                            position = 8008, 8240
                        ]

                        connect CMP4.out Junction13 as Connection65
                        connect CNT1.out CMP4.in1 as Connection26
                        connect Junction13 trip_delayed as Connection66
                        connect LG3.out CNT1.reset as Connection49
                        connect LG4.out CNT1.en as Connection64
                        connect LG4.in Junction13 as Connection67
                        connect PD1.out CMP1.in2 as Connection79
                        connect PD1.in Scale as Connection58
                        connect PD1.in1 Threshold as Connection59
                        connect 3V0_RMS CMP1.in1 as Connection78
                        connect Goto1 Block as Connection87
                        connect Time gain.In as Connection97
                        connect gain.Out CMP4.in2 as Connection98
                        connect "block function.in" CMP1.out as Connection104
                        connect LG3.in Junction14 as Connection105
                        connect Junction14 trip_inst as Connection106
                        [
                            position = 0, 0
                            breakpoints = 8008, 8240; 8008, 8240
                        ]
                        connect "block function.out" Junction14 as Connection107
                        connect "block function.Block" From1 as Connection108
                    }
                    [
                        position = 7600, 8304
                        size = 112, 272
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7472, 8360
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7568, 8672
                        rotation = left
                    ]

                    component gen_digital_probe TRIP-DLY {
                    }
                    [
                        position = 7392, 8648
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 7984
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7472, 8712
                        size = 112, 72
                    ]

                    port trip_delayed {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7752, 8192
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7120, 8608
                    ]

                    port trip_inst {
                        position = 72.0, 0.01
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7752, 8512
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7840, 8712
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7080, 8728
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7752, 8152
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT2 {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7776, 8416
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_inst {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7664, 8512
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7328, 8696
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7632, 8712
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7224, 8728
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7328, 8728
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7720, 8712
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction15 sp
                    [
                        position = 7704, 8192
                    ]

                    junction Junction16 sp
                    [
                        position = 7704, 8416
                    ]

                    junction Junction14 sp
                    [
                        position = 7392, 8696
                    ]

                    junction Junction25 sp
                    [
                        position = 7568, 8712
                    ]

                    connect RMS.In Sum1.out as Connection181
                    connect "Meter Split1.VAn" Sum1.in as Connection183
                    connect "Meter Split1.VBn" Sum1.in1 as Connection184
                    connect "Meter Split1.VCn" Sum1.in2 as Connection185
                    connect "Meter Split1.Freq" RMS.Freq as Connection186
                    connect "Meter Split1.Input" Meas_in as Connection187
                    connect OV_threshold_pu.out OV.Threshold as Connection202
                    connect VLn.out OV.Scale as Connection203
                    connect GT1 Junction15 as Connection204
                    [
                        position = 0, 0
                    ]
                    connect Junction15 trip_delayed as Connection205
                    [
                        position = 0, 0
                    ]
                    connect OV.trip_delayed Junction15 as Connection206
                    connect OV_delay_s.out OV.Time as Connection207
                    connect RMS.RMS OV.3V0_RMS as Connection209
                    connect Block.out OV.Block as Conn_block
                    connect OV.trip_inst Junction16 as Connection214
                    connect Junction16 TRIP-INST.in as Connection215
                    [
                        position = 0, 0
                        breakpoints = 7704, 8416
                    ]
                    connect GT2 Junction16 as Connection216
                    connect from_trip_inst trip_inst as conn_tripInst
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP-DLY.in Junction14 as Connection135
                    connect GT3 Junction25 as Connection188
                    connect Junction25 "Trip Memory.Mem" as Connection189
                    connect TRIP-MEM.in Junction25 as Connection190
                    connect "Trip Memory.mem_rst" from_rst as Connection218
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 59N neutral overvoltage relay function for three-phase system.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The neutral point voltage is estimated as the zero sequence component from the three-phase voltage</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        Vn {
                            label = "Nominal line voltage"
                            widget = edit
                            type = generic
                            default_value = "480"
                            unit = "Vrms"
                        }

                        NOV_thresh {
                            label = "Neutral over voltage threshold"
                            widget = edit
                            type = generic
                            default_value = "0.05"
                            unit = "p.u."
                        }

                        NOV_delay {
                            label = "Neutral over voltage trip delay"
                            widget = edit
                            type = generic
                            default_value = "0.1667"
                            unit = "s"
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "OV")
                            ENDCODE
                        }

                        inst_trip {
                            label = "Enable instantaneous trip output"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_inst_trip(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        trip_mem {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_inst_trip(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if not trip:
                                        trip = mdl.create_port(parent=comp_handle, name="trip_inst", direction="out",
                                                                kind="sp", terminal_position=(72, 0.01),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, trip, "conn_tripInst")
                                else:
                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if trip:
                                        pos = mdl.get_position(trip)
                                        mdl.delete_item(trip)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_inst", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripInst")


                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE
                    }
                }
                [
                    position = 8008, 8168
                    size = 144, 160
                ]

                component Subsystem "(50) Instantaneous Overcurrent" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_chy_d5k_n2b"
                    component src_constant OC_threshold_pu {
                        execution_rate = "execution_rate"
                        value = "OC_thresh"
                    }
                    [
                        position = 7432, 8064
                    ]

                    component src_constant In {
                        execution_rate = "execution_rate"
                        value = "In"
                    }
                    [
                        position = 7512, 8016
                    ]

                    component "core/Meter Split" "Meter Split" {
                        ia_rms = "True"
                        ib_rms = "True"
                        ic_rms = "True"
                        van = "False"
                        vbn = "False"
                        vcn = "False"
                    }
                    [
                        position = 7472, 8336
                        rotation = left
                        size = 96, 80
                    ]

                    component Subsystem "3-Phase Over Threshold" {
                        layout = dynamic
                        component gen_comparator CMP2 {
                        }
                        [
                            position = 8048, 8048
                            hide_name = True
                        ]

                        component gen_logic_op LG1 {
                            inputs = "3"
                            operator = "OR"
                        }
                        [
                            position = 8296, 8200
                            hide_name = True
                        ]

                        component gen_comparator CMP3 {
                        }
                        [
                            position = 8048, 8104
                            hide_name = True
                        ]

                        component gen_product PD1 {
                        }
                        [
                            position = 7928, 7832
                            hide_name = True
                        ]

                        component gen_comparator CMP1 {
                        }
                        [
                            position = 8048, 7992
                            hide_name = True
                        ]

                        component Subsystem "block function" {
                            layout = dynamic
                            component gen_logic_op "Logical operator1" {
                            }
                            [
                                position = 8216, 8104
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator2" {
                                operator = "NOT"
                            }
                            [
                                position = 7968, 7992
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator3" {
                            }
                            [
                                position = 8216, 8256
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator4" {
                            }
                            [
                                position = 8216, 8400
                                hide_name = True
                            ]

                            port in_B {
                                position = left:4
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8280
                            ]

                            port out_B {
                                position = right:2
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8256
                            ]

                            port in_A {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8128
                            ]

                            port out_C {
                                position = right:3
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8400
                            ]

                            port in_C {
                                position = left:6
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8424
                            ]

                            port Block {
                                position = top:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7912, 7944
                                rotation = right
                            ]

                            port out_A {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8104
                            ]

                            tag Goto1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = in
                            }
                            [
                                position = 8064, 7992
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8120, 8080
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From2 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8120, 8232
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From3 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8120, 8376
                                hide_name = True
                                size = 0, 0
                            ]

                            connect Block "Logical operator2.in" as Connection24
                            connect "Logical operator2.out" Goto1 as Connection25
                            connect From1 "Logical operator1.in" as Connection26
                            connect in_A "Logical operator1.in1" as Connection27
                            connect out_A "Logical operator1.out" as Connection28
                            connect From2 "Logical operator3.in" as Connection29
                            connect "Logical operator3.out" out_B as Connection30
                            connect in_B "Logical operator3.in1" as Connection31
                            connect From3 "Logical operator4.in" as Connection32
                            connect "Logical operator4.out" out_C as Connection33
                            connect in_C "Logical operator4.in1" as Connection34
                        }
                        [
                            position = 8144, 8048
                            size = 80, 160
                        ]

                        port trip_B {
                            position = right:3
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8368, 8048
                        ]

                        port Scale {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 7808
                        ]

                        port Threshold {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 7856
                        ]

                        port trip_C {
                            position = right:4
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8368, 8104
                        ]

                        port IA_RMS {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 7984
                        ]

                        port trip_A {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8368, 7992
                        ]

                        port IB_RMS {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 8040
                        ]

                        port IC_RMS {
                            position = left:6
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 8096
                        ]

                        port trip_inst {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8368, 8200
                        ]

                        port Block {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 7920
                        ]

                        tag Goto1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7936, 7920
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8096, 7920
                            hide_name = True
                            size = 0, 0
                        ]

                        junction Junction1 sp
                        [
                            position = 8000, 8056
                        ]

                        junction Junction12 sp
                        [
                            position = 8000, 8000
                        ]

                        junction Junction13 sp
                        [
                            position = 8208, 8104
                        ]

                        junction Junction14 sp
                        [
                            position = 8224, 8048
                        ]

                        junction Junction15 sp
                        [
                            position = 8240, 7992
                        ]

                        connect CMP2.in2 Junction1 as Connection4
                        connect Junction1 CMP3.in2 as Connection3
                        connect Junction1 Junction12 as Connection60
                        connect Junction12 CMP1.in2 as Connection61
                        connect PD1.out Junction12 as Connection62
                        connect PD1.in Scale as Connection58
                        connect PD1.in1 Threshold as Connection59
                        connect trip_inst LG1.out as Connection83
                        connect IA_RMS CMP1.in1 as Connection84
                        connect IB_RMS CMP2.in1 as Connection85
                        connect IC_RMS CMP3.in1 as Connection86
                        connect Goto1 Block as Connection87
                        connect CMP1.out "block function.in_A" as Connection98
                        connect CMP2.out "block function.in_B" as Connection99
                        connect CMP3.out "block function.in_C" as Connection100
                        connect LG1.in2 Junction13 as Connection101
                        connect Junction13 trip_C as Connection102
                        [
                            position = 0, 0
                            breakpoints = 8208, 8104
                        ]
                        connect "block function.out_C" Junction13 as Connection103
                        connect trip_B Junction14 as Connection104
                        connect Junction14 LG1.in1 as Connection105
                        [
                            position = 0, 0
                            breakpoints = 8224, 8048
                        ]
                        connect "block function.out_B" Junction14 as Connection106
                        connect trip_A Junction15 as Connection107
                        connect Junction15 LG1.in as Connection108
                        [
                            position = 0, 0
                            breakpoints = 8240, 7992
                        ]
                        connect "block function.out_A" Junction15 as Connection109
                        connect "block function.Block" From1 as Connection110
                    }
                    [
                        position = 7640, 8136
                        size = 120, 288
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7512, 8112
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7656, 8512
                        rotation = left
                    ]

                    component gen_digital_probe TRIP-INST {
                    }
                    [
                        position = 7480, 8488
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8000
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7560, 8552
                        size = 112, 72
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7408, 8416
                    ]

                    port trip_inst {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8016
                    ]

                    port trip_A {
                        position = 72.0, -32.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8096
                    ]

                    port trip_B {
                        position = 72.0, 0.01
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8176
                    ]

                    port trip_C {
                        position = 72.0, 32.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8256
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7888, 8552
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7200, 8568
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7792, 7976
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7416, 8536
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7720, 8552
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7280, 8568
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7376, 8568
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7808, 8552
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction15 sp
                    [
                        position = 7744, 8016
                    ]

                    junction Junction14 sp
                    [
                        position = 7480, 8536
                    ]

                    junction Junction25 sp
                    [
                        position = 7656, 8552
                    ]

                    connect "Meter Split.Input" Meas_in as Connection142
                    connect "3-Phase Over Threshold.Scale" In.out as Connection160
                    connect OC_threshold_pu.out "3-Phase Over Threshold.Threshold" as Connection161
                    connect "Meter Split.IA_RMS" "3-Phase Over Threshold.IA_RMS" as Connection163
                    connect "Meter Split.IB_RMS" "3-Phase Over Threshold.IB_RMS" as Connection164
                    connect "Meter Split.IC_RMS" "3-Phase Over Threshold.IC_RMS" as Connection165
                    connect GT1 Junction15 as Connection169
                    connect Junction15 trip_inst as Connection170
                    connect "3-Phase Over Threshold.trip_inst" Junction15 as Connection171
                    connect "3-Phase Over Threshold.trip_A" trip_A as conn_tripA
                    connect "3-Phase Over Threshold.trip_B" trip_B as conn_tripB
                    connect "3-Phase Over Threshold.trip_C" trip_C as conn_tripC
                    connect Block.out "3-Phase Over Threshold.Block" as Conn_block
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP-INST.in Junction14 as Connection135
                    connect GT3 Junction25 as Connection188
                    connect Junction25 "Trip Memory.Mem" as Connection189
                    connect TRIP-MEM.in Junction25 as Connection190
                    connect from_rst "Trip Memory.mem_rst" as Connection192
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 50 instantaneous overcurrent relay function for three-phase system.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        In {
                            label = "Nominal Current"
                            widget = edit
                            type = generic
                            default_value = "2000"
                            unit = "A"
                        }

                        OC_thresh {
                            label = "Instantaneous overcurrent threshold"
                            widget = edit
                            type = generic
                            default_value = "5.0"
                            unit = "p.u."
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "3-Phase Over Threshold")
                            ENDCODE
                        }

                        phase_trip {
                            label = "Enable individual phase trip"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_phase_trip(mdl, comp_handle, new_value, "3-Phase Over Threshold")
                            ENDCODE
                        }

                        trip_mem {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_phase_trip(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    termA = mdl.get_item("trip_A", parent=comp_handle, item_type="component")
                                    if termA:
                                        posA = mdl.get_position(termA)
                                        mdl.delete_item(termA)

                                    termB = mdl.get_item("trip_B", parent=comp_handle, item_type="component")
                                    if termB:
                                        posB = mdl.get_position(termB)
                                        mdl.delete_item(termB)

                                    termC = mdl.get_item("trip_C", parent=comp_handle, item_type="component")
                                    if termC:
                                        posC = mdl.get_position(termC)
                                        mdl.delete_item(termC)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    tripA = mdl.get_item("trip_A", parent=comp_handle, item_type="port")
                                    if not tripA:
                                        tripA = mdl.create_port(parent=comp_handle, name="trip_A", direction="out",
                                                                kind="sp", terminal_position=(72, -32),
                                                                position=posA)

                                    tripB = mdl.get_item("trip_B", parent=comp_handle, item_type="port")
                                    if not tripB:
                                        tripB = mdl.create_port(parent=comp_handle, name="trip_B", direction="out",
                                                                kind="sp", terminal_position=(72, 0.01),
                                                                position=posB)

                                    tripC = mdl.get_item("trip_C", parent=comp_handle, item_type="port")
                                    if not tripC:
                                        tripC = mdl.create_port(parent=comp_handle, name="trip_C", direction="out",
                                                                kind="sp", terminal_position=(72, 32),
                                                                position=posC)

                                    connA = mdl.get_item("conn_tripA", parent=comp_handle, item_type="connection")
                                    if not connA:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_A"), tripA,
                                                              "conn_tripA")

                                    connB = mdl.get_item("conn_tripB", parent=comp_handle, item_type="connection")
                                    if not connB:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_B"), tripB,
                                                              "conn_tripB")

                                    connC = mdl.get_item("conn_tripC", parent=comp_handle, item_type="connection")
                                    if not connC:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_C"), tripC,
                                                              "conn_tripC")


                                else:
                                    tripA = mdl.get_item("trip_A", parent=comp_handle, item_type="port")
                                    if tripA:
                                        posA = mdl.get_position(tripA)
                                        mdl.delete_item(tripA)

                                    tripB = mdl.get_item("trip_B", parent=comp_handle, item_type="port")
                                    if tripB:
                                        posB = mdl.get_position(tripB)
                                        mdl.delete_item(tripB)

                                    tripC = mdl.get_item("trip_C", parent=comp_handle, item_type="port")
                                    if tripC:
                                        posC = mdl.get_position(tripC)
                                        mdl.delete_item(tripC)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    termA = mdl.get_item("trip_A", parent=comp_handle, item_type="component")
                                    if not termA:
                                        termA = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_A", position=posA,
                                                                     rotation="up")

                                    termB = mdl.get_item("trip_B", parent=comp_handle, item_type="component")
                                    if not termB:
                                        termB = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_B", position=posB,
                                                                     rotation="up")

                                    termC = mdl.get_item("trip_C", parent=comp_handle, item_type="component")
                                    if not termC:
                                        termC = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_C", position=posC,
                                                                     rotation="up")

                                    connA = mdl.get_item("conn_tripA", parent=comp_handle, item_type="connection")
                                    if not connA:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_A"), mdl.term(termA, "in"),
                                                              "conn_tripA")

                                    connB = mdl.get_item("conn_tripB", parent=comp_handle, item_type="connection")
                                    if not connB:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_B"), mdl.term(termB, "in"),
                                                              "conn_tripB")

                                    connC = mdl.get_item("conn_tripC", parent=comp_handle, item_type="connection")
                                    if not connC:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_C"), mdl.term(termC, "in"),
                                                              "conn_tripC")



                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE
                    }
                }
                [
                    position = 8464, 7944
                    size = 144, 160
                ]

                component Subsystem "(59) Overvoltage" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_zlk_21l_n2b"
                    component gen_digital_probe TRIP-INST {
                    }
                    [
                        position = 7736, 8528
                        rotation = left
                        scale = -1, -1
                    ]

                    component src_constant OV_delay_s {
                        execution_rate = "execution_rate"
                        value = "OV_delay"
                    }
                    [
                        position = 7424, 8280
                    ]

                    component src_constant VLn {
                        execution_rate = "execution_rate"
                        value = "Vn/3.0**0.5"
                    }
                    [
                        position = 7448, 8184
                    ]

                    component src_constant OV_threshold_pu {
                        execution_rate = "execution_rate"
                        value = "OV_thresh"
                    }
                    [
                        position = 7520, 8232
                    ]

                    component Subsystem OV {
                        layout = dynamic
                        component gen_logic_op LG3 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8432, 8272
                            hide_name = True
                        ]

                        component gen_logic_op LG4 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8576, 8200
                            rotation = down
                            hide_name = True
                        ]

                        component gen_product PD1 {
                        }
                        [
                            position = 7928, 7848
                            hide_name = True
                        ]

                        component gen_logic_op LG1 {
                            inputs = "3"
                            operator = "OR"
                        }
                        [
                            position = 8296, 8200
                            hide_name = True
                        ]

                        component gen_comparator CMP4 {
                        }
                        [
                            position = 8616, 8272
                            hide_name = True
                        ]

                        component gen_comparator CMP2 {
                        }
                        [
                            position = 8032, 8048
                            hide_name = True
                        ]

                        component gen_comparator CMP1 {
                        }
                        [
                            position = 8032, 7992
                            hide_name = True
                        ]

                        component gen_comparator CMP3 {
                        }
                        [
                            position = 8032, 8104
                            hide_name = True
                        ]

                        component "core/Counter" CNT1 {
                            execution_rate = "execution_rate"
                        }
                        [
                            position = 8528, 8264
                            hide_name = True
                            size = 48, 48
                        ]

                        component Subsystem gain {
                            layout = dynamic
                            component gen_gain GN1 {
                                gain = "1/Ts"
                            }
                            [
                                position = 8192, 8192
                                hide_name = True
                            ]

                            port In {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8192
                            ]

                            port Out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8288, 8192
                            ]

                            connect GN1.in In as Connection1
                            connect GN1.out Out as Connection2

                            mask {
                                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                                CODE open
                                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                    dialog = RegularComponentPropertiesDialog(
                                        component=component,
                                        property_container=component.masks[-1],
                                        current_diagram=current_diagram
                                    )
                                    dialog.exec_()

                                ENDCODE

                                CODE pre_compile
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    gain = mdl.get_item("GN1", parent=comp_handle, item_type="component")
                                    Ts = mdl.get_property_value(mdl.prop(gain, "execution_rate"))
                                ENDCODE
                            }
                        }
                        [
                            position = 8512, 8336
                            size = 48, 48
                        ]

                        component Subsystem "block function" {
                            layout = dynamic
                            component gen_logic_op "Logical operator1" {
                            }
                            [
                                position = 8216, 8104
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator2" {
                                operator = "NOT"
                            }
                            [
                                position = 7968, 7992
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator3" {
                            }
                            [
                                position = 8216, 8256
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator4" {
                            }
                            [
                                position = 8216, 8400
                                hide_name = True
                            ]

                            port in_B {
                                position = left:4
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8280
                            ]

                            port out_B {
                                position = right:2
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8256
                            ]

                            port in_A {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8128
                            ]

                            port out_C {
                                position = right:3
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8400
                            ]

                            port in_C {
                                position = left:6
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8424
                            ]

                            port Block {
                                position = top:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7912, 7944
                                rotation = right
                            ]

                            port out_A {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8104
                            ]

                            tag Goto1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = in
                            }
                            [
                                position = 8064, 7992
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8120, 8080
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From2 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8120, 8232
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From3 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8120, 8376
                                hide_name = True
                                size = 0, 0
                            ]

                            connect Block "Logical operator2.in" as Connection24
                            connect "Logical operator2.out" Goto1 as Connection25
                            connect From1 "Logical operator1.in" as Connection26
                            connect in_A "Logical operator1.in1" as Connection27
                            connect out_A "Logical operator1.out" as Connection28
                            connect From2 "Logical operator3.in" as Connection29
                            connect "Logical operator3.out" out_B as Connection30
                            connect in_B "Logical operator3.in1" as Connection31
                            connect From3 "Logical operator4.in" as Connection32
                            connect "Logical operator4.out" out_C as Connection33
                            connect in_C "Logical operator4.in1" as Connection34
                        }
                        [
                            position = 8128, 8048
                            size = 80, 160
                        ]

                        port trip_C {
                            position = right:4
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8288, 8104
                        ]

                        port trip_inst {
                            position = right:5
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8408, 8200
                        ]

                        port VA {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 7984
                        ]

                        port trip_delayed {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8704, 8272
                        ]

                        port Time {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8416, 8336
                        ]

                        port VB {
                            position = left:6
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 8040
                        ]

                        port VC {
                            position = left:7
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 8096
                        ]

                        port Scale {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 7824
                        ]

                        port Threshold {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 7872
                        ]

                        port trip_A {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8288, 7992
                        ]

                        port trip_B {
                            position = right:3
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8288, 8048
                        ]

                        port Block {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 7928
                        ]

                        tag Goto1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7936, 7928
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8072, 7920
                            hide_name = True
                            size = 0, 0
                        ]

                        junction Junction1 sp
                        [
                            position = 8000, 8056
                        ]

                        junction Junction12 sp
                        [
                            position = 8000, 8000
                        ]

                        junction Junction13 sp
                        [
                            position = 8664, 8272
                        ]

                        junction Junction14 sp
                        [
                            position = 8360, 8200
                        ]

                        junction Junction15 sp
                        [
                            position = 8240, 7992
                        ]

                        junction Junction16 sp
                        [
                            position = 8224, 8048
                        ]

                        junction Junction17 sp
                        [
                            position = 8208, 8104
                        ]

                        connect CMP2.in2 Junction1 as Connection4
                        connect CMP4.out Junction13 as Connection65
                        connect CNT1.out CMP4.in1 as Connection26
                        connect Junction1 CMP3.in2 as Connection3
                        connect Junction1 Junction12 as Connection60
                        connect Junction12 CMP1.in2 as Connection61
                        connect Junction13 trip_delayed as Connection66
                        connect Junction14 trip_inst as Connection74
                        connect LG1.out Junction14 as Connection75
                        connect LG3.out CNT1.reset as Connection49
                        connect LG3.in Junction14 as Connection73
                        connect LG4.out CNT1.en as Connection64
                        connect LG4.in Junction13 as Connection67
                        connect PD1.out Junction12 as Connection62
                        connect PD1.in Scale as Connection58
                        connect PD1.in1 Threshold as Connection59
                        connect VA CMP1.in1 as Connection11
                        connect VB CMP2.in1 as Connection12
                        connect VC CMP3.in1 as Connection13
                        connect Goto1 Block as Connection87
                        connect gain.In Time as Connection95
                        connect gain.Out CMP4.in2 as Connection96
                        connect CMP1.out "block function.in_A" as Connection100
                        connect CMP2.out "block function.in_B" as Connection101
                        connect CMP3.out "block function.in_C" as Connection102
                        connect "block function.Block" From1 as Connection103
                        connect trip_A Junction15 as Connection104
                        connect Junction15 LG1.in as Connection105
                        [
                            position = 0, 0
                            breakpoints = 8240, 7992
                        ]
                        connect "block function.out_A" Junction15 as Connection106
                        connect trip_B Junction16 as Connection107
                        connect Junction16 LG1.in1 as Connection108
                        [
                            position = 0, 0
                            breakpoints = 8224, 8048
                        ]
                        connect "block function.out_B" Junction16 as Connection109
                        connect trip_C Junction17 as Connection110
                        connect Junction17 LG1.in2 as Connection111
                        [
                            position = 0, 0
                            breakpoints = 8208, 8104
                        ]
                        connect "block function.out_C" Junction17 as Connection112
                    }
                    [
                        position = 7648, 8328
                        size = 112, 344
                    ]

                    component "core/Meter Split" "Meter Split" {
                        van = "False"
                        van_rms = "True"
                        vbn = "False"
                        vbn_rms = "True"
                        vcn = "False"
                        vcn_rms = "True"
                    }
                    [
                        position = 7488, 8536
                        rotation = left
                        size = 96, 80
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7520, 8328
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7688, 8696
                        rotation = left
                    ]

                    component gen_digital_probe TRIP-DLY {
                    }
                    [
                        position = 7512, 8672
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8000
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7592, 8736
                        size = 112, 72
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7424, 8616
                    ]

                    port trip_delayed {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8184
                    ]

                    port trip_A {
                        position = 72.0, -16.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8256
                    ]

                    port trip_B {
                        position = 72.0, 8.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8328
                    ]

                    port trip_C {
                        position = 72.0, 32.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8400
                    ]

                    port trip_inst {
                        position = 72.0, -40.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8576
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7904, 8736
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7240, 8752
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7784, 8128
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT2 {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7792, 8472
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_inst {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7712, 8576
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7448, 8720
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7744, 8736
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7328, 8752
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7432, 8752
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7824, 8736
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction11 sp
                    [
                        position = 7736, 8184
                    ]

                    junction Junction15 sp
                    [
                        position = 7736, 8472
                    ]

                    junction Junction14 sp
                    [
                        position = 7512, 8720
                    ]

                    junction Junction25 sp
                    [
                        position = 7688, 8736
                    ]

                    connect Junction11 GT1 as Connection136
                    connect Meas_in "Meter Split.Input" as Connection140
                    connect "Meter Split.VAn_RMS" OV.VA as Connection137
                    connect "Meter Split.VCn_RMS" OV.VC as Connection139
                    connect OV.trip_delayed Junction11 as Connection91
                    connect OV.VB "Meter Split.VBn_RMS" as Connection138
                    connect OV_delay_s.out OV.Time as Connection128
                    connect OV_threshold_pu.out OV.Threshold as Connection127
                    connect VLn.out OV.Scale as Connection85
                    connect trip_delayed Junction11 as Connection93
                    connect Block.out OV.Block as Conn_block
                    connect OV.trip_A trip_A as conn_tripA
                    connect OV.trip_B trip_B as conn_tripB
                    connect OV.trip_C trip_C as conn_tripC
                    connect OV.trip_inst Junction15 as Connection142
                    connect Junction15 TRIP-INST.in as Connection143
                    [
                        position = 0, 0
                        breakpoints = 7736, 8472
                    ]
                    connect GT2 Junction15 as Connection144
                    connect from_trip_inst trip_inst as conn_tripInst
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP-DLY.in Junction14 as Connection135
                    connect GT3 Junction25 as Connection188
                    connect Junction25 "Trip Memory.Mem" as Connection189
                    connect TRIP-MEM.in Junction25 as Connection190
                    connect "Trip Memory.mem_rst" from_rst as Connection192
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 59 overvoltage relay function for three-phase system.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        Vn {
                            label = "Nominal line voltage"
                            widget = edit
                            type = generic
                            default_value = "480"
                            unit = "V"
                        }

                        OV_thresh {
                            label = "Overvoltage threshold"
                            widget = edit
                            type = generic
                            default_value = "1.1"
                            unit = "p.u."
                        }

                        OV_delay {
                            label = "Overvoltage trip delay"
                            widget = edit
                            type = generic
                            default_value = "0.1667"
                            unit = "s"
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "OV")
                            ENDCODE
                        }

                        inst_trip {
                            label = "Enable instantaneous trip output"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_inst_trip(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        phase_trip {
                            label = "Enable individual phase trip output"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_phase_trip(mdl, comp_handle, new_value, "OV")
                            ENDCODE
                        }

                        trip_mem {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_phase_trip(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    termA = mdl.get_item("trip_A", parent=comp_handle, item_type="component")
                                    if termA:
                                        posA = mdl.get_position(termA)
                                        mdl.delete_item(termA)

                                    termB = mdl.get_item("trip_B", parent=comp_handle, item_type="component")
                                    if termB:
                                        posB = mdl.get_position(termB)
                                        mdl.delete_item(termB)

                                    termC = mdl.get_item("trip_C", parent=comp_handle, item_type="component")
                                    if termC:
                                        posC = mdl.get_position(termC)
                                        mdl.delete_item(termC)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    tripA = mdl.get_item("trip_A", parent=comp_handle, item_type="port")
                                    if not tripA:
                                        tripA = mdl.create_port(parent=comp_handle, name="trip_A", direction="out",
                                                                kind="sp", terminal_position=(72, -16),
                                                                position=posA)

                                    tripB = mdl.get_item("trip_B", parent=comp_handle, item_type="port")
                                    if not tripB:
                                        tripB = mdl.create_port(parent=comp_handle, name="trip_B", direction="out",
                                                                kind="sp", terminal_position=(72, 8),
                                                                position=posB)

                                    tripC = mdl.get_item("trip_C", parent=comp_handle, item_type="port")
                                    if not tripC:
                                        tripC = mdl.create_port(parent=comp_handle, name="trip_C", direction="out",
                                                                kind="sp", terminal_position=(72, 32),
                                                                position=posC)

                                    connA = mdl.get_item("conn_tripA", parent=comp_handle, item_type="connection")
                                    if not connA:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_A"), tripA,
                                                              "conn_tripA")

                                    connB = mdl.get_item("conn_tripB", parent=comp_handle, item_type="connection")
                                    if not connB:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_B"), tripB,
                                                              "conn_tripB")

                                    connC = mdl.get_item("conn_tripC", parent=comp_handle, item_type="connection")
                                    if not connC:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_C"), tripC,
                                                              "conn_tripC")


                                else:
                                    tripA = mdl.get_item("trip_A", parent=comp_handle, item_type="port")
                                    if tripA:
                                        posA = mdl.get_position(tripA)
                                        mdl.delete_item(tripA)

                                    tripB = mdl.get_item("trip_B", parent=comp_handle, item_type="port")
                                    if tripB:
                                        posB = mdl.get_position(tripB)
                                        mdl.delete_item(tripB)

                                    tripC = mdl.get_item("trip_C", parent=comp_handle, item_type="port")
                                    if tripC:
                                        posC = mdl.get_position(tripC)
                                        mdl.delete_item(tripC)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    termA = mdl.get_item("trip_A", parent=comp_handle, item_type="component")
                                    if not termA:
                                        termA = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_A", position=posA,
                                                                     rotation="up")

                                    termB = mdl.get_item("trip_B", parent=comp_handle, item_type="component")
                                    if not termB:
                                        termB = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_B", position=posB,
                                                                     rotation="up")

                                    termC = mdl.get_item("trip_C", parent=comp_handle, item_type="component")
                                    if not termC:
                                        termC = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_C", position=posC,
                                                                     rotation="up")

                                    connA = mdl.get_item("conn_tripA", parent=comp_handle, item_type="connection")
                                    if not connA:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_A"), mdl.term(termA, "in"),
                                                              "conn_tripA")

                                    connB = mdl.get_item("conn_tripB", parent=comp_handle, item_type="connection")
                                    if not connB:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_B"), mdl.term(termB, "in"),
                                                              "conn_tripB")

                                    connC = mdl.get_item("conn_tripC", parent=comp_handle, item_type="connection")
                                    if not connC:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_C"), mdl.term(termC, "in"),
                                                              "conn_tripC")



                            def enable_inst_trip(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if not trip:
                                        trip = mdl.create_port(parent=comp_handle, name="trip_inst", direction="out",
                                                                kind="sp", terminal_position=(72, -40),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, trip, "conn_tripInst")
                                else:
                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if trip:
                                        pos = mdl.get_position(trip)
                                        mdl.delete_item(trip)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_inst", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripInst")


                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE
                    }
                }
                [
                    position = 7784, 8168
                    size = 144, 160
                ]

                component Subsystem "(50N) Neutral Instantaneous Overcurrent" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_zgg_pdz_lqb"
                    component src_constant OC_threshold_pu {
                        execution_rate = "execution_rate"
                        value = "NIO_thresh"
                    }
                    [
                        position = 7456, 8224
                    ]

                    component src_constant Ipk {
                        execution_rate = "execution_rate"
                        value = "In"
                    }
                    [
                        position = 7528, 8160
                    ]

                    component gen_sum Sum1 {
                        signs = "3"
                    }
                    [
                        position = 7328, 8328
                        hide_name = True
                    ]

                    component Subsystem "1-Phase Over Threshold" {
                        layout = dynamic
                        component gen_product PD1 {
                        }
                        [
                            position = 7944, 8320
                            hide_name = True
                        ]

                        component gen_comparator CMP1 {
                        }
                        [
                            position = 8024, 8240
                            hide_name = True
                        ]

                        component Subsystem "block function" {
                            layout = dynamic
                            component gen_logic_op "Logical operator1" {
                            }
                            [
                                position = 8224, 8104
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator2" {
                                operator = "NOT"
                            }
                            [
                                position = 7968, 8008
                                hide_name = True
                            ]

                            port in {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8128
                            ]

                            port Block {
                                position = top:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7928, 7960
                                rotation = right
                            ]

                            port out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8104
                            ]

                            tag Goto1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = in
                            }
                            [
                                position = 8056, 8008
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8128, 8080
                                hide_name = True
                                size = 0, 0
                            ]

                            connect From1 "Logical operator1.in" as Connection26
                            connect "Logical operator1.out" out as Connection28
                            connect in "Logical operator1.in1" as Connection29
                            connect Block "Logical operator2.in" as Connection30
                            connect "Logical operator2.out" Goto1 as Connection31
                        }
                        [
                            position = 8144, 8240
                            size = 80, 64
                        ]

                        port Scale {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7864, 8296
                        ]

                        port Thresh {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7864, 8344
                        ]

                        port trip_inst {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8256, 8240
                        ]

                        port IN_RMS {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7864, 8232
                        ]

                        port Block {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7864, 8424
                        ]

                        tag Goto1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7952, 8424
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8072, 8168
                            hide_name = True
                            size = 0, 0
                        ]

                        connect PD1.out CMP1.in2 as Connection79
                        connect PD1.in Scale as Connection58
                        connect PD1.in1 Thresh as Connection59
                        connect Goto1 Block as Connection87
                        connect IN_RMS CMP1.in1 as Connection93
                        connect "block function.in" CMP1.out as Connection94
                        connect "block function.out" trip_inst as Connection95
                        connect "block function.Block" From1 as Connection96
                    }
                    [
                        position = 7648, 8256
                        size = 112, 248
                    ]

                    component "core/Single-phase RMS variable frequency" RMS {
                        Ts = "execution_rate"
                        n_cycles = "1"
                    }
                    [
                        position = 7440, 8352
                        size = 88, 88
                    ]

                    component "core/Meter Split" "Meter Split1" {
                        freq = "True"
                        ia = "True"
                        ib = "True"
                        ic = "True"
                        van = "False"
                        vbn = "False"
                        vcn = "False"
                    }
                    [
                        position = 7240, 8440
                        rotation = left
                        hide_name = True
                        size = 96, 80
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7528, 8288
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7608, 8616
                        rotation = left
                    ]

                    component gen_digital_probe TRIP-INST {
                    }
                    [
                        position = 7432, 8592
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 7992
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect trip SR1.s_in as Connection10
                        connect mem_rst SR1.r_in as Connection11
                    }
                    [
                        position = 7512, 8656
                        size = 112, 72
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7152, 8528
                    ]

                    port trip_inst {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8256
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7824, 8656
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7160, 8672
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7792, 8216
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7368, 8640
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7664, 8656
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7248, 8672
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7352, 8672
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7744, 8656
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction15 sp
                    [
                        position = 7744, 8256
                    ]

                    junction Junction14 sp
                    [
                        position = 7432, 8640
                    ]

                    junction Junction25 sp
                    [
                        position = 7608, 8656
                    ]

                    connect Ipk.out "1-Phase Over Threshold.Scale" as Connection185
                    connect OC_threshold_pu.out "1-Phase Over Threshold.Thresh" as Connection186
                    connect trip_inst Junction15 as Connection189
                    connect Junction15 GT1 as Connection190
                    [
                        position = 0, 0
                        breakpoints = 7744, 8256
                    ]
                    connect "1-Phase Over Threshold.trip_inst" Junction15 as Connection191
                    connect RMS.In Sum1.out as Connection192
                    connect RMS.RMS "1-Phase Over Threshold.IN_RMS" as Connection193
                    connect "Meter Split1.IA" Sum1.in as Connection194
                    connect "Meter Split1.IB" Sum1.in1 as Connection195
                    connect "Meter Split1.IC" Sum1.in2 as Connection196
                    connect "Meter Split1.Freq" RMS.Freq as Connection197
                    connect Meas_in "Meter Split1.Input" as Connection198
                    connect Block.out "1-Phase Over Threshold.Block" as Conn_block
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP-INST.in Junction14 as Connection135
                    connect GT3 Junction25 as Connection188
                    connect Junction25 "Trip Memory.Mem" as Connection199
                    connect TRIP-MEM.in Junction25 as Connection200
                    connect from_rst "Trip Memory.mem_rst" as Connection202
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 50N neutral instantaneous overcurrent relay function for three-phase system.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The neutral current is estimated from the three-phase currents.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        In {
                            label = "NominalCurrent"
                            widget = edit
                            type = generic
                            default_value = "2000"
                            unit = "A"
                        }

                        NIO_thresh {
                            label = "Neutral instantaneous overcurrent threshold"
                            widget = edit
                            type = generic
                            default_value = "0.1"
                            unit = "p.u."
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "1-Phase Over Threshold")
                            ENDCODE
                        }

                        trip_mem {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE
                    }
                }
                [
                    position = 8704, 7944
                    size = 144, 160
                ]

                component Subsystem "(32L) Low Forward Power" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_df1_vrk_n2b"
                    component gen_sign SIGN1 {
                    }
                    [
                        position = 7456, 8488
                        hide_name = True
                    ]

                    component gen_digital_probe TRIP-INST {
                    }
                    [
                        position = 7736, 8432
                        rotation = left
                        scale = -1, -1
                    ]

                    component src_constant Pn {
                        execution_rate = "execution_rate"
                        value = "Pn"
                    }
                    [
                        position = 7504, 8176
                    ]

                    component src_constant LFP_delay_s {
                        execution_rate = "execution_rate"
                        value = "LFP_delay"
                    }
                    [
                        position = 7432, 8272
                    ]

                    component gen_abs ABS1 {
                    }
                    [
                        position = 7424, 8224
                        hide_name = True
                    ]

                    component src_constant LFP_threshold_pu {
                        execution_rate = "execution_rate"
                        value = "LFP_thresh"
                    }
                    [
                        position = 7304, 8224
                    ]

                    component gen_product PD1 {
                    }
                    [
                        position = 7504, 8432
                        rotation = left
                        hide_name = True
                    ]

                    component Subsystem UN {
                        layout = dynamic
                        component gen_logic_op LG3 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8080, 8352
                            hide_name = True
                        ]

                        component gen_comparator CMP4 {
                        }
                        [
                            position = 8264, 8352
                            hide_name = True
                        ]

                        component gen_product PD1 {
                        }
                        [
                            position = 7680, 8152
                            hide_name = True
                        ]

                        component gen_comparator CMP1 {
                        }
                        [
                            position = 7792, 8240
                            hide_name = True
                        ]

                        component gen_logic_op LG4 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8184, 8272
                            rotation = down
                            hide_name = True
                        ]

                        component "core/Counter" CNT1 {
                            execution_rate = "execution_rate"
                        }
                        [
                            position = 8176, 8344
                            hide_name = True
                            size = 48, 48
                        ]

                        component Subsystem gain {
                            layout = dynamic
                            component gen_gain GN1 {
                                gain = "1/Ts"
                            }
                            [
                                position = 8192, 8192
                                hide_name = True
                            ]

                            port In {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8192
                            ]

                            port Out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8288, 8192
                            ]

                            connect GN1.in In as Connection1
                            connect GN1.out Out as Connection2

                            mask {
                                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                                CODE open
                                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                    dialog = RegularComponentPropertiesDialog(
                                        component=component,
                                        property_container=component.masks[-1],
                                        current_diagram=current_diagram
                                    )
                                    dialog.exec_()

                                ENDCODE

                                CODE pre_compile
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    gain = mdl.get_item("GN1", parent=comp_handle, item_type="component")
                                    Ts = mdl.get_property_value(mdl.prop(gain, "execution_rate"))
                                ENDCODE
                            }
                        }
                        [
                            position = 8168, 8424
                            hide_name = True
                            size = 48, 48
                        ]

                        component Subsystem "block function" {
                            layout = dynamic
                            component gen_logic_op "Logical operator1" {
                            }
                            [
                                position = 8224, 8104
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator2" {
                                operator = "NOT"
                            }
                            [
                                position = 7968, 8008
                                hide_name = True
                            ]

                            port in {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8128
                            ]

                            port Block {
                                position = top:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7928, 7960
                                rotation = right
                            ]

                            port out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8104
                            ]

                            tag Goto1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = in
                            }
                            [
                                position = 8056, 8008
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8128, 8080
                                hide_name = True
                                size = 0, 0
                            ]

                            connect From1 "Logical operator1.in" as Connection26
                            connect "Logical operator1.out" out as Connection28
                            connect in "Logical operator1.in1" as Connection29
                            connect Block "Logical operator2.in" as Connection30
                            connect "Logical operator2.out" Goto1 as Connection31
                        }
                        [
                            position = 7904, 8240
                            size = 80, 64
                        ]

                        port trip_delayed {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8352, 8352
                        ]

                        port P {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7600, 8248
                        ]

                        port Time {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8080, 8424
                        ]

                        port Scale {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7600, 8128
                        ]

                        port Threshold {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7600, 8176
                        ]

                        port trip_inst {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8040, 8240
                        ]

                        port Block {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7600, 8320
                        ]

                        tag Goto1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7688, 8320
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7832, 8168
                            hide_name = True
                            size = 0, 0
                        ]

                        junction Junction13 sp
                        [
                            position = 8312, 8352
                        ]

                        junction Junction14 sp
                        [
                            position = 7984, 8240
                        ]

                        connect CMP4.out Junction13 as Connection65
                        connect CNT1.out CMP4.in1 as Connection26
                        connect Junction13 trip_delayed as Connection66
                        connect LG3.out CNT1.reset as Connection49
                        connect LG4.out CNT1.en as Connection64
                        connect LG4.in Junction13 as Connection67
                        connect P CMP1.in2 as Connection78
                        connect PD1.out CMP1.in1 as Connection79
                        connect PD1.in Scale as Connection58
                        connect PD1.in1 Threshold as Connection59
                        connect Goto1 Block as Connection87
                        connect gain.In Time as Connection91
                        connect gain.Out CMP4.in2 as Connection92
                        connect "block function.in" CMP1.out as Connection94
                        connect trip_inst Junction14 as Connection95
                        connect Junction14 LG3.in as Connection96
                        [
                            position = 0, 0
                            breakpoints = 7984, 8240
                        ]
                        connect "block function.out" Junction14 as Connection97
                        connect "block function.Block" From1 as Connection98
                    }
                    [
                        position = 7640, 8272
                        size = 112, 248
                    ]

                    component "core/Meter Split" "Meter Split" {
                        power_p = "True"
                        van = "False"
                        vbn = "False"
                        vcn = "False"
                    }
                    [
                        position = 7376, 8544
                        size = 96, 80
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7512, 8320
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7720, 8624
                        rotation = left
                    ]

                    component gen_digital_probe TRIP-DLY {
                    }
                    [
                        position = 7544, 8600
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 7992
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7624, 8664
                        size = 112, 72
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7272, 8544
                    ]

                    port trip_delayed {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8168
                    ]

                    port trip_inst {
                        position = 72.0, 0.01
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7968, 8376
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7968, 8664
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7256, 8680
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7784, 8128
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT2 {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7800, 8376
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_inst {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7880, 8376
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7480, 8648
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7776, 8664
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7352, 8680
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7456, 8680
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7880, 8664
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction25 sp
                    [
                        position = 7736, 8168
                    ]

                    junction Junction27 sp
                    [
                        position = 7384, 8224
                    ]

                    junction Junction28 sp
                    [
                        position = 7736, 8376
                    ]

                    junction Junction14 sp
                    [
                        position = 7544, 8648
                    ]

                    junction Junction29 sp
                    [
                        position = 7720, 8664
                    ]

                    connect ABS1.out UN.Threshold as Connection182
                    connect Junction25 GT1 as Connection192
                    connect Junction27 ABS1.in as Connection189
                    connect LFP_delay_s.out UN.Time as Connection191
                    connect LFP_threshold_pu.out Junction27 as Connection190
                    connect Meas_in "Meter Split.Input" as Connection194
                    connect "Meter Split.POWER_P" PD1.in1 as Connection193
                    connect PD1.in SIGN1.out as Connection161
                    connect PD1.out UN.P as Connection183
                    connect Pn.out UN.Scale as Connection180
                    connect SIGN1.in Junction27 as Connection188
                    connect UN.trip_delayed Junction25 as Connection176
                    connect trip_delayed Junction25 as Connection174
                    connect Block.out UN.Block as Conn_block
                    connect UN.trip_inst Junction28 as Connection196
                    connect Junction28 TRIP-INST.in as Connection197
                    [
                        position = 0, 0
                        breakpoints = 7736, 8376
                    ]
                    connect GT2 Junction28 as Connection198
                    connect from_trip_inst trip_inst as conn_tripInst
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP-DLY.in Junction14 as Connection135
                    connect GT3 Junction29 as Connection199
                    connect Junction29 "Trip Memory.Mem" as Connection200
                    connect TRIP-MEM.in Junction29 as Connection201
                    connect from_rst "Trip Memory.mem_rst" as Connection203
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 32L low forward power relay function for three-phase system.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The positive value of \"LFP_thresh\" will result in the tripped output occurring when \"P </p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        Pn {
                            label = "Nominal power"
                            widget = edit
                            type = generic
                            default_value = "1e6"
                            unit = "W"
                        }

                        LFP_thresh {
                            label = "Low forward power threshold"
                            widget = edit
                            type = generic
                            default_value = "0.1"
                            unit = "p.u."
                        }

                        LFP_delay {
                            label = "Low forward power trip delay"
                            widget = edit
                            type = generic
                            default_value = "0.1667"
                            unit = "s"
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "UN")
                            ENDCODE
                        }

                        inst_trip {
                            label = "Enable instantaneous trip output"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_inst_trip(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        trip_mem {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_inst_trip(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if not trip:
                                        trip = mdl.create_port(parent=comp_handle, name="trip_inst", direction="out",
                                                                kind="sp", terminal_position=(72, 0.01),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, trip, "conn_tripInst")
                                else:
                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if trip:
                                        pos = mdl.get_position(trip)
                                        mdl.delete_item(trip)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_inst", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripInst")


                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE
                    }
                }
                [
                    position = 8232, 7944
                    size = 144, 160
                ]

                component Subsystem "(81U) Under Frequency" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_qww_kgl_n2b"
                    component gen_digital_probe TRIP-INST {
                    }
                    [
                        position = 7728, 8400
                        rotation = left
                        scale = -1, -1
                    ]

                    component src_constant fn {
                        execution_rate = "execution_rate"
                        value = "fn"
                    }
                    [
                        position = 7424, 8184
                    ]

                    component src_constant UF_delay_s {
                        execution_rate = "execution_rate"
                        value = "UF_delay"
                    }
                    [
                        position = 7424, 8264
                    ]

                    component src_constant UF_threshold_pu {
                        execution_rate = "execution_rate"
                        value = "UF_thresh"
                    }
                    [
                        position = 7512, 8224
                    ]

                    component Subsystem UN {
                        layout = dynamic
                        component gen_comparator CMP4 {
                        }
                        [
                            position = 8352, 8352
                        ]

                        component gen_logic_op LG4 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8272, 8272
                            rotation = down
                            hide_name = True
                        ]

                        component gen_comparator CMP1 {
                        }
                        [
                            position = 7896, 8240
                        ]

                        component gen_logic_op LG3 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8168, 8352
                            hide_name = True
                        ]

                        component gen_product PD1 {
                        }
                        [
                            position = 7792, 8152
                        ]

                        component "core/Counter" CNT1 {
                            execution_rate = "execution_rate"
                        }
                        [
                            position = 8264, 8344
                            size = 48, 48
                        ]

                        component Subsystem "block function" {
                            layout = dynamic
                            component gen_logic_op "Logical operator1" {
                            }
                            [
                                position = 8224, 8104
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator2" {
                                operator = "NOT"
                            }
                            [
                                position = 7968, 8008
                                hide_name = True
                            ]

                            port in {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8128
                            ]

                            port Block {
                                position = top:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7928, 7960
                                rotation = right
                            ]

                            port out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8104
                            ]

                            tag Goto1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = in
                            }
                            [
                                position = 8056, 8008
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8128, 8080
                                hide_name = True
                                size = 0, 0
                            ]

                            connect From1 "Logical operator1.in" as Connection26
                            connect "Logical operator1.out" out as Connection28
                            connect in "Logical operator1.in1" as Connection29
                            connect Block "Logical operator2.in" as Connection30
                            connect "Logical operator2.out" Goto1 as Connection31
                        }
                        [
                            position = 7992, 8240
                            size = 80, 64
                        ]

                        component Subsystem gain {
                            layout = dynamic
                            component gen_gain GN1 {
                                gain = "1/Ts"
                            }
                            [
                                position = 8192, 8192
                                hide_name = True
                            ]

                            port In {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8192
                            ]

                            port Out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8288, 8192
                            ]

                            connect GN1.in In as Connection1
                            connect GN1.out Out as Connection2

                            mask {
                                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                                CODE open
                                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                    dialog = RegularComponentPropertiesDialog(
                                        component=component,
                                        property_container=component.masks[-1],
                                        current_diagram=current_diagram
                                    )
                                    dialog.exec_()

                                ENDCODE

                                CODE pre_compile
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    gain = mdl.get_item("GN1", parent=comp_handle, item_type="component")
                                    Ts = mdl.get_property_value(mdl.prop(gain, "execution_rate"))
                                ENDCODE
                            }
                        }
                        [
                            position = 8256, 8424
                            hide_name = True
                            size = 48, 48
                        ]

                        port f {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7712, 8248
                        ]

                        port Scale {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7712, 8128
                        ]

                        port Time {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8168, 8424
                        ]

                        port Threshold {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7712, 8176
                        ]

                        port trip_delayed {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8440, 8352
                        ]

                        port trip_inst {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8128, 8240
                        ]

                        port Block {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7712, 8320
                        ]

                        tag Goto1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7800, 8320
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7920, 8168
                            hide_name = True
                            size = 0, 0
                        ]

                        junction Junction13 sp
                        [
                            position = 8400, 8352
                        ]

                        junction Junction14 sp
                        [
                            position = 8072, 8240
                        ]

                        connect CMP4.out Junction13 as Connection65
                        connect CNT1.out CMP4.in1 as Connection26
                        connect Junction13 trip_delayed as Connection66
                        connect LG3.out CNT1.reset as Connection49
                        connect LG4.out CNT1.en as Connection64
                        connect LG4.in Junction13 as Connection67
                        connect PD1.out CMP1.in1 as Connection79
                        connect PD1.in Scale as Connection58
                        connect PD1.in1 Threshold as Connection59
                        connect f CMP1.in2 as Connection78
                        connect Goto1 Block as Connection87
                        connect "block function.Block" From1 as Connection98
                        connect LG3.in Junction14 as Connection99
                        connect Junction14 trip_inst as Connection100
                        [
                            position = 0, 0
                            breakpoints = 8072, 8240
                        ]
                        connect "block function.out" Junction14 as Connection101
                        connect "block function.in" CMP1.out as Connection102
                        connect gain.Out CMP4.in2 as Connection103
                        connect gain.In Time as Connection104
                    }
                    [
                        position = 7648, 8264
                        size = 112, 200
                    ]

                    component "core/Meter Split" "Meter Split" {
                        freq = "True"
                        van = "False"
                        vbn = "False"
                        vcn = "False"
                    }
                    [
                        position = 7464, 8416
                        size = 96, 80
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7512, 8304
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7664, 8552
                        rotation = left
                    ]

                    component gen_digital_probe TRIP-DLY {
                    }
                    [
                        position = 7488, 8528
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8000
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7568, 8592
                        size = 112, 72
                    ]

                    port trip_delayed {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7784, 8184
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7352, 8416
                    ]

                    port trip_inst {
                        position = 72.0, 0.01
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7776, 8448
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7880, 8592
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7216, 8608
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7792, 8152
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT2 {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7784, 8344
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_inst {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7688, 8448
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7424, 8576
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7720, 8592
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7296, 8608
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7408, 8608
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7792, 8592
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction15 sp
                    [
                        position = 7736, 8184
                    ]

                    junction Junction16 sp
                    [
                        position = 7728, 8344
                    ]

                    junction Junction14 sp
                    [
                        position = 7488, 8576
                    ]

                    junction Junction25 sp
                    [
                        position = 7664, 8592
                    ]

                    connect GT1 Junction15 as Connection182
                    connect Junction15 trip_delayed as Connection183
                    connect "Meter Split.Input" Meas_in as Connection188
                    connect "Meter Split.Freq" UN.f as Connection189
                    connect UF_delay_s.out UN.Time as Connection181
                    connect UF_threshold_pu.out UN.Threshold as Connection180
                    connect UN.trip_delayed Junction15 as Connection184
                    connect fn.out UN.Scale as Connection178
                    connect Block.out UN.Block as Conn_block
                    connect UN.trip_inst Junction16 as Connection192
                    connect Junction16 TRIP-INST.in as Connection193
                    [
                        position = 0, 0
                        breakpoints = 7728, 8344
                    ]
                    connect GT2 Junction16 as Connection194
                    connect from_trip_inst trip_inst as conn_tripInst
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP-DLY.in Junction14 as Connection135
                    connect GT3 Junction25 as Connection195
                    connect Junction25 "Trip Memory.Mem" as Connection196
                    connect TRIP-MEM.in Junction25 as Connection190
                    connect from_rst "Trip Memory.mem_rst" as Connection199
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 81U under frequency relay function for three-phase system.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        fn {
                            label = "Nominal frequency"
                            widget = edit
                            type = generic
                            default_value = "60"
                            unit = "Hz"
                        }

                        UF_thresh {
                            label = "Under frequency threshold"
                            widget = edit
                            type = generic
                            default_value = "0.9"
                            unit = "p.u."
                        }

                        UF_delay {
                            label = "Under frequency delay"
                            widget = edit
                            type = generic
                            default_value = "0.1667"
                            unit = "s"
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "UN")
                            ENDCODE
                        }

                        inst_trip {
                            label = "Enable instantaneous trip output"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_inst_trip(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        trip_mem {
                            label = "Enable trip mempry"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_inst_trip(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if not trip:
                                        trip = mdl.create_port(parent=comp_handle, name="trip_inst", direction="out",
                                                                kind="sp", terminal_position=(72, 0.01),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, trip, "conn_tripInst")
                                else:
                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if trip:
                                        pos = mdl.get_position(trip)
                                        mdl.delete_item(trip)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_inst", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripInst")


                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE
                    }
                }
                [
                    position = 8232, 8168
                    size = 144, 160
                ]

                component Subsystem "(32) Directional Power" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_pkj_glk_n2b"
                    component gen_digital_probe TRIP-INST {
                    }
                    [
                        position = 7728, 8440
                        rotation = left
                        scale = -1, -1
                    ]

                    component src_constant Pn {
                        execution_rate = "execution_rate"
                        value = "Pn"
                    }
                    [
                        position = 7520, 8160
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7768, 8632
                        rotation = left
                    ]

                    component gen_digital_probe TRIP-DLY {
                    }
                    [
                        position = 7592, 8608
                        rotation = left
                    ]

                    component gen_abs ABS1 {
                    }
                    [
                        position = 7432, 8216
                        hide_name = True
                    ]

                    component gen_product PD1 {
                    }
                    [
                        position = 7512, 8432
                        rotation = left
                        hide_name = True
                    ]

                    component src_constant DP_threshold_pu {
                        execution_rate = "execution_rate"
                        value = "DP_thresh"
                    }
                    [
                        position = 7320, 8216
                    ]

                    component gen_sign SIGN1 {
                    }
                    [
                        position = 7464, 8480
                        hide_name = True
                    ]

                    component src_constant DP_delay_s {
                        execution_rate = "execution_rate"
                        value = "DP_delay"
                    }
                    [
                        position = 7464, 8272
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 7984
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7672, 8672
                        size = 112, 72
                    ]

                    component Subsystem OV {
                        layout = dynamic
                        component gen_comparator CMP1 {
                        }
                        [
                            position = 7816, 8240
                            hide_name = True
                        ]

                        component gen_logic_op LG3 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8088, 8328
                            hide_name = True
                        ]

                        component gen_comparator CMP4 {
                        }
                        [
                            position = 8296, 8384
                        ]

                        component gen_logic_op LG4 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8224, 8256
                            rotation = down
                            hide_name = True
                        ]

                        component gen_product PD1 {
                        }
                        [
                            position = 7712, 8328
                            hide_name = True
                        ]

                        component "core/Counter" CNT1 {
                            execution_rate = "execution_rate"
                        }
                        [
                            position = 8184, 8320
                            size = 48, 48
                        ]

                        component Subsystem "block function" {
                            layout = dynamic
                            component gen_logic_op "Logical operator1" {
                            }
                            [
                                position = 8224, 8104
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator2" {
                                operator = "NOT"
                            }
                            [
                                position = 7968, 8008
                                hide_name = True
                            ]

                            port in {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8128
                            ]

                            port Block {
                                position = top:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7928, 7960
                                rotation = right
                            ]

                            port out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8104
                            ]

                            tag Goto1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = in
                            }
                            [
                                position = 8056, 8008
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8128, 8080
                                hide_name = True
                                size = 0, 0
                            ]

                            connect From1 "Logical operator1.in" as Connection26
                            connect "Logical operator1.out" out as Connection28
                            connect in "Logical operator1.in1" as Connection29
                            connect Block "Logical operator2.in" as Connection30
                            connect "Logical operator2.out" Goto1 as Connection31
                        }
                        [
                            position = 7920, 8240
                            size = 80, 64
                        ]

                        component Subsystem gain {
                            layout = dynamic
                            component gen_gain GN1 {
                                gain = "1/Ts"
                            }
                            [
                                position = 8192, 8192
                                hide_name = True
                            ]

                            port In {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8192
                            ]

                            port Out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8288, 8192
                            ]

                            connect GN1.in In as Connection1
                            connect GN1.out Out as Connection2

                            mask {
                                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                                CODE open
                                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                    dialog = RegularComponentPropertiesDialog(
                                        component=component,
                                        property_container=component.masks[-1],
                                        current_diagram=current_diagram
                                    )
                                    dialog.exec_()

                                ENDCODE

                                CODE pre_compile
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    gain = mdl.get_item("GN1", parent=comp_handle, item_type="component")
                                    Ts = mdl.get_property_value(mdl.prop(gain, "execution_rate"))
                                ENDCODE
                            }
                        }
                        [
                            position = 8208, 8392
                            size = 48, 48
                        ]

                        port trip_delayed {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8384, 8384
                        ]

                        port P {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7632, 8232
                        ]

                        port Time {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8128, 8392
                        ]

                        port trip_inst {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8080, 8240
                        ]

                        port Threshold {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7632, 8352
                        ]

                        port Scale {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7632, 8304
                        ]

                        port Block {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7632, 8416
                        ]

                        tag Goto1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7720, 8416
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7856, 8168
                            hide_name = True
                            size = 0, 0
                        ]

                        junction Junction13 sp
                        [
                            position = 8344, 8384
                        ]

                        junction Junction14 sp
                        [
                            position = 8000, 8240
                        ]

                        connect CMP4.out Junction13 as Connection65
                        connect CNT1.out CMP4.in1 as Connection26
                        connect Junction13 trip_delayed as Connection66
                        connect LG3.out CNT1.reset as Connection49
                        connect LG4.out CNT1.en as Connection64
                        connect LG4.in Junction13 as Connection67
                        connect P CMP1.in1 as Connection78
                        connect PD1.out CMP1.in2 as Connection79
                        connect PD1.in Scale as Connection58
                        connect PD1.in1 Threshold as Connection59
                        connect Goto1 Block as Connection87
                        connect "block function.in" CMP1.out as Connection91
                        connect LG3.in Junction14 as Connection92
                        connect Junction14 trip_inst as Connection93
                        [
                            position = 0, 0
                            breakpoints = 8000, 8240
                        ]
                        connect "block function.out" Junction14 as Connection94
                        connect From1 "block function.Block" as Connection95
                        connect gain.In Time as Connection96
                        connect gain.Out CMP4.in2 as Connection97
                    }
                    [
                        position = 7640, 8272
                        size = 112, 264
                    ]

                    component "core/Meter Split" "Meter Split" {
                        power_p = "True"
                        van = "False"
                        vbn = "False"
                        vcn = "False"
                    }
                    [
                        position = 7384, 8536
                        size = 96, 80
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7520, 8328
                    ]

                    port trip_delayed {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7784, 8160
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7288, 8536
                    ]

                    port trip_inst {
                        position = 72.0, 0.01
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7976, 8384
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7984, 8672
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7280, 8688
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7528, 8656
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7776, 8120
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT2 {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7792, 8384
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_inst {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7880, 8384
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7824, 8672
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7376, 8688
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7480, 8688
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7904, 8672
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction14 sp
                    [
                        position = 7592, 8656
                    ]

                    junction Junction22 sp
                    [
                        position = 7720, 8160
                    ]

                    junction Junction23 sp
                    [
                        position = 7384, 8216
                    ]

                    junction Junction24 sp
                    [
                        position = 7728, 8384
                    ]

                    junction Junction25 sp
                    [
                        position = 7768, 8672
                    ]

                    connect ABS1.in Junction23 as Connection176
                    connect ABS1.out OV.Threshold as Connection163
                    connect DP_delay_s.out OV.Time as Connection179
                    connect DP_threshold_pu.out Junction23 as Connection178
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect Junction22 GT1 as Connection180
                    connect Junction22 trip_delayed as Connection149
                    connect Junction23 SIGN1.in as Connection177
                    connect "Meter Split.Input" Meas_in as Connection182
                    connect "Meter Split.POWER_P" PD1.in1 as Connection181
                    connect OV.trip_delayed Junction22 as Connection150
                    connect PD1.out OV.P as Connection160
                    connect PD1.in SIGN1.out as Connection161
                    connect Pn.out OV.Scale as Connection141
                    connect TRIP-DLY.in Junction14 as Connection135
                    connect Block.out OV.Block as Conn_block
                    connect TRIP-INST.in Junction24 as Connection184
                    connect Junction24 OV.trip_inst as Connection185
                    [
                        position = 0, 0
                        breakpoints = 7728, 8384
                    ]
                    connect GT2 Junction24 as Connection186
                    connect from_trip_inst trip_inst as conn_tripInst
                    connect GT3 Junction25 as Connection188
                    connect Junction25 "Trip Memory.Mem" as Connection189
                    connect TRIP-MEM.in Junction25 as Connection190
                    connect from_rst "Trip Memory.mem_rst" as Connection193
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 32 directional power relay function for three-phase system.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A positive value of \"DP_thresh\" will result in the tripped output occurring when\" P > DP_thresh\" for \"DP_delay\" seconds, while \"DP_thresh </p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        Pn {
                            label = "Nominal power"
                            widget = edit
                            type = generic
                            default_value = "1e6"
                            unit = "W"
                        }

                        DP_thresh {
                            label = "Directional power threshold"
                            widget = edit
                            type = generic
                            default_value = "-0.01"
                            unit = "p.u."
                        }

                        DP_delay {
                            label = "Directional power trip delay"
                            widget = edit
                            type = generic
                            default_value = "0.16667"
                            unit = "s"
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:1"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "OV")
                            ENDCODE
                        }

                        inst_trip {
                            label = "Enable instantaneous trip output"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_inst_trip(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        trip_mem {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_inst_trip(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if not trip:
                                        trip = mdl.create_port(parent=comp_handle, name="trip_inst", direction="out",
                                                                kind="sp", terminal_position=(72, 0.01),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, trip, "conn_tripInst")
                                else:
                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if trip:
                                        pos = mdl.get_position(trip)
                                        mdl.delete_item(trip)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_inst", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripInst")


                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE
                    }
                }
                [
                    position = 8008, 7944
                    size = 144, 160
                ]

                component Subsystem "(81O) Over Frequency" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_dhm_dcl_n2b"
                    component src_constant fn {
                        execution_rate = "execution_rate"
                        value = "fn"
                    }
                    [
                        position = 7400, 8176
                    ]

                    component src_constant OF_threshold_pu {
                        execution_rate = "execution_rate"
                        value = "OF_thresh"
                    }
                    [
                        position = 7496, 8216
                    ]

                    component gen_digital_probe TRIP-INST {
                    }
                    [
                        position = 7736, 8400
                        rotation = left
                        scale = -1, -1
                    ]

                    component src_constant OF_delay_s {
                        execution_rate = "execution_rate"
                        value = "OF_delay"
                    }
                    [
                        position = 7400, 8256
                    ]

                    component Subsystem OV {
                        layout = dynamic
                        component gen_product PD1 {
                        }
                        [
                            position = 7752, 8128
                        ]

                        component gen_logic_op LG3 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8160, 8328
                            hide_name = True
                        ]

                        component gen_comparator CMP1 {
                        }
                        [
                            position = 7856, 8240
                            hide_name = True
                            scale = 1, -1
                        ]

                        component gen_comparator CMP4 {
                        }
                        [
                            position = 8368, 8384
                            hide_name = True
                        ]

                        component gen_logic_op LG4 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8296, 8256
                            rotation = down
                            hide_name = True
                        ]

                        component "core/Counter" CNT1 {
                            execution_rate = "execution_rate"
                        }
                        [
                            position = 8256, 8320
                            hide_name = True
                            size = 48, 48
                        ]

                        component Subsystem "block function" {
                            layout = dynamic
                            component gen_logic_op "Logical operator1" {
                            }
                            [
                                position = 8224, 8104
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator2" {
                                operator = "NOT"
                            }
                            [
                                position = 7968, 8008
                                hide_name = True
                            ]

                            port in {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8128
                            ]

                            port Block {
                                position = top:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7928, 7960
                                rotation = right
                            ]

                            port out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8104
                            ]

                            tag Goto1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = in
                            }
                            [
                                position = 8056, 8008
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8128, 8080
                                hide_name = True
                                size = 0, 0
                            ]

                            connect From1 "Logical operator1.in" as Connection26
                            connect "Logical operator1.out" out as Connection28
                            connect in "Logical operator1.in1" as Connection29
                            connect Block "Logical operator2.in" as Connection30
                            connect "Logical operator2.out" Goto1 as Connection31
                        }
                        [
                            position = 7976, 8240
                            size = 80, 64
                        ]

                        component Subsystem gain {
                            layout = dynamic
                            component gen_gain GN1 {
                                gain = "1/Ts"
                            }
                            [
                                position = 8192, 8192
                                hide_name = True
                            ]

                            port In {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8192
                            ]

                            port Out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8288, 8192
                            ]

                            connect GN1.in In as Connection1
                            connect GN1.out Out as Connection2

                            mask {
                                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                                CODE open
                                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                    dialog = RegularComponentPropertiesDialog(
                                        component=component,
                                        property_container=component.masks[-1],
                                        current_diagram=current_diagram
                                    )
                                    dialog.exec_()

                                ENDCODE

                                CODE pre_compile
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    gain = mdl.get_item("GN1", parent=comp_handle, item_type="component")
                                    Ts = mdl.get_property_value(mdl.prop(gain, "execution_rate"))
                                ENDCODE
                            }
                        }
                        [
                            position = 8280, 8392
                            hide_name = True
                            size = 48, 48
                        ]

                        port Threshold {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7672, 8144
                        ]

                        port Time {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8200, 8392
                        ]

                        port trip_inst {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8152, 8240
                        ]

                        port trip_delayed {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8456, 8384
                        ]

                        port Scale {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7672, 8096
                        ]

                        port f {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7672, 8248
                        ]

                        port Block {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7672, 8320
                        ]

                        tag Goto1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7760, 8320
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7904, 8168
                            hide_name = True
                            size = 0, 0
                        ]

                        junction Junction13 sp
                        [
                            position = 8416, 8384
                        ]

                        junction Junction14 sp
                        [
                            position = 8072, 8240
                        ]

                        connect CMP4.out Junction13 as Connection65
                        connect CNT1.out CMP4.in1 as Connection26
                        connect Junction13 trip_delayed as Connection66
                        connect LG3.out CNT1.reset as Connection49
                        connect LG4.out CNT1.en as Connection64
                        connect LG4.in Junction13 as Connection67
                        connect PD1.out CMP1.in2 as Connection79
                        connect PD1.in Scale as Connection58
                        connect PD1.in1 Threshold as Connection59
                        connect f CMP1.in1 as Connection78
                        connect Goto1 Block as Connection87
                        connect "block function.Block" From1 as Connection98
                        connect "block function.in" CMP1.out as Connection99
                        connect trip_inst Junction14 as Connection100
                        connect Junction14 LG3.in as Connection101
                        [
                            position = 0, 0
                            breakpoints = 8072, 8240
                        ]
                        connect "block function.out" Junction14 as Connection102
                        connect gain.In Time as Connection103
                        connect gain.Out CMP4.in2 as Connection104
                    }
                    [
                        position = 7632, 8256
                        size = 112, 208
                    ]

                    component "core/Meter Split" "Meter Split" {
                        freq = "True"
                        van = "False"
                        vbn = "False"
                        vcn = "False"
                    }
                    [
                        position = 7464, 8384
                        size = 96, 80
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7496, 8296
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7672, 8584
                        rotation = left
                    ]

                    component gen_digital_probe TRIP-DLY {
                    }
                    [
                        position = 7496, 8560
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8000
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7576, 8624
                        size = 112, 72
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7352, 8384
                    ]

                    port trip_delayed {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7784, 8176
                    ]

                    port trip_inst {
                        position = 72.0, 0.01
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7784, 8448
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7888, 8624
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7224, 8640
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7784, 8144
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT2 {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7800, 8336
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_inst {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7696, 8448
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7432, 8608
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7728, 8624
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7304, 8640
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7408, 8640
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7800, 8624
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction16 sp
                    [
                        position = 7736, 8176
                    ]

                    junction Junction17 sp
                    [
                        position = 7736, 8336
                    ]

                    junction Junction14 sp
                    [
                        position = 7496, 8608
                    ]

                    junction Junction25 sp
                    [
                        position = 7672, 8624
                    ]

                    connect Junction16 GT1 as Connection171
                    connect Meas_in "Meter Split.Input" as Connection174
                    connect "Meter Split.Freq" OV.f as Connection173
                    connect OF_delay_s.out OV.Time as Connection166
                    connect OF_threshold_pu.out OV.Threshold as Connection164
                    connect OV.trip_delayed Junction16 as Connection172
                    connect fn.out OV.Scale as Connection163
                    connect trip_delayed Junction16 as Connection170
                    connect Block.out OV.Block as Conn_block
                    connect OV.trip_inst Junction17 as Connection176
                    connect Junction17 TRIP-INST.in as Connection177
                    [
                        position = 0, 0
                        breakpoints = 7736, 8336
                    ]
                    connect GT2 Junction17 as Connection178
                    connect from_trip_inst trip_inst as conn_tripInst
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP-DLY.in Junction14 as Connection135
                    connect GT3 Junction25 as Connection188
                    connect Junction25 "Trip Memory.Mem" as Connection189
                    connect TRIP-MEM.in Junction25 as Connection190
                    connect from_rst "Trip Memory.mem_rst" as Connection193
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 81O over frequency relay function for three-phase system.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        fn {
                            label = "Nominal frequency"
                            widget = edit
                            type = generic
                            default_value = "60"
                            unit = "Hz"
                        }

                        OF_thresh {
                            label = "Over frequency threshold"
                            widget = edit
                            type = generic
                            default_value = "1.1"
                            unit = "p.u."
                        }

                        OF_delay {
                            label = "Over frequency trip delay"
                            widget = edit
                            type = generic
                            default_value = "0.1667"
                            unit = "s"
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "OV")
                            ENDCODE
                        }

                        inst_trip {
                            label = "Enable instantaneous trip output"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_inst_trip(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        trip_mem {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_inst_trip(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if not trip:
                                        trip = mdl.create_port(parent=comp_handle, name="trip_inst", direction="out",
                                                                kind="sp", terminal_position=(72, 0.01),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, trip, "conn_tripInst")
                                else:
                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if trip:
                                        pos = mdl.get_position(trip)
                                        mdl.delete_item(trip)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_inst", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripInst")


                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE
                    }
                }
                [
                    position = 8464, 8168
                    size = 144, 160
                ]

                component Subsystem "External Trip" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_qqn_jml_n2b"
                    component src_constant PU_delay_s {
                        execution_rate = "execution_rate"
                        value = "PU_delay"
                    }
                    [
                        position = 7496, 7848
                    ]

                    component gen_digital_probe TRIP-INST {
                    }
                    [
                        position = 7728, 7800
                        rotation = left
                    ]

                    component src_constant DO_delay_s {
                        execution_rate = "execution_rate"
                        value = "DO_delay"
                    }
                    [
                        position = 7424, 7896
                    ]

                    component Subsystem "PU-DO Delay" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 8448, 8384
                            rotation = right
                            hide_name = True
                        ]

                        component gen_logic_op LG6 {
                            inputs = "3"
                        }
                        [
                            position = 8344, 8136
                            hide_name = True
                        ]

                        component gen_comparator CMP5 {
                        }
                        [
                            position = 8136, 8232
                            hide_name = True
                        ]

                        component gen_comparator CMP4 {
                        }
                        [
                            position = 8136, 8120
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 8464, 8296
                            rotation = right
                            hide_name = True
                        ]

                        component gen_logic_op LG5 {
                            operator = "NOR"
                        }
                        [
                            position = 8400, 8048
                            rotation = left
                            hide_name = True
                        ]

                        component gen_logic_op LG8 {
                            operator = "NOT"
                        }
                        [
                            position = 8248, 8296
                            hide_name = True
                        ]

                        component gen_logic_op LG7 {
                            inputs = "3"
                        }
                        [
                            position = 8344, 8248
                            hide_name = True
                        ]

                        component "core/Edge Detection" ED1 {
                        }
                        [
                            position = 8024, 8008
                            hide_name = True
                            size = 32, 32
                        ]

                        component tm_delay "Unit Delay1" {
                        }
                        [
                            position = 7968, 8464
                            hide_name = True
                        ]

                        component "core/Counter" Counter1 {
                        }
                        [
                            position = 8104, 8056
                            rotation = right
                            hide_name = True
                            size = 48, 48
                        ]

                        component gen_logic_op LG9 {
                            operator = "NOT"
                        }
                        [
                            position = 8000, 8352
                            hide_name = True
                        ]

                        component Subsystem gain {
                            layout = dynamic
                            component gen_gain GN1 {
                                gain = "1/Ts"
                            }
                            [
                                position = 8192, 8192
                                hide_name = True
                            ]

                            port In {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8192
                            ]

                            port Out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8288, 8192
                            ]

                            connect GN1.in In as Connection1
                            connect GN1.out Out as Connection2

                            mask {
                                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                                CODE open
                                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                    dialog = RegularComponentPropertiesDialog(
                                        component=component,
                                        property_container=component.masks[-1],
                                        current_diagram=current_diagram
                                    )
                                    dialog.exec_()

                                ENDCODE

                                CODE pre_compile
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    gain = mdl.get_item("GN1", parent=comp_handle, item_type="component")
                                    Ts = mdl.get_property_value(mdl.prop(gain, "execution_rate"))
                                ENDCODE
                            }
                        }
                        [
                            position = 8000, 8128
                            hide_name = True
                            size = 48, 48
                        ]

                        component Subsystem gain1 {
                            layout = dynamic
                            component gen_gain GN1 {
                                gain = "1/Ts"
                            }
                            [
                                position = 8192, 8192
                                hide_name = True
                            ]

                            port In {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8192
                            ]

                            port Out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8288, 8192
                            ]

                            connect GN1.in In as Connection1
                            connect GN1.out Out as Connection2

                            mask {
                                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                                CODE open
                                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                    dialog = RegularComponentPropertiesDialog(
                                        component=component,
                                        property_container=component.masks[-1],
                                        current_diagram=current_diagram
                                    )
                                    dialog.exec_()

                                ENDCODE

                                CODE pre_compile
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    gain = mdl.get_item("GN1", parent=comp_handle, item_type="component")
                                    Ts = mdl.get_property_value(mdl.prop(gain, "execution_rate"))
                                ENDCODE
                            }
                        }
                        [
                            position = 8000, 8240
                            hide_name = True
                            size = 48, 48
                        ]

                        port "DO Time" {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7888, 8240
                        ]

                        port "PU Time" {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7888, 8128
                        ]

                        port trip_delayed {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8544, 8344
                        ]

                        port trip_pickup {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7888, 8464
                        ]

                        port Block {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7888, 8352
                        ]

                        port trip_inst {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8544, 7984
                        ]

                        tag GT1 {
                            value = "trip detected"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8080, 8464
                            hide_name = True
                            size = 81, 20
                        ]

                        tag FM2 {
                            value = "trip detected"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8144, 8296
                            hide_name = True
                            size = 93, 20
                        ]

                        tag FM1 {
                            value = "trip detected"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8224, 8136
                            hide_name = True
                            size = 95, 20
                        ]

                        tag Goto1 {
                            value = "Enable"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8088, 8352
                            hide_name = True
                            size = 0, 0
                        ]

                        tag FM3 {
                            value = "Enable"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8240, 8168
                            hide_name = True
                            size = 0, 0
                        ]

                        tag FM4 {
                            value = "Enable"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8240, 8248
                            hide_name = True
                            size = 0, 0
                        ]

                        tag GT2 {
                            value = "trip pickup"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 8000, 8496
                            hide_name = True
                            size = 81, 20
                        ]

                        tag FM5 {
                            value = "trip pickup"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 7928, 8008
                            hide_name = True
                            size = 95, 20
                        ]

                        tag FM6 {
                            value = "trip pickup"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8432, 7984
                            hide_name = True
                            size = 95, 20
                        ]

                        junction Junction2 sp
                        [
                            position = 8408, 8248
                        ]

                        junction Junction3 sp
                        [
                            position = 8392, 8136
                        ]

                        junction Junction6 sp
                        [
                            position = 8104, 8112
                        ]

                        junction Junction8 sp
                        [
                            position = 7920, 8464
                        ]

                        connect FM1 LG6.in1 as Connection84
                        connect FM2 LG8.in as Connection88
                        connect Junction2 SR1.r_in as Connection97
                        connect Junction3 LG6.out as Connection100
                        connect LG5.in1 Junction2 as Connection98
                        connect LG5.in Junction3 as Connection101
                        connect LG6.in CMP4.out as Connection85
                        connect LG7.in CMP5.out as Connection87
                        connect LG7.out Junction2 as Connection96
                        connect SR1.s_in Junction3 as Connection99
                        connect TRM1.in SR1.out_n as Connection102
                        connect trip_delayed SR1.out as Connection71
                        connect "Unit Delay1.out" GT1 as Connection115
                        connect CMP4.in1 Junction6 as Connection121
                        connect Junction6 CMP5.in1 as Connection122
                        [
                            position = 0, 0
                            breakpoints = 8104, 8112; 8104, 8112
                        ]
                        connect Counter1.out Junction6 as Connection123
                        connect Counter1.reset ED1.Out1 as Connection124
                        connect Counter1.en LG5.out as Connection125
                        connect Goto1 LG9.out as Connection126
                        connect FM3 LG6.in2 as Connection128
                        connect FM4 LG7.in1 as Connection132
                        connect LG8.out LG7.in2 as Connection133
                        connect Junction8 "Unit Delay1.in" as Connection135
                        connect GT2 Junction8 as Connection136
                        connect Junction8 trip_pickup as Connection137
                        [
                            position = 0, 0
                            breakpoints = 7920, 8464; 7920, 8464
                        ]
                        connect FM5 ED1.In1 as Connection138
                        connect FM6 trip_inst as Connection139
                        connect gain.In "PU Time" as Connection140
                        connect gain.Out CMP4.in2 as Connection141
                        connect gain1.In "DO Time" as Connection142
                        connect gain1.Out CMP5.in2 as Connection143
                        connect Block LG9.in as Connection144
                        [
                            position = 0, 0
                            breakpoints = 7928, 8352
                        ]

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Tests for minimum pickup (PU) time for the input signal to remain in a high state (1) before allowing output to transition to a high state(1).  Also tests for minimum dropout (DO) time for the input signal to remain in a low state (0) before allowing the output to transitin to a low state (0).</p></body></html>"

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()

                            ENDCODE
                        }
                    }
                    [
                        position = 7616, 7920
                        size = 136, 192
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7496, 7944
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7728, 8128
                        rotation = left
                    ]

                    component gen_digital_probe TRIP-DLY {
                    }
                    [
                        position = 7552, 8096
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8000
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7632, 8160
                        size = 112, 72
                    ]

                    port trip_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7440, 7992
                    ]

                    port trip_delayed {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7776, 8000
                    ]

                    port trip_inst {
                        position = 72.0, 0.01
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7776, 7712
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7944, 8160
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7272, 8176
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7784, 7968
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT2 {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7800, 7840
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_inst {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7656, 7712
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7488, 8144
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7784, 8160
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7368, 8176
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7472, 8176
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7864, 8160
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction21 sp
                    [
                        position = 7720, 8000
                    ]

                    junction Junction22 sp
                    [
                        position = 7728, 7840
                    ]

                    junction Junction14 sp
                    [
                        position = 7552, 8144
                    ]

                    junction Junction25 sp
                    [
                        position = 7728, 8160
                    ]

                    connect DO_delay_s.out "PU-DO Delay.DO Time" as Connection222
                    connect PU_delay_s.out "PU-DO Delay.PU Time" as Connection223
                    connect trip_in "PU-DO Delay.trip_pickup" as Connection224
                    connect trip_delayed Junction21 as Connection225
                    connect Junction21 GT1 as Connection226
                    [
                        position = 0, 0
                        breakpoints = 7720, 8000
                    ]
                    connect "PU-DO Delay.trip_delayed" Junction21 as Connection227
                    connect Block.out "PU-DO Delay.Block" as Conn_block
                    connect "PU-DO Delay.trip_inst" Junction22 as Connection229
                    connect Junction22 TRIP-INST.in as Connection230
                    [
                        position = 0, 0
                        breakpoints = 7728, 7840; 7728, 7840
                    ]
                    connect GT2 Junction22 as Connection231
                    connect from_trip_inst trip_inst as conn_tripInst
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP-DLY.in Junction14 as Connection135
                    connect GT3 Junction25 as Connection188
                    connect Junction25 "Trip Memory.Mem" as Connection189
                    connect TRIP-MEM.in Junction25 as Connection190
                    connect from_rst "Trip Memory.mem_rst" as Connection233
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">External signal based trip source pickup and dropout delay and memory.</p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        PU_delay {
                            label = "Pickup Delay"
                            widget = edit
                            type = generic
                            default_value = "0.1667"
                        }

                        DO_delay {
                            label = "Dropout Delay"
                            widget = edit
                            type = generic
                            default_value = "0.1667"
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "PU-DO Delay")
                            ENDCODE
                        }

                        inst_trip {
                            label = "Enable instantaneous trip output"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_inst_trip(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        trip_mem {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_inst_trip(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if not trip:
                                        trip = mdl.create_port(parent=comp_handle, name="trip_inst", direction="out",
                                                                kind="sp", terminal_position=(72, 0.01),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, trip, "conn_tripInst")
                                else:
                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if trip:
                                        pos = mdl.get_position(trip)
                                        mdl.delete_item(trip)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_inst", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripInst")


                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE
                    }
                }
                [
                    position = 8936, 8168
                    size = 144, 160
                ]

                component Subsystem "(81RF) Fast Rate-of-Change of Frequency" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_dvx_sdl_n2b"
                    component src_constant rate_at_zero_diff {
                        execution_rate = "execution_rate"
                        value = "rateSet"
                    }
                    [
                        position = 7176, 8136
                    ]

                    component src_constant diff_min {
                        execution_rate = "execution_rate"
                        value = "diffMin"
                    }
                    [
                        position = 7256, 7992
                    ]

                    component src_constant diff_at_zero_rate {
                        execution_rate = "execution_rate"
                        value = "diffSet"
                    }
                    [
                        position = 7176, 8040
                    ]

                    component gen_digital_probe TRIP-INST {
                    }
                    [
                        position = 7784, 7968
                        rotation = left
                    ]

                    component src_constant DO_delay_s {
                        execution_rate = "execution_rate"
                        value = "DO_delay"
                    }
                    [
                        position = 7544, 8064
                    ]

                    component src_constant PU_delay_s {
                        execution_rate = "execution_rate"
                        value = "PU_delay"
                    }
                    [
                        position = 7480, 8016
                    ]

                    component src_constant rate_min {
                        execution_rate = "execution_rate"
                        value = "rateMin"
                    }
                    [
                        position = 7256, 8088
                    ]

                    component "core/Meter Split" "Meter Split" {
                        freq = "True"
                        van = "False"
                        vbn = "False"
                        vcn = "False"
                    }
                    [
                        position = 7216, 8288
                        size = 96, 80
                    ]

                    component Subsystem "Fast Rate Detection" {
                        layout = dynamic
                        component gen_c_function "Fast Rate Detection" {
                            global_variables = "uint rateValid;real difAbs;real rate;real in_0;real dT;real dif;real rateAbs;real rateLim;"
                            in_terminal_dimensions = "inherit;inherit;inherit;inherit;inherit"
                            in_terminal_dimensions_str = "DMIN inherit;DSET inherit;RMIN inherit;RSET inherit;IN inherit"
                            in_terminal_labels = "[(\'DMIN\', True), (\'DSET\', True), (\'RMIN\', True), (\'RSET\', True), (\'IN\', True)]"
                            in_terminal_properties = "real DMIN;inherit DSET;inherit RMIN;inherit RSET;inherit IN;"
                            init_fnc = "/*Begin code section*/
rateValid = 0;
dT = -10 * DELTA_T; // Delay before first rate calc
/*End code section*/"
                            no_feed_inputs = "[\'\']"
                            no_feed_outputs = "[\'\']"
                            out_terminal_dimensions = "inherit"
                            out_terminal_dimensions_str = "DET inherit"
                            out_terminal_labels = "[(\'DET\', True)]"
                            out_terminal_properties = "uint DET;"
                            output_fnc = "/*Begin code section*/
// Reference:
// See SEL-751A Instruction Manual
// Section: Relay Fast Rate-of-Change-of-Frequency (81RF) Protection

// Track time since last rate calc
dT+= execution_rate;
if (dT < 0) // Delay before first rate calc
    in_0 = IN;
else if (dT > DELTA_T) // Rate Calc
{
    rate = (IN - in_0) / DELTA_T;
    rateAbs = fabs(rate);
    dT = 0; // start dT delay over
    rateValid = 1; // Flag Rate value is Valid
    in_0 = IN; // Save In for next rate calc
}

// Rate must be valid and greater than min to detect
if ((rateValid) && (rateAbs > RMIN))
{
    // Calculate present (IN - NOM) difference
    dif  = IN - IN_NOM;
    difAbs = fabs(dif);
    
    // Check if DMIN exceeded and  rate > threshold (dif)
    if (difAbs > DMIN)
    {
        // Calculate Abs rate limit
        rateLim =(-RSET / DSET) * difAbs + RSET; // |Rate Limit| for dif value
        
        // Compare against proper sign of limit
        if ((dif > 0) && (rate > rateLim))
            DET = 1;
        else if (rate <  -rateLim) // Dif < 0
            DET = 1;
        else
            DET = 0;
    }
    else // Not in detection region
        DET = 0;
}
else
    DET = 0;
/*End code section*/"
                            parameters = "real DELTA_T;real IN_NOM;"
                        }
                        [
                            position = 8248, 8144
                            size = 88, 248
                        ]

                        component gen_logic_op LG6 {
                        }
                        [
                            position = 8432, 8312
                            hide_name = True
                        ]

                        component gen_logic_op LG7 {
                            operator = "NOT"
                        }
                        [
                            position = 8248, 8320
                            hide_name = True
                        ]

                        port DiffSet {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8120, 8096
                        ]

                        port RateMin {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8120, 8144
                        ]

                        port DiffMin {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8120, 8048
                        ]

                        port f {
                            position = left:6
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8120, 8240
                        ]

                        port RateSet {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8120, 8192
                        ]

                        port Detect {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8528, 8312
                        ]

                        port Block {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8120, 8320
                        ]

                        connect "Fast Rate Detection.DMIN" DiffMin as Connection5
                        connect "Fast Rate Detection.DSET" DiffSet as Connection3
                        connect "Fast Rate Detection.RMIN" RateMin as Connection6
                        connect "Fast Rate Detection.RSET" RateSet as Connection4
                        connect "Fast Rate Detection.IN" f as Connection2
                        connect LG7.out LG6.in1 as Connection181
                        connect Block LG7.in as Connection182
                        connect Detect LG6.out as Connection183
                        connect LG6.in "Fast Rate Detection.DET" as Connection184

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">This component detects fast changes in the rate of the incoming signal (f_in) by using an algorithm based on typical ANSI 81FR device implementation (see \"Fast Rate-of-Change-of-Frequency (81RF) Protection\" in SEL 751A Instrunction Manual.  For a detection the incoming signal must meet the following criteria:</span></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">1) | f_in - Nominal Input Value| > DifMin</span></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">2) | Rate(t) | > RateMin : Rate(t) = (f_in(t + DELTA_T) - f_in(t)) /   DELTA_T</span></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">3) | Rate | > - RateSet / DifSet * | f_in - Nominal Input Value| +  RateSet</span></p></body></html>"

                            IN_NOM {
                                label = "Nominal Input Value"
                                widget = edit
                                type = generic
                                default_value = "fn"
                            }

                            DELTA_T {
                                label = "Rate Estimation Interval"
                                widget = edit
                                type = generic
                                default_value = "rate_interval"
                                unit = "s"
                            }

                            execution_rate {
                                label = "Execution Rate"
                                widget = edit
                                type = generic
                                default_value = "execution_rate"
                                unit = "s"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()

                            ENDCODE
                        }
                    }
                    [
                        position = 7376, 8112
                        size = 112, 288
                    ]

                    component Subsystem "PU-DO Delay" {
                        layout = dynamic
                        component gen_logic_op LG5 {
                            operator = "NOR"
                        }
                        [
                            position = 8296, 7992
                            rotation = left
                            hide_name = True
                        ]

                        component gen_comparator CMP4 {
                        }
                        [
                            position = 8096, 8088
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 8360, 8208
                            rotation = right
                            hide_name = True
                        ]

                        component gen_terminator TRM1 {
                        }
                        [
                            position = 8344, 8296
                            rotation = right
                            hide_name = True
                        ]

                        component gen_comparator CMP5 {
                        }
                        [
                            position = 8096, 8152
                            hide_name = True
                        ]

                        component gen_logic_op LG6 {
                        }
                        [
                            position = 8240, 8096
                            hide_name = True
                        ]

                        component gen_logic_op LG8 {
                            operator = "NOT"
                        }
                        [
                            position = 8160, 8216
                            hide_name = True
                        ]

                        component gen_logic_op LG7 {
                        }
                        [
                            position = 8240, 8160
                            hide_name = True
                        ]

                        component "core/Edge Detection" ED1 {
                        }
                        [
                            position = 7920, 8016
                            hide_name = True
                            size = 32, 32
                        ]

                        component "core/Counter" CNT1 {
                        }
                        [
                            position = 8008, 8008
                            hide_name = True
                            size = 48, 48
                        ]

                        component tm_delay "Unit Delay1" {
                        }
                        [
                            position = 7816, 7968
                            hide_name = True
                        ]

                        component Subsystem gain {
                            layout = dynamic
                            component gen_gain GN1 {
                                gain = "1/Ts"
                            }
                            [
                                position = 8192, 8192
                                hide_name = True
                            ]

                            port In {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8192
                            ]

                            port Out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8288, 8192
                            ]

                            connect GN1.in In as Connection1
                            connect GN1.out Out as Connection2

                            mask {
                                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                                CODE open
                                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                    dialog = RegularComponentPropertiesDialog(
                                        component=component,
                                        property_container=component.masks[-1],
                                        current_diagram=current_diagram
                                    )
                                    dialog.exec_()

                                ENDCODE

                                CODE pre_compile
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    gain = mdl.get_item("GN1", parent=comp_handle, item_type="component")
                                    Ts = mdl.get_property_value(mdl.prop(gain, "execution_rate"))
                                ENDCODE
                            }
                        }
                        [
                            position = 7888, 8096
                            hide_name = True
                            size = 48, 48
                        ]

                        component Subsystem gain1 {
                            layout = dynamic
                            component gen_gain GN1 {
                                gain = "1/Ts"
                            }
                            [
                                position = 8192, 8192
                                hide_name = True
                            ]

                            port In {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8192
                            ]

                            port Out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8288, 8192
                            ]

                            connect GN1.in In as Connection1
                            connect GN1.out Out as Connection2

                            mask {
                                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                                CODE open
                                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                    dialog = RegularComponentPropertiesDialog(
                                        component=component,
                                        property_container=component.masks[-1],
                                        current_diagram=current_diagram
                                    )
                                    dialog.exec_()

                                ENDCODE

                                CODE pre_compile
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    gain = mdl.get_item("GN1", parent=comp_handle, item_type="component")
                                    Ts = mdl.get_property_value(mdl.prop(gain, "execution_rate"))
                                ENDCODE
                            }
                        }
                        [
                            position = 7888, 8160
                            hide_name = True
                            size = 48, 48
                        ]

                        port "PU Time" {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7720, 8096
                        ]

                        port "DO Time" {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7720, 8160
                        ]

                        port trip_delayed {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8424, 8256
                        ]

                        port trip_pickup {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7720, 7968
                        ]

                        port trip_inst {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8416, 7912
                        ]

                        tag FM1 {
                            value = "DETECT"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8152, 8104
                            hide_name = True
                            size = 0, 0
                        ]

                        tag GT1 {
                            value = "DETECT"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7896, 7968
                            hide_name = True
                            size = 0, 0
                        ]

                        tag FM2 {
                            value = "DETECT"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8072, 8216
                            hide_name = True
                            size = 0, 0
                        ]

                        tag GT2 {
                            value = "trip pickup"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7824, 7920
                            hide_name = True
                            size = 0, 0
                        ]

                        tag FM3 {
                            value = "trip pickup"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8304, 7912
                            hide_name = True
                            size = 0, 0
                        ]

                        junction Junction1 sp
                        [
                            position = 8064, 8080
                        ]

                        junction Junction2 sp
                        [
                            position = 8304, 8160
                        ]

                        junction Junction3 sp
                        [
                            position = 8288, 8096
                        ]

                        junction Junction4 sp
                        [
                            position = 7768, 7968
                        ]

                        junction Junction5 sp
                        [
                            position = 7768, 7968
                        ]

                        connect CMP5.in1 Junction1 as Connection75
                        connect CNT1.out Junction1 as Connection73
                        connect ED1.Out1 CNT1.reset as Connection69
                        connect FM1 LG6.in1 as Connection84
                        connect FM2 LG8.in as Connection88
                        connect Junction1 CMP4.in1 as Connection74
                        connect Junction2 SR1.r_in as Connection97
                        connect Junction3 LG6.out as Connection100
                        connect LG5.out CNT1.en as Connection95
                        connect LG5.in1 Junction2 as Connection98
                        connect LG5.in Junction3 as Connection101
                        connect LG6.in CMP4.out as Connection85
                        connect LG7.in CMP5.out as Connection87
                        connect LG7.out Junction2 as Connection96
                        connect LG8.out LG7.in1 as Connection89
                        connect SR1.s_in Junction3 as Connection99
                        connect TRM1.in SR1.out_n as Connection102
                        connect trip_delayed SR1.out as Connection71
                        connect "Unit Delay1.out" GT1 as Connection104
                        connect trip_pickup Junction4 as Connection105
                        connect Junction4 "Unit Delay1.in" as Connection106
                        connect ED1.In1 Junction5 as Connection108
                        connect Junction5 Junction4 as Connection109
                        connect GT2 Junction5 as Connection110
                        connect FM3 trip_inst as Connection111
                        connect gain.In "PU Time" as Connection112
                        connect gain.Out CMP4.in2 as Connection113
                        connect gain1.Out CMP5.in2 as Connection114
                        connect gain1.In "DO Time" as Connection115

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\"\">Tests for minimum pickup (PU) time for the input signal to remain in a high state (1) before allowing output to transition to a high state(1).  Also tests for minimum dropout (DO) time for the input signal to remain in a low state (0) before allowing the output to transitin to a low state (0).</span></p></body></html>"

                            execution_rate {
                                label = "Execution Rate"
                                widget = edit
                                type = generic
                                default_value = "execution_rate"
                                unit = "s"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                            
                            ENDCODE
                        }
                    }
                    [
                        position = 7672, 8064
                        size = 136, 144
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7544, 8408
                        rotation = left
                    ]

                    component gen_digital_probe TRIP-DLY {
                    }
                    [
                        position = 7368, 8384
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8000
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7448, 8448
                        size = 112, 72
                    ]

                    port trip_delayed {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7832, 8112
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7112, 8288
                    ]

                    port block {
                        position = -72.0, 0.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7256, 8184
                    ]

                    port trip_inst {
                        position = 72.0, 0.01
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7832, 7888
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7792, 8448
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7088, 8464
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7848, 8080
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT2 {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7848, 8016
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_inst {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7736, 7888
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7304, 8432
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7600, 8448
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7192, 8464
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7296, 8464
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7688, 8448
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction15 sp
                    [
                        position = 7784, 8112
                    ]

                    junction Junction16 sp
                    [
                        position = 7784, 8016
                    ]

                    junction Junction14 sp
                    [
                        position = 7368, 8432
                    ]

                    junction Junction25 sp
                    [
                        position = 7544, 8448
                    ]

                    connect "Meter Split.Input" Meas_in as Connection209
                    connect diff_min.out "Fast Rate Detection.DiffMin" as Connection211
                    connect diff_at_zero_rate.out "Fast Rate Detection.DiffSet" as Connection212
                    connect rate_min.out "Fast Rate Detection.RateMin" as Connection213
                    connect rate_at_zero_diff.out "Fast Rate Detection.RateSet" as Connection214
                    connect "Meter Split.Freq" "Fast Rate Detection.f" as Connection216
                    connect DO_delay_s.out "PU-DO Delay.DO Time" as Connection223
                    connect PU_delay_s.out "PU-DO Delay.PU Time" as Connection224
                    connect "Fast Rate Detection.Detect" "PU-DO Delay.trip_pickup" as Connection225
                    connect GT1 Junction15 as Connection226
                    connect Junction15 trip_delayed as Connection227
                    connect "PU-DO Delay.trip_delayed" Junction15 as Connection228
                    connect block "Fast Rate Detection.Block" as Conn_block
                    connect "PU-DO Delay.trip_inst" Junction16 as Connection233
                    connect Junction16 TRIP-INST.in as Connection234
                    [
                        position = 0, 0
                        breakpoints = 7784, 8016
                    ]
                    connect GT2 Junction16 as Connection235
                    connect from_trip_inst trip_inst as conn_tripInst
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP-DLY.in Junction14 as Connection135
                    connect GT3 Junction25 as Connection188
                    connect Junction25 "Trip Memory.Mem" as Connection189
                    connect TRIP-MEM.in Junction25 as Connection190
                    connect from_rst "Trip Memory.mem_rst" as Connection236
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 81RF fast rate-of-change relay function. </p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        fn {
                            label = "Nominal frequency"
                            widget = edit
                            type = generic
                            default_value = "60"
                            unit = "Hz"
                        }

                        rate_interval {
                            label = "Frequency rate estimation interval"
                            widget = edit
                            type = generic
                            default_value = "0.05"
                            unit = "s"
                        }

                        diffMin {
                            label = "Minimum frequency difference"
                            widget = edit
                            type = generic
                            default_value = "0.1"
                            unit = "Hz"
                        }

                        diffSet {
                            label = "Frequency difference at rate = 0"
                            widget = edit
                            type = generic
                            default_value = "1.0"
                            unit = "Hz"
                        }

                        rateMin {
                            label = "Minimum frequency rate"
                            widget = edit
                            type = generic
                            default_value = "0.2"
                            unit = "Hz/s"
                        }

                        rateSet {
                            label = "Frequency rate at difference = 0"
                            widget = edit
                            type = generic
                            default_value = "2.5"
                            unit = "Hz/s"
                        }

                        PU_delay {
                            label = "Pickup Delay"
                            widget = edit
                            type = generic
                            default_value = "0.1667"
                            unit = "s"
                        }

                        DO_delay {
                            label = "Dropout Delay"
                            widget = edit
                            type = generic
                            default_value = "0.1667"
                            unit = "s"
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "Fast Rate Detection")
                            ENDCODE
                        }

                        inst_trip {
                            label = "Enable instantaneous trip output"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_inst_trip(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        trip_memory {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_inst_trip(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if not trip:
                                        trip = mdl.create_port(parent=comp_handle, name="trip_inst", direction="out",
                                                                kind="sp", terminal_position=(72, 0.01),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, trip, "conn_tripInst")
                                else:
                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if trip:
                                        pos = mdl.get_position(trip)
                                        mdl.delete_item(trip)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_inst", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripInst")


                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE
                    }
                }
                [
                    position = 8704, 8168
                    size = 144, 160
                ]

                component Subsystem "(27) Undervoltage" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_ibm_tz2_n2b"
                    component src_constant UV_delay_s {
                        execution_rate = "execution_rate"
                        value = "UV_delay"
                    }
                    [
                        position = 7480, 8200
                    ]

                    component src_constant VLn {
                        execution_rate = "execution_rate"
                        value = "Vn/3.0**0.5"
                    }
                    [
                        position = 7480, 8104
                    ]

                    component src_constant UV_threshold_pu {
                        execution_rate = "execution_rate"
                        value = "UV_thresh"
                    }
                    [
                        position = 7552, 8152
                    ]

                    component gen_digital_probe TRIP-INST {
                    }
                    [
                        position = 7768, 8448
                        rotation = left
                        scale = -1, -1
                    ]

                    component Subsystem UN {
                        layout = dynamic
                        component gen_logic_op LG3 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8472, 8280
                            hide_name = True
                        ]

                        component gen_comparator CMP1 {
                        }
                        [
                            position = 8032, 7992
                            hide_name = True
                        ]

                        component gen_logic_op LG1 {
                            inputs = "3"
                            operator = "OR"
                        }
                        [
                            position = 8320, 8200
                            hide_name = True
                        ]

                        component gen_comparator CMP2 {
                        }
                        [
                            position = 8032, 8048
                            hide_name = True
                        ]

                        component gen_logic_op LG4 {
                            inputs = "3"
                            operator = "NOT"
                        }
                        [
                            position = 8568, 8208
                            rotation = down
                            hide_name = True
                        ]

                        component gen_comparator CMP3 {
                        }
                        [
                            position = 8032, 8104
                            hide_name = True
                        ]

                        component gen_comparator CMP4 {
                        }
                        [
                            position = 8656, 8280
                            hide_name = True
                        ]

                        component gen_product PD1 {
                        }
                        [
                            position = 7928, 7856
                            hide_name = True
                        ]

                        component "core/Counter" CNT1 {
                            execution_rate = "execution_rate"
                        }
                        [
                            position = 8568, 8272
                            hide_name = True
                            size = 48, 48
                        ]

                        component Subsystem "block function" {
                            layout = dynamic
                            component gen_logic_op "Logical operator1" {
                            }
                            [
                                position = 8216, 8104
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator2" {
                                operator = "NOT"
                            }
                            [
                                position = 7968, 7992
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator3" {
                            }
                            [
                                position = 8216, 8256
                                hide_name = True
                            ]

                            component gen_logic_op "Logical operator4" {
                            }
                            [
                                position = 8216, 8400
                                hide_name = True
                            ]

                            port in_B {
                                position = left:4
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8280
                            ]

                            port out_B {
                                position = right:2
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8256
                            ]

                            port in_A {
                                position = left:2
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8128
                            ]

                            port out_C {
                                position = right:3
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8400
                            ]

                            port in_C {
                                position = left:6
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8128, 8424
                            ]

                            port Block {
                                position = top:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 7912, 7944
                                rotation = right
                            ]

                            port out_A {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8304, 8104
                            ]

                            tag Goto1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = in
                            }
                            [
                                position = 8064, 7992
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From1 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8120, 8080
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From2 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8120, 8232
                                hide_name = True
                                size = 0, 0
                            ]

                            tag From3 {
                                value = "Enable"
                                scope = local
                                kind = sp
                                direction = out
                            }
                            [
                                position = 8120, 8376
                                hide_name = True
                                size = 0, 0
                            ]

                            connect Block "Logical operator2.in" as Connection24
                            connect "Logical operator2.out" Goto1 as Connection25
                            connect From1 "Logical operator1.in" as Connection26
                            connect in_A "Logical operator1.in1" as Connection27
                            connect out_A "Logical operator1.out" as Connection28
                            connect From2 "Logical operator3.in" as Connection29
                            connect "Logical operator3.out" out_B as Connection30
                            connect in_B "Logical operator3.in1" as Connection31
                            connect From3 "Logical operator4.in" as Connection32
                            connect "Logical operator4.out" out_C as Connection33
                            connect in_C "Logical operator4.in1" as Connection34
                        }
                        [
                            position = 8144, 8048
                            size = 80, 160
                        ]

                        component Subsystem gain {
                            layout = dynamic
                            component gen_gain GN1 {
                                gain = "1/Ts"
                            }
                            [
                                position = 8192, 8192
                                hide_name = True
                            ]

                            port In {
                                position = left:1
                                kind = sp
                                direction =  out
                                sp_type {
                                    default = auto
                                    readonly = True
                                }
                            }
                            [
                                position = 8104, 8192
                            ]

                            port Out {
                                position = right:1
                                kind = sp
                                direction =  in
                                sp_type {
                                    default = inherit
                                    readonly = True
                                }
                            }
                            [
                                position = 8288, 8192
                            ]

                            connect GN1.in In as Connection1
                            connect GN1.out Out as Connection2

                            mask {
                                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                                CODE open
                                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                    dialog = RegularComponentPropertiesDialog(
                                        component=component,
                                        property_container=component.masks[-1],
                                        current_diagram=current_diagram
                                    )
                                    dialog.exec_()

                                ENDCODE

                                CODE pre_compile
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    gain = mdl.get_item("GN1", parent=comp_handle, item_type="component")
                                    Ts = mdl.get_property_value(mdl.prop(gain, "execution_rate"))
                                ENDCODE
                            }
                        }
                        [
                            position = 8536, 8336
                            size = 48, 48
                        ]

                        port trip_inst {
                            position = right:5
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8416, 8200
                        ]

                        port trip_C {
                            position = right:4
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8312, 8104
                        ]

                        port VB {
                            position = left:6
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 8056
                        ]

                        port VC {
                            position = left:7
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 8112
                        ]

                        port Time {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8432, 8336
                        ]

                        port trip_A {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8312, 7992
                        ]

                        port Threshold {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 7880
                        ]

                        port VA {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 8000
                        ]

                        port trip_B {
                            position = right:3
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8312, 8048
                        ]

                        port Scale {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 7832
                        ]

                        port trip_delayed {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8744, 8280
                        ]

                        port Block {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7848, 7944
                        ]

                        tag Goto1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = in
                        }
                        [
                            position = 7936, 7944
                            hide_name = True
                            size = 0, 0
                        ]

                        tag From1 {
                            value = "Block"
                            scope = local
                            kind = sp
                            direction = out
                        }
                        [
                            position = 8096, 7928
                            hide_name = True
                            size = 0, 0
                        ]

                        junction Junction3 sp
                        [
                            position = 8264, 7992
                        ]

                        junction Junction4 sp
                        [
                            position = 8248, 8048
                        ]

                        junction Junction5 sp
                        [
                            position = 8232, 8104
                        ]

                        junction Junction13 sp
                        [
                            position = 8704, 8280
                        ]

                        junction Junction14 sp
                        [
                            position = 8368, 8200
                        ]

                        junction Junction15 sp
                        [
                            position = 8000, 8040
                        ]

                        junction Junction16 sp
                        [
                            position = 8000, 7984
                        ]

                        connect CMP1.in1 Junction16 as Connection85
                        connect CMP2.in1 Junction15 as Connection82
                        connect CMP3.in2 VC as Connection78
                        connect CMP4.out Junction13 as Connection65
                        connect CNT1.out CMP4.in1 as Connection26
                        connect Junction13 trip_delayed as Connection66
                        connect Junction14 trip_inst as Connection74
                        connect Junction15 CMP3.in1 as Connection81
                        connect Junction16 Junction15 as Connection84
                        connect Junction3 trip_A as Connection15
                        connect Junction4 trip_B as Connection18
                        connect Junction5 LG1.in2 as Connection70
                        connect Junction5 trip_C as Connection21
                        connect LG1.out Junction14 as Connection75
                        connect LG1.in Junction3 as Connection69
                        connect LG1.in1 Junction4 as Connection71
                        connect LG3.out CNT1.reset as Connection49
                        connect LG3.in Junction14 as Connection73
                        connect LG4.out CNT1.en as Connection64
                        connect LG4.in Junction13 as Connection67
                        connect PD1.out Junction16 as Connection83
                        connect PD1.in Scale as Connection58
                        connect PD1.in1 Threshold as Connection59
                        connect VA CMP1.in2 as Connection76
                        connect VB CMP2.in2 as Connection77
                        connect Goto1 Block as Connection87
                        connect CMP1.out "block function.in_A" as Connection88
                        connect "block function.out_A" Junction3 as Connection89
                        connect CMP2.out "block function.in_B" as Connection90
                        connect "block function.out_B" Junction4 as Connection91
                        connect CMP3.out "block function.in_C" as Connection92
                        connect "block function.out_C" Junction5 as Connection93
                        connect From1 "block function.Block" as Connection94
                        connect gain.In Time as Connection95
                        connect gain.Out CMP4.in2 as Connection96
                    }
                    [
                        position = 7680, 8248
                        size = 120, 328
                    ]

                    component "core/Meter Split" "Meter Split" {
                        van = "False"
                        van_rms = "True"
                        vbn = "False"
                        vbn_rms = "True"
                        vcn = "False"
                        vcn_rms = "True"
                    }
                    [
                        position = 7560, 8472
                        rotation = left
                        size = 96, 80
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7552, 8248
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7784, 8656
                        rotation = left
                    ]

                    component gen_digital_probe TRIP-DLY {
                    }
                    [
                        position = 7608, 8632
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 7984
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7688, 8696
                        size = 112, 72
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7488, 8544
                    ]

                    port trip_delayed {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7840, 8104
                    ]

                    port trip_A {
                        position = 72.0, -16.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7840, 8176
                    ]

                    port trip_B {
                        position = 72.0, 8.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7840, 8248
                    ]

                    port trip_C {
                        position = 72.0, 32.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7840, 8320
                    ]

                    port trip_inst {
                        position = 72.0, -40.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7992, 8392
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7992, 8696
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7336, 8712
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7840, 8064
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT2 {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7824, 8392
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_inst {
                        value = "TRIP_INST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7896, 8392
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7544, 8680
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7840, 8696
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7416, 8712
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7504, 8712
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7920, 8696
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction11 sp
                    [
                        position = 7776, 8104
                    ]

                    junction Junction15 sp
                    [
                        position = 7768, 8392
                    ]

                    junction Junction14 sp
                    [
                        position = 7608, 8680
                    ]

                    junction Junction25 sp
                    [
                        position = 7784, 8696
                    ]

                    connect GT1 Junction11 as Connection132
                    connect "Meter Split.Input" Meas_in as Connection139
                    connect "Meter Split.VAn_RMS" UN.VA as Connection136
                    connect UN.trip_delayed Junction11 as Connection94
                    connect UN.VB "Meter Split.VBn_RMS" as Connection137
                    connect UN.VC "Meter Split.VCn_RMS" as Connection138
                    connect UN.Scale VLn.out as Connection86
                    connect UV_delay_s.out UN.Time as Connection128
                    connect UV_threshold_pu.out UN.Threshold as Connection127
                    connect trip_delayed Junction11 as Connection96
                    connect UN.trip_A trip_A as conn_tripA
                    connect UN.trip_B trip_B as conn_tripB
                    connect UN.trip_C trip_C as conn_tripC
                    connect Block.out UN.Block as Conn_block
                    connect GT2 Junction15 as Connection141
                    connect Junction15 UN.trip_inst as Connection142
                    connect TRIP-INST.in Junction15 as Connection143
                    connect from_trip_inst trip_inst as conn_tripInst
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP-DLY.in Junction14 as Connection135
                    connect GT3 Junction25 as Connection188
                    connect Junction25 "Trip Memory.Mem" as Connection189
                    connect TRIP-MEM.in Junction25 as Connection190
                    connect from_rst "Trip Memory.mem_rst" as Connection193
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 27 undervoltage relay function for three-phase system.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        Vn {
                            label = "Nominal line voltage"
                            widget = edit
                            type = generic
                            default_value = "480"
                            unit = "V"
                        }

                        UV_thresh {
                            label = "Undervoltage threshold"
                            widget = edit
                            type = generic
                            default_value = "0.9"
                            unit = "p.u."
                        }

                        UV_delay {
                            label = "Undervoltage trip delay"
                            widget = edit
                            type = generic
                            default_value = "0.16667"
                            unit = "s"
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "UN")
                            ENDCODE
                        }

                        inst_trip {
                            label = "Enable instantaneous trip output"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_inst_trip(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        phase_trip {
                            label = "Enable individual phase trip output"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_phase_trip(mdl, comp_handle, new_value, "UN")
                            ENDCODE
                        }

                        mem_trip {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_phase_trip(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    termA = mdl.get_item("trip_A", parent=comp_handle, item_type="component")
                                    if termA:
                                        posA = mdl.get_position(termA)
                                        mdl.delete_item(termA)

                                    termB = mdl.get_item("trip_B", parent=comp_handle, item_type="component")
                                    if termB:
                                        posB = mdl.get_position(termB)
                                        mdl.delete_item(termB)

                                    termC = mdl.get_item("trip_C", parent=comp_handle, item_type="component")
                                    if termC:
                                        posC = mdl.get_position(termC)
                                        mdl.delete_item(termC)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    tripA = mdl.get_item("trip_A", parent=comp_handle, item_type="port")
                                    if not tripA:
                                        tripA = mdl.create_port(parent=comp_handle, name="trip_A", direction="out",
                                                                kind="sp", terminal_position=(72, -16),
                                                                position=posA)

                                    tripB = mdl.get_item("trip_B", parent=comp_handle, item_type="port")
                                    if not tripB:
                                        tripB = mdl.create_port(parent=comp_handle, name="trip_B", direction="out",
                                                                kind="sp", terminal_position=(72, 8),
                                                                position=posB)

                                    tripC = mdl.get_item("trip_C", parent=comp_handle, item_type="port")
                                    if not tripC:
                                        tripC = mdl.create_port(parent=comp_handle, name="trip_C", direction="out",
                                                                kind="sp", terminal_position=(72, 32),
                                                                position=posC)

                                    connA = mdl.get_item("conn_tripA", parent=comp_handle, item_type="connection")
                                    if not connA:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_A"), tripA,
                                                              "conn_tripA")

                                    connB = mdl.get_item("conn_tripB", parent=comp_handle, item_type="connection")
                                    if not connB:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_B"), tripB,
                                                              "conn_tripB")

                                    connC = mdl.get_item("conn_tripC", parent=comp_handle, item_type="connection")
                                    if not connC:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_C"), tripC,
                                                              "conn_tripC")


                                else:
                                    tripA = mdl.get_item("trip_A", parent=comp_handle, item_type="port")
                                    if tripA:
                                        posA = mdl.get_position(tripA)
                                        mdl.delete_item(tripA)

                                    tripB = mdl.get_item("trip_B", parent=comp_handle, item_type="port")
                                    if tripB:
                                        posB = mdl.get_position(tripB)
                                        mdl.delete_item(tripB)

                                    tripC = mdl.get_item("trip_C", parent=comp_handle, item_type="port")
                                    if tripC:
                                        posC = mdl.get_position(tripC)
                                        mdl.delete_item(tripC)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    termA = mdl.get_item("trip_A", parent=comp_handle, item_type="component")
                                    if not termA:
                                        termA = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_A", position=posA,
                                                                     rotation="up")

                                    termB = mdl.get_item("trip_B", parent=comp_handle, item_type="component")
                                    if not termB:
                                        termB = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_B", position=posB,
                                                                     rotation="up")

                                    termC = mdl.get_item("trip_C", parent=comp_handle, item_type="component")
                                    if not termC:
                                        termC = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_C", position=posC,
                                                                     rotation="up")

                                    connA = mdl.get_item("conn_tripA", parent=comp_handle, item_type="connection")
                                    if not connA:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_A"), mdl.term(termA, "in"),
                                                              "conn_tripA")

                                    connB = mdl.get_item("conn_tripB", parent=comp_handle, item_type="connection")
                                    if not connB:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_B"), mdl.term(termB, "in"),
                                                              "conn_tripB")

                                    connC = mdl.get_item("conn_tripC", parent=comp_handle, item_type="connection")
                                    if not connC:
                                        mdl.create_connection(mdl.term(ansi_fnc, "trip_C"), mdl.term(termC, "in"),
                                                              "conn_tripC")



                            def enable_inst_trip(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if not trip:
                                        trip = mdl.create_port(parent=comp_handle, name="trip_inst", direction="out",
                                                                kind="sp", terminal_position=(72, -40),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, trip, "conn_tripInst")
                                else:
                                    trip = mdl.get_item("trip_inst", parent=comp_handle, item_type="port")
                                    if trip:
                                        pos = mdl.get_position(trip)
                                        mdl.delete_item(trip)

                                    fromtag = mdl.get_item("from_trip_inst", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("trip_inst", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="trip_inst", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripInst", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripInst")



                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE
                    }
                }
                [
                    position = 7784, 7944
                    size = 144, 160
                ]

                component Subsystem "(51) AC Inverse Time Overcurrent" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_vlr_tvk_n2b"
                    component gen_probe DIAL-POS-C {
                    }
                    [
                        position = 7472, 8672
                    ]

                    component src_constant Time_dial_pu {
                        execution_rate = "execution_rate"
                        value = "TOC_timeDial"
                    }
                    [
                        position = 7168, 8448
                    ]

                    component src_constant reset_mode {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 7088, 8288
                    ]

                    component src_constant In {
                        execution_rate = "execution_rate"
                        value = "In"
                    }
                    [
                        position = 7168, 8336
                    ]

                    component gen_probe DIAL-POS-B {
                    }
                    [
                        position = 7472, 8576
                    ]

                    component gen_digital_probe RESET {
                    }
                    [
                        position = 7408, 8344
                        rotation = left
                    ]

                    component src_constant OC_threshold_pu {
                        execution_rate = "execution_rate"
                        value = "TOC_thresh"
                    }
                    [
                        position = 7088, 8400
                    ]

                    component gen_probe DIAL-POS-A {
                    }
                    [
                        position = 7472, 8480
                    ]

                    component "core/Meter Split" "Meter Split" {
                        ia_rms = "True"
                        ib_rms = "True"
                        ic_rms = "True"
                        van = "False"
                        vbn = "False"
                        vcn = "False"
                    }
                    [
                        position = 7128, 8744
                        rotation = left
                        size = 96, 80
                    ]

                    component Subsystem "3 Phase Inverse Time" {
                        layout = dynamic
                        component gen_c_function "3 Phase Inverse Time" {
                            global_variables = "real DialPos[3];real PickUp;real M[3];int idx;"
                            in_terminal_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                            in_terminal_dimensions_str = "Scale inherit;Level inherit;TimeDial inherit;EmReset inherit;Arms inherit;Brms inherit;Crms inherit;Block inherit"
                            in_terminal_labels = "[(\'Scale\', True), (\'Level\', True), (\'TimeDial\', True), (\'EmReset\', True), (\'Arms\', True), (\'Brms\', True), (\'Crms\', True), (\'Block\', True)]"
                            in_terminal_properties = "real Scale;real Level;real TimeDial;real EmReset;real Arms;real Brms;real Crms;real Block;"
                            init_fnc = "/*Begin code section*/
DialPos[0] = 0;
DialPos[1] = 0;
DialPos[2] = 0;
/*End code section*/"
                            no_feed_inputs = "[\'\']"
                            no_feed_outputs = "[\'\']"
                            out_terminal_dimensions = "inherit;inherit;inherit;inherit;inherit"
                            out_terminal_dimensions_str = "Tripped inherit;Reset inherit;DialPosA inherit;DialPosB inherit;DialPosC inherit"
                            out_terminal_labels = "[(\'Tripped\', True), (\'Reset\', True), (\'DialPosA\', True), (\'DialPosB\', True), (\'DialPosC\', True)]"
                            out_terminal_properties = "real Tripped;inherit Reset;inherit DialPosA;inherit DialPosB;inherit DialPosC;"
                            output_fnc = "/*Begin code section*/
// Convert Pickup Level in p.u. to Pickup Current
PickUp = (Scale * Level);

// Convert  RMS Current to multiples of pickup current 
if (PickUp > 0)
{
    M[0] = Arms / PickUp;
    M[1] = Brms / PickUp;
    M[2] = Crms / PickUp;
}
else
{
    M[0] = 0;
    M[1] = 0;
    M[2] = 0;
}

if (Block > 0){
    for(idx=0; idx<3; idx++){
        DialPos[idx] = 0.0;
    }
}
else{
    // Integrate Dial Velocity based on curve timing equation and Time Dial setting to track dial position
    for(idx=0; idx<3; idx++)
    {
        if (M[idx] > 1.0) // Forward Dial Velocity
        {
            DialPos[idx] += execution_rate / (TimeDial * (B + A/(pow(M[idx], P) - 1.0))); // Integrate in the positive direction
            if (DialPos[idx] > 1.0)
                DialPos[idx] = 1.0;
        }
        else if (M[idx] < 1.0) // Reverse Dial Volicity
        {
            if (EmReset)
            {
                DialPos[idx] -= execution_rate / (TimeDial * C / (1 - pow(M[idx], Pr))); // Integrate in the negative direction
                if (DialPos[idx] < 0.0)
                    DialPos[idx] = 0.0;
            }
            else // Instant Dial Reset for Current less than Pickup Level
                DialPos[idx] = 0.0;
        }
    }
}

// Check if any tripped (any dial at full 1.0)
Tripped =  (DialPos[0] >= 1.0) || (DialPos[1] >= 1.0) || (DialPos[2] >= 1.0);

// Check if all reset
Reset =  (DialPos[0] == 0.0) && (DialPos[1] == 0.0) && (DialPos[2] == 0.0);

// Output Dial Positions
DialPosA = DialPos[0];
DialPosB = DialPos[1];
DialPosC = DialPos[2];
/*End code section*/"
                            parameters = "real A;real B;real P;real C;real Pr;"
                        }
                        [
                            position = 8024, 8288
                            size = 144, 504
                        ]

                        port DialPosC {
                            position = right:5
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8168, 8512
                        ]

                        port reset {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8168, 8176
                        ]

                        port Scale {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7872, 8064
                        ]

                        port Level {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7872, 8128
                        ]

                        port IA {
                            position = left:9
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7872, 8320
                        ]

                        port IB {
                            position = left:10
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7872, 8384
                        ]

                        port DialPosB {
                            position = right:4
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8168, 8400
                        ]

                        port IC {
                            position = left:11
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7872, 8448
                        ]

                        port reset_mode {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7872, 8256
                        ]

                        port trip {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8168, 8064
                        ]

                        port Time-Dial {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7872, 8192
                        ]

                        port DialPosA {
                            position = right:3
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8168, 8288
                        ]

                        port Block {
                            position = left:8
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7872, 8512
                        ]

                        connect Scale "3 Phase Inverse Time.Scale" as Connection1
                        connect Level "3 Phase Inverse Time.Level" as Connection2
                        connect Time-Dial "3 Phase Inverse Time.TimeDial" as Connection3
                        connect reset_mode "3 Phase Inverse Time.EmReset" as Connection4
                        connect IA "3 Phase Inverse Time.Arms" as Connection5
                        connect IB "3 Phase Inverse Time.Brms" as Connection6
                        connect IC "3 Phase Inverse Time.Crms" as Connection7
                        connect Block "3 Phase Inverse Time.Block" as Connection8
                        connect "3 Phase Inverse Time.Tripped" trip as Connection9
                        connect "3 Phase Inverse Time.Reset" reset as Connection10
                        connect "3 Phase Inverse Time.DialPosA" DialPosA as Connection11
                        connect "3 Phase Inverse Time.DialPosB" DialPosB as Connection12
                        connect "3 Phase Inverse Time.DialPosC" DialPosC as Connection13
                    }
                    [
                        position = 7304, 8480
                        size = 152, 432
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7088, 8512
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7328, 8888
                        rotation = left
                    ]

                    component gen_digital_probe TRIP {
                    }
                    [
                        position = 7152, 8864
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8000
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7232, 8928
                        size = 112, 72
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 7016, 8824
                    ]

                    port dial_reset {
                        position = 72.0, 0.01
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7480, 8384
                    ]

                    port time_trip {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7480, 8288
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7544, 8928
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6848, 8944
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7488, 8248
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7088, 8912
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7384, 8928
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6960, 8944
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7064, 8944
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7456, 8928
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction7 sp
                    [
                        position = 7408, 8384
                    ]

                    junction Junction8 sp
                    [
                        position = 7432, 8288
                    ]

                    junction Junction14 sp
                    [
                        position = 7152, 8912
                    ]

                    junction Junction25 sp
                    [
                        position = 7328, 8928
                    ]

                    connect "3 Phase Inverse Time.DialPosA" DIAL-POS-A.in as Connection204
                    connect "3 Phase Inverse Time.reset" Junction7 as Connection193
                    connect "3 Phase Inverse Time.trip" Junction8 as Connection196
                    connect "3 Phase Inverse Time.IB" "Meter Split.IB_RMS" as Connection222
                    connect DIAL-POS-B.in "3 Phase Inverse Time.DialPosB" as Connection205
                    connect DIAL-POS-C.in "3 Phase Inverse Time.DialPosC" as Connection206
                    connect GT1 Junction8 as Connection216
                    connect In.out "3 Phase Inverse Time.Scale" as Connection175
                    connect "Meter Split.IA_RMS" "3 Phase Inverse Time.IA" as Connection221
                    connect "Meter Split.IC_RMS" "3 Phase Inverse Time.IC" as Connection223
                    connect "Meter Split.Input" Meas_in as Connection224
                    connect OC_threshold_pu.out "3 Phase Inverse Time.Level" as Connection210
                    connect RESET.in Junction7 as Connection191
                    connect Time_dial_pu.out "3 Phase Inverse Time.Time-Dial" as Connection211
                    connect dial_reset Junction7 as Connection203
                    connect reset_mode.out "3 Phase Inverse Time.reset_mode" as Connection220
                    connect time_trip Junction8 as Connection202
                    connect Block.out "3 Phase Inverse Time.Block" as Conn_block
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP.in Junction14 as Connection135
                    connect GT3 Junction25 as Connection188
                    connect Junction25 "Trip Memory.Mem" as Connection189
                    connect TRIP-MEM.in Junction25 as Connection190
                    connect "Trip Memory.mem_rst" from_rst as Connection226
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 51 inverse time overcurrent relay function for three-phase system.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Parameters description:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"TOC_thresh\" - Defines the pickup level |currents| larger than \"TOC_thresh\" will move the relay dials toward the trip position while |currents| less than \"TOC_thresh\" will either cause the relay dials to return to the reset position based on |current| (\"EM_reset\" = 1) or directly return the dial to the reset position (\"EM_reset\" = 0).</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"EM_reset\" - Determines the method for returning the relay dials to the reset position.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"TOC_timeDial\" - Determines the relative time required to trip or reset the relay.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"TOC_curve_type\" - Trip/reset time curve type.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        In {
                            label = "Nominal current"
                            widget = edit
                            type = generic
                            default_value = "2000"
                            unit = "A"
                        }

                        TOC_thresh {
                            label = "AC inverse time overcurrent threshold"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = "p.u."
                        }

                        TOC_timeDial {
                            label = "AC inverse time overcurrent time dial"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = "p.u."
                        }

                        TOC_curve_type {
                            label = "AC inverse time overcurrent curve type"
                            widget = combo
                            combo_values = "U1 - Moderatly Inverse (US)", "U2 - Inverse (US)", "U3 - Very Inverse (US)", "U4 - Extremely Inverse (US)", "U5 - Short-Time Inverse (US)", "C1 - Standard Inverse (IEC)", "C2 - Very Inverse (IEC)", "C3 - Extremely Inverse (IEC)", "C4 - Long-Time Inverse (IEC)", "C5 - Short-Time Inverse (IEC)", "Custom Curve"
                            type = string
                            default_value = "U1 - Moderatly Inverse (US)"
                            no_evaluate

                            CODE property_value_changed
                                if new_value == "Custom Curve":
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_A"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_B"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_P"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_C"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_Pr"))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_A"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_B"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_P"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_C"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_Pr"))
                            ENDCODE

                            CODE property_value_edited
                                if new_value == "Custom Curve":
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_A"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_B"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_P"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_C"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_Pr"))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_A"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_B"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_P"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_C"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_Pr"))
                            ENDCODE
                        }

                        curve_prm_A {
                            label = "Trip curve parameter A"
                            widget = edit
                            type = generic
                            default_value = "6.407"
                            group = "Curve Definition:3"
                            nonvisible
                        }

                        curve_prm_B {
                            label = "Trip curve parameter B"
                            widget = edit
                            type = generic
                            default_value = "0.025"
                            group = "Curve Definition"
                            nonvisible
                        }

                        curve_prm_P {
                            label = "Trip curve parameter P"
                            widget = edit
                            type = generic
                            default_value = "2.0"
                            group = "Curve Definition"
                            nonvisible
                        }

                        curve_prm_C {
                            label = "Reset curve parameter C"
                            widget = edit
                            type = generic
                            default_value = "3.0"
                            group = "Curve Definition"
                            nonvisible
                        }

                        curve_prm_Pr {
                            label = "Reset curve parameter Pr"
                            widget = edit
                            type = generic
                            default_value = "1.0"
                            group = "Curve Definition"
                            nonvisible
                        }

                        EM_reset {
                            label = "Reset dial position based on current magnitude"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            no_evaluate

                            CODE property_value_changed
                                if new_value:
                                    mode = 1
                                else:
                                    mode = 0

                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                rst_mode = mdl.get_item(name="reset_mode", parent=comp_handle, item_type="component")
                                mdl.set_property_value(mdl.prop(rst_mode, "value"), mode)
                            ENDCODE
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "3 Phase Inverse Time")
                            ENDCODE
                        }

                        trip_mem {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")

                            def get_standard_curve_params(curve_type):
                                """
                                Curve parameters are defined as (A, B, P, C, Pr).
                                The curve trip time is defined as tp = TD * (A/(M**P - 1) + B)
                                The curve reset time is defined as tr = TD * (C/(1 - M**Pr))

                                Where TD is the time dial, which is defined in another place,
                                and M = I/Ip, where I is the input current and Ip is the current pickup/
                                """
                                curves_parameters = {
                                    "U1 - Moderatly Inverse (US)": (0.0104, 0.0226, 0.02, 1.08, 2.0),
                                    "U2 - Inverse (US)": (5.95, 0.180, 2.0, 5.95, 2.0),
                                    "U3 - Very Inverse (US)": (3.88, 0.0963, 2.0, 3.88, 2.0),
                                    "U4 - Extremely Inverse (US)": (5.67, 0.0352, 2.0, 5.67, 2.0),
                                    "U5 - Short-Time Inverse (US)": (0.00342, 0.00262, 0.02, 0.323, 2.0),
                                    "C1 - Standard Inverse (IEC)": (0.14, 0.0, 0.02, 13.5, 2.0),
                                    "C2 - Very Inverse (IEC)": (13.5, 0.0, 1.0, 47.3, 2.0),
                                    "C3 - Extremely Inverse (IEC)": (80.0, 0.0, 2.0, 80.0, 2.0),
                                    "C4 - Long-Time Inverse (IEC)": (120.0, 0.0, 1.0, 120.0, 1.0),
                                    "C5 - Short-Time Inverse (IEC)": (0.05, 0.0, 0.04, 4.85, 2.0)}

                                return curves_parameters[curve_type]

                            def translate_old_values_to_new(mdl, container_handle):
                                translation_dict={
                                    "SEL 751A (U1 - Moderatly Inverse)": "U1 - Moderatly Inverse (US)",
                                    "SEL 751A (U2 - Inverse)": "U2 - Inverse (US)",
                                    "SEL 751A (U3 - Very Inverse)": "U3 - Very Inverse (US)",
                                    "SEL 751A (U4 - Extremely Inverse)": "U4 - Extremely Inverse (US)",
                                    "SEL 751A (U5 - Short-Time Inverse)": "U5 - Short-Time Inverse (US)"}

                                old_value = mdl.get_property_value(mdl.prop(container_handle, "TOC_curve_type"))
                                if old_value in translation_dict.keys():
                                    mdl.set_property_value(mdl.prop(container_handle, "TOC_curve_type"), translation_dict[old_value])
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "TOC_curve_type"), translation_dict[old_value])

                            translate_old_values_to_new(mdl, item_handle)


                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")
                        ENDCODE

                        CODE pre_compile
                            # HEADER START
                            In = mdl.get_property_value(mdl.prop(item_handle, "In"))
                            TOC_thresh = mdl.get_property_value(mdl.prop(item_handle, "TOC_thresh"))
                            TOC_timeDial = mdl.get_property_value(mdl.prop(item_handle, "TOC_timeDial"))
                            TOC_curve_type = mdl.get_property_value(mdl.prop(item_handle, "TOC_curve_type"))
                            curve_prm_A = mdl.get_property_value(mdl.prop(item_handle, "curve_prm_A"))
                            curve_prm_B = mdl.get_property_value(mdl.prop(item_handle, "curve_prm_B"))
                            curve_prm_P = mdl.get_property_value(mdl.prop(item_handle, "curve_prm_P"))
                            curve_prm_C = mdl.get_property_value(mdl.prop(item_handle, "curve_prm_C"))
                            curve_prm_Pr = mdl.get_property_value(mdl.prop(item_handle, "curve_prm_Pr"))
                            EM_reset = mdl.get_property_value(mdl.prop(item_handle, "EM_reset"))
                            block_fnc = mdl.get_property_value(mdl.prop(item_handle, "block_fnc"))
                            trip_mem = mdl.get_property_value(mdl.prop(item_handle, "trip_mem"))
                            execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                            # HEADER STOP
                            if TOC_curve_type == 'Custom Curve':
                                A = curve_prm_A
                                B = curve_prm_B
                                P = curve_prm_P
                                C = curve_prm_C
                                Pr = curve_prm_Pr
                            elif TOC_curve_type in mdl.get_property_combo_values(mdl.prop(item_handle, "TOC_curve_type")):
                                A, B, P, C, Pr = get_standard_curve_params(TOC_curve_type)
                            else:
                                mdl.error("The curve selected isn't valid. Please select valid curve type.",
                                          kind="Invalid property value",
                                          context=mdl.prop(item_handle, "TOC_curve_type"))
                        ENDCODE
                    }
                }
                [
                    position = 8936, 7944
                    size = 144, 160
                ]

                component Subsystem "(51N) Neutral AC Inverse Time Overcurrent" {
                    layout = static
                    require = "sw_microgrid"
                    help_file = "ansi_protective_functions.html#concept_a1t_vlx_nz__section_vlr_tvk_n2c"
                    component src_constant OC_threshold_pu {
                        execution_rate = "execution_rate"
                        value = "NTOC_thresh"
                    }
                    [
                        position = 7288, 8536
                    ]

                    component src_constant In {
                        execution_rate = "execution_rate"
                        value = "In"
                    }
                    [
                        position = 7216, 8480
                    ]

                    component src_constant reset_mode {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 7216, 8368
                    ]

                    component gen_probe DIAL-POS {
                    }
                    [
                        position = 7568, 8720
                    ]

                    component src_constant Time_dial_pu {
                        execution_rate = "execution_rate"
                        value = "NTOC_timeDial"
                    }
                    [
                        position = 7216, 8592
                    ]

                    component gen_digital_probe RESET {
                    }
                    [
                        position = 7520, 8488
                        rotation = left
                    ]

                    component src_constant curve_type {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 7288, 8424
                    ]

                    component Subsystem "1 Phase Inverse Time" {
                        layout = dynamic
                        component gen_c_function "1 Phase Inverse Time" {
                            global_variables = "real PickUp;real M;real DialPosA;"
                            in_terminal_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                            in_terminal_dimensions_str = "Scale inherit;Level inherit;TimeDial inherit;EmReset inherit;Curve inherit;Arms inherit;Block inherit"
                            in_terminal_labels = "[(\'Scale\', True), (\'Level\', True), (\'TimeDial\', True), (\'EmReset\', True), (\'Curve\', True), (\'Arms\', True), (\'Block\', True)]"
                            in_terminal_properties = "real Scale;real Level;real TimeDial;real EmReset;real Curve;real Arms;real Block;"
                            init_fnc = "/*Begin code section*/
DialPosA = 0.0;
/*End code section*/"
                            no_feed_inputs = "[\'\']"
                            no_feed_outputs = "[\'\']"
                            out_terminal_dimensions = "inherit;inherit;inherit"
                            out_terminal_dimensions_str = "Tripped inherit;Reset inherit;DialPos inherit"
                            out_terminal_labels = "[(\'Tripped\', True), (\'Reset\', True), (\'DialPos\', True)]"
                            out_terminal_properties = "real Tripped;real Reset;real DialPos;"
                            output_fnc = "/*Begin code section*/
// Convert Pickup Level in p.u. to Pickup Current
PickUp = (Scale * Level);

// Convert  RMS Current to multiples of pickup current 
M = Arms / PickUp;

if (Block > 0){
    DialPosA = 0.0;
}
else{
    // Integrate Dial Velocity based on curve timing equation and Time Dial setting to track dial position
    if (M > 1.0) // Forward Dial Velocity
    {
        DialPosA += execution_rate / (TimeDial * (B + A/(pow(M, P) - 1.0))); // Integrate in the positive direction
        if (DialPosA > 1.0)
            DialPosA = 1.0;
    }
    else if (M < 1.0) // Reverse Dial Velocity
    {
        if (EmReset)
        {
            DialPosA -= execution_rate / (TimeDial * C / (1 - pow(M, Pr))); // Integrate in the negative direction
            if (DialPosA < 0.0)
                DialPosA = 0.0;
        }
        else // Instant Dial Reset for Current less than Pickup Level
            DialPosA = 0.0;
    }
}

// Check if any tripped (any dial at full 1.0)
Tripped =  (DialPosA >= 1.0);

// Check if all reset
Reset =  (DialPosA == 0.0);

// Output Dial Positions
DialPos = DialPosA;
/*End code section*/"
                            parameters = "real A;real B;real P;real C;real Pr;"
                        }
                        [
                            position = 8088, 8104
                            size = 160, 344
                        ]

                        port EM-Reset {
                            label = "EM-Reset"
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7936, 8104
                        ]

                        port Time-Dial {
                            position = left:5
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7936, 8056
                        ]

                        port trip {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8232, 7952
                        ]

                        port IN {
                            position = left:7
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7936, 8200
                        ]

                        port reset {
                            position = right:2
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8232, 8104
                        ]

                        port DialPos {
                            position = right:3
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8232, 8256
                        ]

                        port Curve {
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7936, 8152
                        ]

                        port Scale {
                            position = left:3
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7936, 7960
                        ]

                        port Level {
                            position = left:4
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7936, 8008
                        ]

                        port Block {
                            position = left:6
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7936, 8248
                        ]

                        connect "1 Phase Inverse Time.Curve" Curve as Connection3
                        connect "1 Phase Inverse Time.DialPos" DialPos as Connection2
                        connect "1 Phase Inverse Time.EmReset" EM-Reset as Connection9
                        connect "1 Phase Inverse Time.Arms" IN as Connection7
                        connect "1 Phase Inverse Time.Level" Level as Connection1
                        connect "1 Phase Inverse Time.Scale" Scale as Connection13
                        connect "1 Phase Inverse Time.TimeDial" Time-Dial as Connection4
                        connect "1 Phase Inverse Time.Reset" reset as Connection12
                        connect "1 Phase Inverse Time.Tripped" trip as Connection8
                        connect Block "1 Phase Inverse Time.Block" as Connection14

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                            execution_rate {
                                label = "Execution Rate"
                                widget = edit
                                type = generic
                                default_value = "execution_rate"
                                unit = "s"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                                
                            ENDCODE
                        }
                    }
                    [
                        position = 7424, 8536
                        size = 136, 416
                    ]

                    component gen_sum Sum1 {
                        signs = "3"
                    }
                    [
                        position = 7136, 8872
                        hide_name = True
                    ]

                    component "core/Single-phase RMS variable frequency" RMS {
                        Ts = "execution_rate"
                        n_cycles = "1"
                    }
                    [
                        position = 7224, 8784
                        rotation = left
                        size = 88, 88
                    ]

                    component "core/Meter Split" "Meter Split1" {
                        freq = "True"
                        ia = "True"
                        ib = "True"
                        ic = "True"
                        van = "False"
                        vbn = "False"
                        vcn = "False"
                    }
                    [
                        position = 7048, 8976
                        rotation = left
                        hide_name = True
                        size = 96, 80
                    ]

                    component src_constant Block {
                        execution_rate = "inherit"
                        value = "0"
                    }
                    [
                        position = 7280, 8648
                    ]

                    component gen_digital_probe TRIP-MEM {
                    }
                    [
                        position = 7400, 9160
                        rotation = left
                    ]

                    component gen_digital_probe TRIP {
                    }
                    [
                        position = 7224, 9128
                        rotation = left
                    ]

                    component Subsystem "Trip Memory" {
                        layout = dynamic
                        component gen_terminator TRM1 {
                        }
                        [
                            position = 7912, 8048
                            hide_name = True
                        ]

                        component gen_sr_ff SR1 {
                        }
                        [
                            position = 7840, 8032
                        ]

                        port mem_rst {
                            label = "Mem Rst"
                            position = left:2
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 8048
                        ]

                        port trip {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 7640, 7992
                        ]

                        port Mem {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 7968, 8016
                        ]

                        connect Mem SR1.out as Connection8
                        connect TRM1.in SR1.out_n as Connection9
                        connect mem_rst SR1.r_in as Connection11
                        connect trip SR1.s_in as Connection12
                    }
                    [
                        position = 7304, 9192
                        size = 112, 72
                    ]

                    port dial_reset {
                        position = 72.0, 0.01
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7568, 8536
                    ]

                    port Meas_in {
                        position = -72.0, -64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6960, 9072
                    ]

                    port time_trip {
                        position = 72.0, -64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7568, 8352
                    ]

                    port Mem {
                        position = 72.0, 64.0
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7616, 9192
                    ]

                    port Mem_en_rst {
                        label = "Mem Rst"
                        position = -72.0, 64.0
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6944, 9208
                    ]

                    tag GT1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7576, 8320
                        hide_name = True
                        size = 0, 0
                    ]

                    tag FM1 {
                        value = "TRIP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7160, 9176
                        hide_name = True
                        size = 0, 0
                    ]

                    tag GT3 {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7456, 9192
                        hide_name = True
                        size = 0, 0
                    ]

                    tag to_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7032, 9208
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_rst {
                        value = "MEM_RST"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7136, 9208
                        hide_name = True
                        size = 0, 0
                    ]

                    tag from_trip_mem {
                        value = "TRIP_MEM"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7528, 9192
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction1 sp
                    [
                        position = 7528, 8352
                    ]

                    junction Junction3 sp
                    [
                        position = 7520, 8536
                    ]

                    junction Junction14 sp
                    [
                        position = 7224, 9176
                    ]

                    junction Junction25 sp
                    [
                        position = 7400, 9192
                    ]

                    connect "1 Phase Inverse Time.trip" Junction1 as Connection227
                    connect "1 Phase Inverse Time.reset" Junction3 as Connection226
                    connect DIAL-POS.in "1 Phase Inverse Time.DialPos" as Connection225
                    connect GT1 Junction1 as Connection233
                    connect In.out "1 Phase Inverse Time.Scale" as Connection205
                    connect Junction1 time_trip as Connection141
                    connect Junction3 dial_reset as Connection148
                    connect OC_threshold_pu.out "1 Phase Inverse Time.Level" as Connection230
                    connect RESET.in Junction3 as Connection199
                    connect Time_dial_pu.out "1 Phase Inverse Time.Time-Dial" as Connection231
                    connect curve_type.out "1 Phase Inverse Time.Curve" as Connection229
                    connect reset_mode.out "1 Phase Inverse Time.EM-Reset" as Connection228
                    connect RMS.In Sum1.out as Connection192
                    connect "Meter Split1.IA" Sum1.in as Connection194
                    connect "Meter Split1.IB" Sum1.in1 as Connection195
                    connect "Meter Split1.IC" Sum1.in2 as Connection196
                    connect Meas_in "Meter Split1.Input" as Connection237
                    connect RMS.RMS "1 Phase Inverse Time.IN" as Connection238
                    connect RMS.Freq "Meter Split1.Freq" as Connection239
                    connect Block.out "1 Phase Inverse Time.Block" as Conn_block
                    connect FM1 Junction14 as Connection133
                    connect Junction14 "Trip Memory.trip" as Connection134
                    connect TRIP.in Junction14 as Connection135
                    connect GT3 Junction25 as Connection188
                    connect Junction25 "Trip Memory.Mem" as Connection189
                    connect TRIP-MEM.in Junction25 as Connection190
                    connect from_rst "Trip Memory.mem_rst" as Connection241
                    connect from_trip_mem Mem as conn_tripMem
                    connect Mem_en_rst to_rst as conn_rst

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ANSI 51N neutral inverse time overcurrent relay function for three-phase system.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The neutral current is estimated from the three-phase currents</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The input \"Meas_in\" should be connected to the component \"Three-phase Meter\" output \"Out\".</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Parameters description:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"NTOC_thresh\" - Defines the pickup level |currents| >\"NTOC_thresh\" will move the relay dials toward the trip position while |currents| less than \"NTOC_thresh\" will either cause the relay dials to return to the reset position based on |current| (\"EM_reset\" = 1) or directly return the dial to the reset position (\"EM_reset\" = 0).</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"EM_reset\" - Determines the method for returning the relay dials to the reset position.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"NTOC_timeDial\" - Determines the relative time required to trip or reset the relay.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">\"NTOC_curve_type\" - Trip/reset time curve type.</p></body></html>"
                        help_file = "ansi_protective_functions.html"

                        In {
                            label = "Nominal current"
                            widget = edit
                            type = generic
                            default_value = "2000"
                            unit = "A"
                        }

                        NTOC_thresh {
                            label = "Neutral AC inverse time over current threshold"
                            widget = edit
                            type = generic
                            default_value = "0.1"
                            unit = "p.u."
                        }

                        NTOC_timeDial {
                            label = "Neutral AC inverse time over current time dial"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = "p.u."
                        }

                        NTOC_curve_type {
                            label = "Neutral AC inverse time over current curve type"
                            widget = combo
                            combo_values = "U1 - Moderatly Inverse (US)", "U2 - Inverse (US)", "U3 - Very Inverse (US)", "U4 - Extremely Inverse (US)", "U5 - Short-Time Inverse (US)", "C1 - Standard Inverse (IEC)", "C2 - Very Inverse (IEC)", "C3 - Extremely Inverse (IEC)", "C4 - Long-Time Inverse (IEC)", "C5 - Short-Time Inverse (IEC)", "Custom Curve"
                            type = string
                            default_value = "U1 - Moderatly Inverse (US)"
                            no_evaluate

                            CODE property_value_changed
                                if new_value == "Custom Curve":
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_A"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_B"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_P"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_C"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_Pr"))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_A"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_B"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_P"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_C"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_Pr"))
                            ENDCODE

                            CODE property_value_edited
                                if new_value == "Custom Curve":
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_A"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_B"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_P"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_C"))
                                    mdl.show_property(mdl.prop(container_handle, "curve_prm_Pr"))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_A"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_B"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_P"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_C"))
                                    mdl.hide_property(mdl.prop(container_handle, "curve_prm_Pr"))
                            ENDCODE
                        }

                        curve_prm_A {
                            label = "Trip curve parameter A"
                            widget = edit
                            type = generic
                            default_value = "6.407"
                            group = "Curve Definition:3"
                            nonvisible
                        }

                        curve_prm_B {
                            label = "Trip curve parameter B"
                            widget = edit
                            type = generic
                            default_value = "0.025"
                            group = "Curve Definition"
                            nonvisible
                        }

                        curve_prm_P {
                            label = "Trip curve parameter P"
                            widget = edit
                            type = generic
                            default_value = "2.0"
                            group = "Curve Definition"
                            nonvisible
                        }

                        curve_prm_C {
                            label = "Reset curve parameter C"
                            widget = edit
                            type = generic
                            default_value = "3.0"
                            group = "Curve Definition"
                            nonvisible
                        }

                        curve_prm_Pr {
                            label = "Reset curve parameter Pr"
                            widget = edit
                            type = generic
                            default_value = "1.0"
                            group = "Curve Definition"
                            nonvisible
                        }

                        EM_reset {
                            label = "Reset dial position based on current magnitude"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            no_evaluate

                            CODE property_value_changed
                                if new_value:
                                    mode = 1
                                else:
                                    mode = 0

                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                rst_mode = mdl.get_item(name="reset_mode", parent=comp_handle, item_type="component")
                                mdl.set_property_value(mdl.prop(rst_mode, "value"), mode)
                            ENDCODE
                        }

                        block_fnc {
                            label = "Enable block function input"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Advanced:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_block_function(mdl, comp_handle, new_value, "1 Phase Inverse Time")
                            ENDCODE
                        }

                        trip_mem {
                            label = "Enable trip memory"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Advanced"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                enable_trip_mem(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution Rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                        }

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, "ansi_function.svg")
                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE

                        CODE init
                            def enable_block_function(mdl, comp_handle, new_value, ansi_fnc_name):
                                if new_value:
                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if const:
                                        position = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if not port:
                                        port = mdl.create_port(parent=comp_handle, name="Block", direction="in",
                                                               kind="sp", terminal_position=(-72, 0),
                                                               position=position)

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(port, mdl.term(ansi_fnc, "Block"), "Conn_block")

                                else:
                                    port = mdl.get_item("Block", parent=comp_handle, item_type="port")
                                    if port:
                                        position = mdl.get_position(port)
                                        mdl.delete_item(port)

                                    ansi_fnc = mdl.get_item(ansi_fnc_name, parent=comp_handle, item_type="component")

                                    const = mdl.get_item("Block", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle, name="Block",
                                                                           position=position)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")
                                        mdl.set_property_value(mdl.prop(const, "value"), "0")

                                    conn = mdl.get_item("Conn_block", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(mdl.term(const, "out") , mdl.term(ansi_fnc, "Block"), "Conn_block")


                            def enable_trip_mem(mdl, comp_handle, new_value):
                                if new_value:
                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if term:
                                        pos = mdl.get_position(term)
                                        mdl.delete_item(term)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if not mem:
                                        mem = mdl.create_port(parent=comp_handle, name="Mem", direction="out",
                                                                kind="sp", terminal_position=(72, 64),
                                                                position=pos)

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mem, "conn_tripMem")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if const:
                                        pos1 = mdl.get_position(const)
                                        mdl.delete_item(const)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if not rst:
                                        rst = mdl.create_port(parent=comp_handle, name="Mem_en_rst", direction="in",
                                                                kind="sp", terminal_position=(-72, 64),
                                                                position=pos1, label="Mem Rst")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(rst, totag, "conn_rst")

                                else:
                                    mem = mdl.get_item("Mem", parent=comp_handle, item_type="port")
                                    if mem:
                                        pos = mdl.get_position(mem)
                                        mdl.delete_item(mem)

                                    fromtag = mdl.get_item("from_trip_mem", parent=comp_handle, item_type="tag")

                                    term = mdl.get_item("Mem", parent=comp_handle, item_type="component")
                                    if not term:
                                        term = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="Mem", position=pos,
                                                                     rotation="up")

                                    conn = mdl.get_item("conn_tripMem", parent=comp_handle, item_type="connection")
                                    if not conn:
                                        mdl.create_connection(fromtag, mdl.term(term, "in"), "conn_tripMem")

                                    rst = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="port")
                                    if rst:
                                        pos1 = mdl.get_position(rst)
                                        mdl.delete_item(rst)

                                    totag = mdl.get_item("to_rst", parent=comp_handle, item_type="tag")

                                    const = mdl.get_item("Mem_en_rst", parent=comp_handle, item_type="component")
                                    if not const:
                                        const = mdl.create_component("Constant", parent=comp_handle,
                                                                     name="Mem_en_rst", position=pos1,
                                                                     rotation="up")
                                        mdl.set_property_value(mdl.prop(const, "value"), 1)
                                        mdl.set_property_value(mdl.prop(const, "execution_rate"), "inherit")

                                    conn1 = mdl.get_item("conn_rst", parent=comp_handle, item_type="connection")
                                    if not conn1:
                                        mdl.create_connection(mdl.term(const, "out"), totag, "conn_rst")


                            def get_standard_curve_params(curve_type):
                                """
                                Curve parameters are defined as (A, B, P, C, Pr).
                                The curve trip time is defined as tp = TD * (A/(M**P - 1) + B)
                                The curve reset time is defined as tr = TD * (C/(1 - M**Pr))

                                Where TD is the time dial, which is defined in another place,
                                and M = I/Ip, where I is the input current and Ip is the current pickup/
                                """
                                curves_parameters = {
                                    "U1 - Moderatly Inverse (US)": (0.0104, 0.0226, 0.02, 1.08, 2.0),
                                    "U2 - Inverse (US)": (5.95, 0.180, 2.0, 5.95, 2.0),
                                    "U3 - Very Inverse (US)": (3.88, 0.0963, 2.0, 3.88, 2.0),
                                    "U4 - Extremely Inverse (US)": (5.67, 0.0352, 2.0, 5.67, 2.0),
                                    "U5 - Short-Time Inverse (US)": (0.00342, 0.00262, 0.02, 0.323, 2.0),
                                    "C1 - Standard Inverse (IEC)": (0.14, 0.0, 0.02, 13.5, 2.0),
                                    "C2 - Very Inverse (IEC)": (13.5, 0.0, 1.0, 47.3, 2.0),
                                    "C3 - Extremely Inverse (IEC)": (80.0, 0.0, 2.0, 80.0, 2.0),
                                    "C4 - Long-Time Inverse (IEC)": (120.0, 0.0, 1.0, 120.0, 1.0),
                                    "C5 - Short-Time Inverse (IEC)": (0.05, 0.0, 0.04, 4.85, 2.0)}

                                return curves_parameters[curve_type]

                            def translate_old_values_to_new(mdl, container_handle):
                                translation_dict={
                                    "SEL 751A (U1 - Moderatly Inverse)": "U1 - Moderatly Inverse (US)",
                                    "SEL 751A (U2 - Inverse)": "U2 - Inverse (US)",
                                    "SEL 751A (U3 - Very Inverse)": "U3 - Very Inverse (US)",
                                    "SEL 751A (U4 - Extremely Inverse)": "U4 - Extremely Inverse (US)",
                                    "SEL 751A (U5 - Short-Time Inverse)": "U5 - Short-Time Inverse (US)"}

                                old_value = mdl.get_property_value(mdl.prop(container_handle, "NTOC_curve_type"))
                                if old_value in translation_dict.keys():
                                    mdl.set_property_value(mdl.prop(container_handle, "NTOC_curve_type"), translation_dict[old_value])
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "NTOC_curve_type"), translation_dict[old_value])

                            translate_old_values_to_new(mdl, item_handle)
                        ENDCODE

                        CODE pre_compile
                            # HEADER START
                            In = mdl.get_property_value(mdl.prop(item_handle, "In"))
                            NTOC_thresh = mdl.get_property_value(mdl.prop(item_handle, "NTOC_thresh"))
                            NTOC_timeDial = mdl.get_property_value(mdl.prop(item_handle, "NTOC_timeDial"))
                            NTOC_curve_type = mdl.get_property_value(mdl.prop(item_handle, "NTOC_curve_type"))
                            curve_prm_A = mdl.get_property_value(mdl.prop(item_handle, "curve_prm_A"))
                            curve_prm_B = mdl.get_property_value(mdl.prop(item_handle, "curve_prm_B"))
                            curve_prm_P = mdl.get_property_value(mdl.prop(item_handle, "curve_prm_P"))
                            curve_prm_C = mdl.get_property_value(mdl.prop(item_handle, "curve_prm_C"))
                            curve_prm_Pr = mdl.get_property_value(mdl.prop(item_handle, "curve_prm_Pr"))
                            EM_reset = mdl.get_property_value(mdl.prop(item_handle, "EM_reset"))
                            block_fnc = mdl.get_property_value(mdl.prop(item_handle, "block_fnc"))
                            trip_mem = mdl.get_property_value(mdl.prop(item_handle, "trip_mem"))
                            execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                            # HEADER STOP
                            if NTOC_curve_type == 'Custom Curve':
                                A = curve_prm_A
                                B = curve_prm_B
                                P = curve_prm_P
                                C = curve_prm_C
                                Pr = curve_prm_Pr
                            elif NTOC_curve_type in mdl.get_property_combo_values(mdl.prop(item_handle, "NTOC_curve_type")):
                                A, B, P, C, Pr = get_standard_curve_params(NTOC_curve_type)
                            else:
                                mdl.error("The curve selected isn't valid. Please select valid curve type.",
                                          kind="Invalid property value",
                                          context=mdl.prop(item_handle, "NTOC_curve_type"))
                        ENDCODE
                    }
                }
                [
                    position = 9168, 7944
                    size = 144, 160
                ]
            }
            [
                position = 7560, 7976
                size = 48, 48
            ]
        }
        [
            position = 7488, 7864
            size = 48, 48
        ]
    }

    default {
    }
}
