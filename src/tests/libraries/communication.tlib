//
// Typhoon built-in Communication library
//

library core {

    component Root "root" {

        component Category "Communication" {

            component Category "SFP Simulation Link" {
                visible = "real_time"

                component sfp_setup                          "SFP Setup"                         { }
                component sfp_send_internal                  "SFP Send Internal"                 { visible = "dev" }
                component sfp_receive_internal               "SFP Receive Internal"              { visible = "dev" }
                component Subsystem "SFP Receive" {
                    layout = dynamic
                    require = "sw_sfp_sim_link"
                    locked

                    component "core/SFP Receive Internal" "SFP Receive Internal" {
                        rcv_var_num = "rcv_var_num"
                        tx_device_id = "tx_device_id"
                        stream_id = "stream_id"
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 7936, 7920
                    ]

                    mask {
                        description = "Receives data over the SFP port using the SFP Simulation Link protocol."
                        help_file = "sfp_link.html#sfp_link__section_rtv_gb5_22b"

                        tx_device_id {
                            label = "Source device ID"
                            description = "Selects the source device ID. Disregarded when frame header is disabled."
                            widget = combo
                            combo_values = dynamic
                            type = string
                            default_value = "0"

                            CODE property_value_changed
                                from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                                comp_handle = mdl.get_sub_level_handle(container_handle)

                                sfp_internal = mdl.get_item("SFP Receive Internal", comp_handle, ITEM_COMPONENT)
                                mdl.set_property_value(mdl.prop(sfp_internal, "tx_device_id"), new_value)
                            ENDCODE
                        }

                        high_speed_rx {
                            label = "High speed SFP receive"
                            widget = checkbox
                            description = "Allows receiving high speed signals with a resolution equal to simulation step."
                            type = bool
                            default_value = "False"

                            CODE property_value_edited
                                from typhoon.import_path.handlers.sfp_receive import dialog_dynamics

                                dialog_dynamics(mdl, container_handle)
                            ENDCODE

                            CODE property_value_changed
                                from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                from typhoon.import_path.handlers.sfp_receive import components_resolving

                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                sfp_internal = mdl.get_item("SFP Receive Internal", comp_handle, ITEM_COMPONENT)
                                mdl.set_property_value(mdl.prop(sfp_internal, "high_speed_rx"), new_value)

                                rcv_var_num = mdl.get_property_disp_value(mdl.prop(container_handle, "rcv_var_num"))
                                components_resolving(mdl, container_handle, new_value, rcv_var_num, rcv_var_num)

                                mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        stream_id {
                            label = "Stream ID"
                            description = "Stream ID"
                            widget = edit
                            type = uint
                            default_value = 0
                            nonvisible
                        }

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            min_value = .1e-9
                            default_value = 100e-6
                        }

                        rcv_var_num {
                            label = "Number of received variables"
                            description = "Number of received variables"
                            widget = combo
                            combo_values = dynamic
                            type = string
                            default_value = "1"
                            nonvisible

                            CODE property_value_changed
                                from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                from typhoon.import_path.handlers.sfp_receive import components_resolving

                                high_speed_rx = mdl.get_property_value(mdl.prop(container_handle, "high_speed_rx"))
                                components_resolving(mdl, container_handle, high_speed_rx, new_value, old_value)
                            ENDCODE
                        }

                        _supported_platforms {
                            label = "Supported platforms"
                            description = "Supported platforms"
                            widget = edit
                            type = string
                            default_value = "['hil']"
                            nonvisible
                            vector
                        }

                        signal_names_dict {
                            label = "Signal names dict"
                            description = "Used to handle old signal names and ports"
                            widget = edit
                            type = string
                            default_value = "{}"
                            nonvisible
                        }

                        configuration {
                            description = "Used to define received variables types"
                            label = "Variable configuration"
                            widget = edit
                            type = string
                            default_value = ""

                            CODE property_value_changed
                                from typhoon.import_path.handlers.sfp_receive import create_sp_components

                                high_speed_rx = mdl.get_property_value(mdl.prop(container_handle, "high_speed_rx"))
                                if not high_speed_rx:
                                    create_sp_components(mdl, container_handle)
                            ENDCODE
                        }

                        generate_configuration {
                            description = "Generate configuration through GUI"
                            label = ""
                            widget = button
                            type = string
                            default_value = "Generate configuration"

                            CODE button_clicked
                                from typhoon.apps.schematic_editor.dialogs.sfp_receive_dialog import generate_configuration

                                conf = mdl.get_property_disp_value(mdl.prop(container_handle, "configuration"))

                                if conf == "":
                                    conf = "[]"
                                conf, signal_names_dict = generate_configuration(mdl, container_handle, conf)

                                if signal_names_dict:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "signal_names_dict"), str(signal_names_dict))
                                if conf:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "configuration"), str(conf))

                            ENDCODE
                        }

                        CODE init
                            from typhoon.import_path.handlers.combo_sync import combo_sync_ssl_device_ids
                            from typhoon.apps.schematic_editor.dialogs.sfp_receive_dialog import default_dict
                            from typhoon.import_path.handlers.sfp_receive import dialog_dynamics, get_max_var_num

                            dialog_dynamics(mdl, item_handle)

                            # Set the property combo values
                            combo_sync_ssl_device_ids(mdl, item_handle, ["tx_device_id"])

                            rcv_var_num_prop_handle = mdl.prop(item_handle, "rcv_var_num")
                            max_var = get_max_var_num(mdl) + 1

                            conf = mdl.get_property_value(mdl.prop(item_handle, "configuration"))

                            if not conf:
                                """
                                This part of the code handles backward compatibility
                                """
                                conf = [ default_dict ]
                                conf[0]["dimension"] = mdl.get_property_value(rcv_var_num_prop_handle)

                            mdl.set_property_value(mdl.prop(item_handle, "configuration"), str(conf))

                            mdl.set_property_combo_values(rcv_var_num_prop_handle, [str(x) for x in range(1, max_var)])

                            if mdl.get_property_value(rcv_var_num_prop_handle) not in mdl.get_property_combo_values(rcv_var_num_prop_handle):
                                mdl.set_property_value(rcv_var_num_prop_handle, "1")
                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE post_resolve
                            from typhoon.import_path.handlers.sfp_receive import set_sources_type
                            rcv_var_num = int(mdl.get_property_value(mdl.prop(item_handle, "rcv_var_num")))
                            set_sources_type(mdl, item_handle, rcv_var_num)

                        ENDCODE

                        CODE pre_validate
                            import typhoon.conf.hw.hardware as hw
                            from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                            hil_device = mdl.get_model_property_value("hil_device")
                            hil_cfg =  mdl.get_model_property_value("hil_configuration_id")
                            max_var = hw.get_fs_param(hw.SSL_ALLOWED_SP_VARS_PER_STREAM, hil_device, hil_cfg)

                            high_speed_rx = mdl.get_property_value(mdl.prop(item_handle, "high_speed_rx"))

                            variables_num = 0
                            conf_prop = mdl.prop(item_handle, "configuration")
                            conf = mdl.get_property_value(conf_prop)

                            if isinstance(conf, str):
                                conf = eval(conf)
                            for c in conf:
                                variables_num += int(c["dimension"])
                            if variables_num > max_var and not high_speed_rx:
                                mdl.error(
                                    f"Sum of all variable dimensions({variables_num}) must be less or equal to {max_var}.",
                                    kind=ERROR_PROPERTY_VALUE_INVALID,
                                    context=conf_prop
                                )
                        ENDCODE

                        CODE define_icon
                            high_speed_rx = mdl.get_property_value(mdl.prop(item_handle, "high_speed_rx"))

                            if high_speed_rx:
                                mdl.set_component_icon_image(item_handle, 'SFP_Receive_HS.svg')
                            else:
                                mdl.set_component_icon_image(item_handle, 'SFP_Receive_SP.svg')
                        ENDCODE
                    }
                }
                [
                    position = 8536, 8120
                    size = 128, 128
                ]

                component Subsystem "SFP Send" {
                    layout = dynamic
                    require = "sw_sfp_sim_link"
                    locked

                    component "core/SFP Send Internal" "SFP Send Internal" {
                        rx_device_id = "rx_device_id"
                        stream_id = "stream_id"
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 7936, 7920
                    ]

                    mask {
                        description = "Transmits data over the SFP port using the SFP Simulation Link protocol."
                        help_file = "sfp_link.html#sfp_link__section_chm_x25_22b"

                        rx_device_id {
                            label = "Destination device ID"
                            description = "Selects the destination device ID. Disregarded when frame header is disabled."
                            widget = combo
                            combo_values = dynamic
                            type = string
                            default_value = "0"

                            CODE property_value_changed
                                from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                sfp_internal = mdl.get_item("SFP Send Internal", comp_handle, ITEM_COMPONENT)
                                mdl.set_property_value(mdl.prop(sfp_internal, "rx_device_id"), new_value)
                            ENDCODE
                        }

                        high_speed_send {
                            label = "High speed SFP send"
                            widget = checkbox
                            description = "Allows sending high speed signals with a resolution equal to simulation step."
                            type = bool
                            default_value = "False"

                            CODE property_value_edited
                                from typhoon.import_path.handlers.sfp_send import dialog_dynamics

                                dialog_dynamics(mdl, container_handle)
                            ENDCODE

                            CODE property_value_changed
                                from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                from typhoon.import_path.handlers.sfp_send import create_sp_components, delete_sp_components, \
                                    create_hs_components, delete_hs_components

                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                sfp_internal = mdl.get_item("SFP Send Internal", comp_handle, ITEM_COMPONENT)
                                mdl.set_property_value(mdl.prop(sfp_internal, "high_speed_send"), new_value)

                                if new_value:
                                    delete_sp_components(mdl, container_handle)
                                    create_hs_components(mdl, container_handle)
                                else:
                                    create_sp_components(mdl, container_handle)
                                    delete_hs_components(mdl, container_handle)

                                mdl.refresh_icon(container_handle)
                            ENDCODE

                        }

                        execution_rate {
                            label = "Execution rate"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = 100e-6
                        }

                        number_of_variables {
                            label = "Number of signals to send"
                            description = "Number of signals to send"
                            widget = combo
                            combo_values = dynamic
                            type = string
                            group = "Data:2"
                            default_value = "1"

                            CODE property_value_edited
                                from typhoon.import_path.handlers.sfp_send import dialog_dynamics

                                dialog_dynamics(mdl, container_handle)
                            ENDCODE
                        }

                        signal_sel_1 {
                            label = "Signal 1 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_2 {
                            label = "Signal 2 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_3 {
                            label = "Signal 3 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_4 {
                            label = "Signal 4 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_5 {
                            label = "Signal 5 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_6 {
                            label = "Signal 6 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_7 {
                            label = "Signal 7 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_8 {
                            label = "Signal 8 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_9 {
                            label = "Signal 9 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_10 {
                            label = "Signal 10 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_11 {
                            label = "Signal 11 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_12 {
                            label = "Signal 12 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_13 {
                            label = "Signal 13 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_14 {
                            label = "Signal 14 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_15 {
                            label = "Signal 15 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_16 {
                            label = "Signal 16 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_17 {
                            label = "Signal 17 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_18 {
                            label = "Signal 18 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_19 {
                            label = "Signal 19 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_20 {
                            label = "Signal 20 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_21 {
                            label = "Signal 21 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_22 {
                            label = "Signal 22 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_23 {
                            label = "Signal 23 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_24 {
                            label = "Signal 24 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_25 {
                            label = "Signal 25 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_26 {
                            label = "Signal 26 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_27 {
                            label = "Signal 27 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_28 {
                            label = "Signal 28 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_29 {
                            label = "Signal 29 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_30 {
                            label = "Signal 30 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_31 {
                            label = "Signal 31 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        signal_sel_32 {
                            label = "Signal 32 selection"
                            description = "Choose signal"
                            widget = signal_chooser
                            group = "Data:2"
                            type = signal_reference
                            default_value = ""
                        }

                        stream_id {
                            label = "Stream ID"
                            description = "Stream ID"
                            widget = edit
                            type = uint
                            default_value = 0
                            nonvisible
                        }

                        _supported_platforms {
                            label = "Supported platforms"
                            description = "Supported platforms"
                            widget = edit
                            type = string
                            default_value = "['hil']"
                            nonvisible
                            vector
                        }

                        signal_names_dict {
                            label = "Signal names dict"
                            description = "Used to handle old signal names and ports"
                            widget = edit
                            type = string
                            default_value = "{}"
                            group = "Data:2"
                            nonvisible
                        }

                        configuration {
                            description = "Used to define received variables types"
                            label = "Variable configuration"
                            widget = edit
                            type = string
                            default_value = ""
                            group = "Data:2"

                            CODE property_value_changed
                                from typhoon.import_path.handlers.sfp_send import create_sp_components, delete_hs_components

                                high_speed_send = mdl.get_property_value(mdl.prop(container_handle, "high_speed_send"))
                                if not high_speed_send:
                                    create_sp_components(mdl, container_handle)
                                    delete_hs_components(mdl, container_handle)
                            ENDCODE
                        }

                        generate_configuration {
                            description = "Generate configuration through GUI"
                            label = ""
                            widget = button
                            type = string
                            default_value = "Generate configuration"
                            group = "Data:2"
                
                            CODE button_clicked
                                from typhoon.apps.schematic_editor.dialogs.sfp_send_dialog import generate_configuration

                                conf = mdl.get_property_disp_value(mdl.prop(container_handle, "configuration"))

                                if conf == "":
                                    conf = "[]" 
                                conf, signal_names_dict = generate_configuration(mdl, container_handle, conf)

                                if signal_names_dict:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "signal_names_dict"), str(signal_names_dict))
                                if conf:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "configuration"), str(conf))

                            ENDCODE
                        }

                        CODE init
                            from typhoon.apps.schematic_editor.dialogs.sfp_send_dialog import default_dict
                            from typhoon.import_path.handlers.combo_sync import combo_sync_ssl_device_ids
                            from typhoon.import_path.handlers.sfp_send import dialog_dynamics, get_max_var_num

                            dialog_dynamics(mdl, item_handle)

                            # Set the property combo values
                            combo_sync_ssl_device_ids(mdl, item_handle, ["rx_device_id"])

                            number_of_variables_prop_handle = mdl.prop(item_handle, "number_of_variables")
                            max_var = get_max_var_num(mdl) + 1

                            mdl.set_property_combo_values(number_of_variables_prop_handle, [str(x) for x in range(1, max_var)])

                            if mdl.get_property_value(number_of_variables_prop_handle) not in mdl.get_property_combo_values(number_of_variables_prop_handle):
                                mdl.set_property_value(number_of_variables_prop_handle, "1")

                            conf = mdl.get_property_value(mdl.prop(item_handle, "configuration"))

                            if not conf:
                                """
                                This part of the code handles backward compatibility
                                """
                                conf = [ default_dict ]

                            mdl.set_property_value(mdl.prop(item_handle, "configuration"), str(conf))
                        ENDCODE

                        CODE post_resolve
                            import typhoon.conf.hw.hardware as hw
                            from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID, ITEM_COMPONENT, ITEM_TERMINAL

                            hil_device = mdl.get_model_property_value("hil_device")
                            hil_cfg =  mdl.get_model_property_value("hil_configuration_id")
                            max_var = hw.get_fs_param(hw.SSL_ALLOWED_SP_VARS_PER_STREAM, hil_device, hil_cfg)

                            high_speed_send = mdl.get_property_value(mdl.prop(item_handle, "high_speed_send"))

                            variables_num = 0
                            conf_prop = mdl.prop(item_handle, "configuration")
                            sfp_internal_comp = mdl.get_item("SFP Send Internal", mdl.get_sub_level_handle(item_handle), ITEM_COMPONENT)
                            terminals = mdl.get_items(sfp_internal_comp, ITEM_TERMINAL)

                            for t in terminals:
                                variables_num += mdl.get_terminal_dimension(t)[0]
                            if variables_num > max_var and not high_speed_send:
                                mdl.error(
                                    f"Sum of all signal dimensions({variables_num}) must be less or equal to {max_var}.",
                                    kind=ERROR_PROPERTY_VALUE_INVALID,
                                    context=conf_prop
                                )
                        ENDCODE

                        CODE pre_compile
                            from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID
                            number_of_variables =  mdl.get_property_value(mdl.prop(item_handle, "number_of_variables"))
                            high_speed_send = mdl.get_property_value(mdl.prop(item_handle, "high_speed_send"))

                            if high_speed_send:
                                for i in range(int(number_of_variables)):
                                    signal_sel_prop_handle = mdl.prop(item_handle, f"signal_sel_{i+1}")
                                    signal = mdl.get_property_value(signal_sel_prop_handle)
                                    if signal:
                                        parent_type_name = signal.parent.type_name
                                        allowed_parents = ["el_voltage_msr", "el_current_msr"]

                                        if not parent_type_name in allowed_parents:
                                            mdl.error(
                                                "Only Voltage/Current Measurements are supported for sending though high speed SFP send.",
                                                kind=ERROR_PROPERTY_VALUE_INVALID,
                                                context=signal_sel_prop_handle
                                            )
                                            return
                                        elif signal.name == "comparator_output":
                                            mdl.error(
                                                "High speed SFP send does not support comparator signals from Voltage/Current Measurements.",
                                                kind=ERROR_PROPERTY_VALUE_INVALID,
                                                context=signal_sel_prop_handle
                                            )
                                            return
                                    else:
                                        mdl.error(
                                            f"Signal not selected.",
                                            kind=ERROR_PROPERTY_VALUE_INVALID,
                                            context=signal_sel_prop_handle
                                        )
                        ENDCODE
                    
                        CODE define_icon
                            high_speed_send = mdl.get_property_value(mdl.prop(item_handle, "high_speed_send"))
                    
                            if high_speed_send:
                                mdl.set_component_icon_image(item_handle, 'SFP_Send_HS.svg')
                            else:
                                mdl.set_component_icon_image(item_handle, 'SFP_Send_SP.svg')
                        ENDCODE
                    }
                }
                [
                    position = 8536, 8320
                    size = 128, 128
                ]

            }
                
                component Category "Egston" {
                    visible = "real_time"
                    component egston_sfp_internal                "Egston SFP Internal"               { visible = "dev" }

                    component Subsystem "Egston SFP Link" {
                        layout = dynamic
                        require = "hw_egston_sfp_link"
                        locked
        
                        component egston_sfp_internal "Egston SFP Internal1" {
                            csu_type = "CSU4G"
                            operation_mode = "Free_Amp_U"
                        }
                        [
                            position = 8192, 8192
                        ]
        
                        component src_voltage Vs1 {
                            addr=0
                            type = "user sfp"
                        }
                        [
                            position = 7920, 8384
                            rotation = right
                        ]
        
                        component src_voltage Vs2 {
                            addr = 2
                            type = "user sfp"
                        }
                        [
                            position = 8096, 8384
                            rotation = right
                        ]
        
                        component "core/Voltage Measurement" V1 {
                        }
                        [
                            position = 8016, 8384
                            rotation = right
                            size = 64, 32
                        ]
        
                        component "core/Voltage Measurement" V2 {
                        }
                        [
                            position = 8192, 8384
                            rotation = right
                            size = 64, 32
                        ]
        
                        component src_voltage Vs4 {
                            addr = 6
                            type = "user sfp"
                        }
                        [
                            position = 8464, 8384
                            rotation = right
                        ]
        
                        component src_voltage Vs3 {
                            addr = 4
                            type = "user sfp"
                        }
                        [
                            position = 8288, 8384
                            rotation = right
                        ]
        
                        component "core/Voltage Measurement" V3 {
                        }
                        [
                            position = 8384, 8384
                            rotation = right
                            size = 64, 32
                        ]
        
                        component "core/Voltage Measurement" V4 {
                        }
                        [
                            position = 8560, 8384
                            rotation = right
                            size = 64, 32
                        ]
        
                        component src_current Is1 {
                            addr = 1
                            type = "user sfp"
                        }
                        [
                            position = 7920, 8752
                            rotation = right
                        ]
        
                        component src_current Is2 {
                            addr = 3
                            type = "user sfp"
                        }
                        [
                            position = 8096, 8752
                            rotation = right
                        ]
        
                        component src_current Is3 {
                            addr = 5
                            type = "user sfp"
                        }
                        [
                            position = 8288, 8752
                            rotation = right
                        ]
        
                        component src_current Is4 {
                            addr = 7
                            type = "user sfp"
                        }
                        [
                            position = 8464, 8752
                            rotation = right
                        ]
        
                        component "core/Current Measurement" I1 {
                        }
                        [
                            position = 8016, 8752
                            rotation = right
                            size = 64, 32
                        ]
        
                        component "core/Current Measurement" I4 {
                        }
                        [
                            position = 8560, 8752
                            rotation = right
                            size = 64, 32
                        ]
        
                        component "core/Current Measurement" I3 {
                        }
                        [
                            position = 8384, 8752
                            rotation = right
                            size = 64, 32
                        ]
        
                        component "core/Current Measurement" I2 {
                        }
                        [
                            position = 8192, 8752
                            rotation = right
                            size = 64, 32
                        ]
        
                        port sfp_reset_n {
                            position = left bottom
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8040, 8240
                        ]
        
                        port link_status {
                            position = right center
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8344, 8192
                        ]
        
                        port pwm_enable {
                            position = left top
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8040, 8144
                        ]
        
                        port Port1 {
                            position = bottom left
                            kind = pe
                        }
                        [
                            position = 7872, 8576
                        ]
        
                        junction Junction1 pe
                        [
                            position = 7920, 8424
                        ]
        
                        junction Junction3 pe
                        [
                            position = 8096, 8424
                        ]
        
                        junction Junction4 pe
                        [
                            position = 8016, 8424
                        ]
        
                        junction Junction8 pe
                        [
                            position = 8384, 8424
                        ]
        
                        junction Junction9 pe
                        [
                            position = 8288, 8424
                        ]
        
                        junction Junction10 pe
                        [
                            position = 8192, 8424
                        ]
        
                        junction Junction11 pe
                        [
                            position = 8560, 8424
                        ]
        
                        junction Junction12 pe
                        [
                            position = 8464, 8424
                        ]
        
                        junction Junction13 pe
                        [
                            position = 7920, 8808
                        ]
        
                        junction Junction14 pe
                        [
                            position = 8016, 8808
                        ]
        
                        junction Junction15 pe
                        [
                            position = 8096, 8808
                        ]
        
                        junction Junction16 pe
                        [
                            position = 8192, 8808
                        ]
        
                        junction Junction17 pe
                        [
                            position = 8288, 8808
                        ]
        
                        junction Junction18 pe
                        [
                            position = 8384, 8808
                        ]
        
                        junction Junction19 pe
                        [
                            position = 8464, 8808
                        ]
        
                        junction Junction20 pe
                        [
                            position = 8560, 8808
                        ]
        
                        connect "Egston SFP Internal1.pwm_enable" pwm_enable as Connection0
                        connect "Egston SFP Internal1.reset_sfp" sfp_reset_n as Connection1
                        connect "Egston SFP Internal1.link_status" link_status as Connection2
                        connect Vs1.n_node Junction1 as Connection5
                        connect Port1 Junction1 as Connection7
                        [
                            breakpoints = 7920, 8568; 7920, 8424
                        ]
                        connect V1.p_node Vs1.p_node as Connection8
                        connect V2.p_node Vs2.p_node as Connection10
                        connect Vs2.n_node Junction3 as Connection11
                        connect Junction1 Junction4 as Connection13
                        connect Junction4 V1.n_node as Connection14
                        connect Junction3 Junction4 as Connection15
                        connect V3.p_node Vs3.p_node as Connection18
                        connect V4.p_node Vs4.p_node as Connection19
                        connect Junction8 V3.n_node as Connection23
                        connect Vs3.n_node Junction9 as Connection25
                        connect Junction10 V2.n_node as Connection28
                        connect Junction9 Junction10 as Connection29
                        connect Junction8 Junction9 as Connection42
                        [
                            position = 0, 0
                            breakpoints = 8384, 8424; 8336, 8424
                        ]
                        connect Junction10 Junction3 as Connection46
                        [
                            position = 0, 0
                            breakpoints = 8192, 8424; 8144, 8424
                        ]
                        connect Junction8 Junction12 as Connection105
                        [
                            breakpoints = 8384, 8424
                        ]
                        connect Junction12 Vs4.n_node as Connection106
                        connect V4.n_node Junction11 as Connection107
                        connect Junction12 Junction11 as Connection134
                        connect Is1.p_node I1.p_node as Connection108
                        connect Is2.p_node I2.p_node as Connection109
                        connect Is3.p_node I3.p_node as Connection110
                        connect Is4.p_node I4.p_node as Connection111
                        connect Is1.n_node Junction13 as Connection113
                        connect Junction13 Junction1 as Connection114
                        connect Junction14 Junction13 as Connection117
                        connect I1.n_node Junction14 as Connection118
                        connect Junction15 Junction14 as Connection120
                        connect Is2.n_node Junction15 as Connection121
                        connect Junction16 Junction15 as Connection123
                        connect I2.n_node Junction16 as Connection124
                        connect Junction17 Junction16 as Connection126
                        connect Is3.n_node Junction17 as Connection127
                        connect Junction18 Junction17 as Connection129
                        connect I3.n_node Junction18 as Connection130
                        connect I4.n_node Junction20 as Connection131
                        connect Junction20 Junction19 as Connection135
                        connect Junction19 Junction18 as Connection132
                        connect Is4.n_node Junction19 as Connection133
        
        
                        mask {
                            icon = "image('SFP_protocol_egston.svg')"
                            description ="Transmits and receives data over Egston SFP port using Egston SFP Simulation Link protocol. The number of variables sent/received is defined by the CSU Type parameter."
        
                            hil_is_master {
                                label = "HIL is master"
                                description = "Select if HIL device is master."
                                widget = checkbox
                                type = bool
                                default_value = True
        
                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "hil_is_master"), new_value)
                                ENDCODE
        
                            }
        
                            csu_type {
                                label = "CSU type"
                                widget = combo
                                combo_values = "CSU4G", "CSU6G"
                                type = string
                                default_value = "CSU4G"
        
                                CODE property_value_edited
                                    from typhoon.import_path.handlers.egston_sfp_link import dialog_dynamics,components_resolving,set_combo_values
                                    set_combo_values(mdl, container_handle)
                                    dialog_dynamics(mdl, container_handle)
                                ENDCODE
        
                                CODE property_value_changed
                                    from typhoon.import_path.handlers.egston_sfp_link import dialog_dynamics,components_resolving,set_combo_values, set_sources_addresses
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    set_combo_values(mdl, container_handle)
                                    dialog_dynamics(mdl, container_handle)
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "csu_type"), new_value)
                                    components_resolving(mdl, container_handle, new_value)
                                    set_sources_addresses(mdl, container_handle, new_value)
                                    if new_value == "CSU4G":
                                        mdl.set_property_value(mdl.prop(container_handle, "signal_sel_5"), None)
                                        mdl.set_property_value(mdl.prop(container_handle, "signal_sel_6"), None)
                                        mdl.set_property_value(mdl.prop(container_handle, "number_of_variables"), 4)
                                    else:
                                        mdl.set_property_value(mdl.prop(container_handle, "number_of_variables"), 6)
                                ENDCODE
                            }
        
                            number_of_variables {
                                label = "Number of signals to send"
                                description = "Number of signals to send"
                                widget = edit
                                type = int
                                default_value = 4
                                nonvisible
        
                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "number_of_variables"), new_value)
                                ENDCODE
        
                            }
        
                            operation_mode {
                                label = "Operation mode"
                                widget = combo
                                combo_values = dynamic
                                type = string
                                default_value = "Free Amp-U"
        
                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "operation_mode"), new_value)
                                ENDCODE
                            }
        
                            signal_sel_1 {
                                label = "Send channel 1 signal"
                                description = "Choose signal"
                                widget = signal_chooser
                                type = signal_reference
                                default_value = ""
        
                                CODE property_value_edited
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_1"), new_value)
                                ENDCODE
        
                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    old_value = mdl.get_property_disp_value(mdl.prop(container_handle, "signal_sel_1"))
                                    new_value = new_value if not new_value == None else old_value
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_1"), new_value)
                                ENDCODE
                            }
        
                            signal_sel_2 {
                                label = "Send channel 2 signal"
                                description = "Choose signal"
                                widget = signal_chooser
                                type = signal_reference
                                default_value = ""
        
                                CODE property_value_edited
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_2"), new_value)
                                ENDCODE
        
                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    old_value = mdl.get_property_disp_value(mdl.prop(container_handle, "signal_sel_2"))
                                    new_value = new_value if not new_value == None else old_value
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_2"), new_value)
                                ENDCODE
                            }
        
                            signal_sel_3 {
                                label = "Send channel 3 signal"
                                description = "Choose signal"
                                widget = signal_chooser
                                type = signal_reference
                                default_value = ""
        
                                CODE property_value_edited
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_3"), new_value)
                                ENDCODE
        
                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    old_value = mdl.get_property_disp_value(mdl.prop(container_handle, "signal_sel_3"))
                                    new_value = new_value if not new_value == None else old_value
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_3"), new_value)
                                ENDCODE
                            }
        
                            signal_sel_4 {
                                label = "Send channel 4 signal"
                                description = "Choose signal"
                                widget = signal_chooser
                                type = signal_reference
                                default_value = ""
        
                                CODE property_value_edited
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_4"), new_value)
                                ENDCODE
        
                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    old_value = mdl.get_property_disp_value(mdl.prop(container_handle, "signal_sel_4"))
                                    new_value = new_value if not new_value == None else old_value
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_4"), new_value)
                                ENDCODE
                            }
        
                            signal_sel_5 {
                                label = "Send channel 5 signal"
                                description = "Choose signal"
                                widget = signal_chooser
                                type = signal_reference
                                default_value = ""
        
                                CODE property_value_edited
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_5"), new_value)
                                ENDCODE
        
                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    old_value = mdl.get_property_disp_value(mdl.prop(container_handle, "signal_sel_5"))
                                    new_value = new_value if not new_value == None else old_value
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_5"), new_value)
                                ENDCODE
                            }
        
                            signal_sel_6 {
                                label = "Send channel 6 signal"
                                description = "Choose signal"
                                widget = signal_chooser
                                type = signal_reference
                                default_value = ""
        
                                CODE property_value_edited
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_6"), new_value)
                                ENDCODE
        
                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    old_value = mdl.get_property_disp_value(mdl.prop(container_handle, "signal_sel_6"))
                                    new_value = new_value if not new_value == None else old_value
                                    egston_internal = mdl.get_item("Egston SFP Internal1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(egston_internal, "signal_sel_6"), new_value)
                                ENDCODE
                            }
        
                            execution_rate {
                                label = "Execution rate"
                                previous_names = "timer_interval"
                                description = "Signal processing execution rate"
                                widget = edit
                                type = real
                                min_value = .1e-9
                                default_value = 100e-6
                            }
        
                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }
                        }
        
        
                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
        
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
        
                            ENDCODE
        
                            CODE init
                                from typhoon.import_path.handlers.egston_sfp_link import set_combo_values
                                set_combo_values(mdl, item_handle)
                            ENDCODE
        
        
                            CODE pre_compile
                                from typhoon.import_path.handlers.egston_sfp_link import validate_send_signals
                                prop_not_selected_signal, validate_signals = validate_send_signals(mdl, item_handle)
                                if not validate_signals:
                                    mdl.error(
                                        "All signals to be sent must be selected.",
                                        kind=api_const.ERROR_PROPERTY_VALUE_INVALID,
                                        context=mdl.prop(item_handle, prop_not_selected_signal)
                                    )
                                return
        
                            ENDCODE
        
                    }
                    [
                        size = 168, 120
                    ]
                }


            component Category "SPI" {
                visible = "real_time"

                component Subsystem "SPI Slave" {
                    layout = dynamic

                    require = "hw_gpio"

                    mask {
                        icon = "image('spi_slave.svg')"
                        help_file = "spi_protocol.html#spi_protocol__section_atp_kcz_xvb"
                        description = "Transmit data using SPI PS through GPIO port"

                        hil_id {
                            description = "ID of the device on which this component will be executed"
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        execution_rate {
                            label = "Execution rate"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = 100e-6
                            group = "General:1"
                        }

                        operating_mode {
                            label = "Operating mode"
                            description = "SPI operating mode"
                            type = string
                            widget = combo
                            combo_values = 'Master', 'Slave'
                            default_value = 'Slave'
                            group = "General:1"
                            nonvisible
                        }

                        spi_sample_mode {
                            label = "SPI mode"
                            description = "Spi mode defines clock polarity and phase"
                            type = string
                            widget = combo
                            combo_values = '0', '1', '2', '3'
                            default_value = '0'
                            group = "General:1"
                        }

                        mosi {
                            label = "MOSI pin"
                            description = "Defines which GPIO pin will be used as MOSI line."
                            widget = combo
                            combo_values = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"
                            type = string
                            default_value = "1"
                        }
                        
                        miso {
                            label = "MISO pin"
                            description = "Defines which GPIO pin will be used as MISO line."
                            widget = combo
                            combo_values = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"
                            type = string
                            default_value = "2"
                        }
                        
                        sclk {
                            label = "SPI clock pin"
                            description = "Defines which GPIO pin will be used as SCLK line."
                            widget = combo
                            combo_values = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"
                            type = string
                            default_value = "3"
                        }
                        
                        cs {
                            label = "Chip select pin"
                            description = "Defines which GPIO pin will be used as CS line."
                            widget = combo
                            combo_values = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"
                            type = string
                            default_value = "4"
                        }

                        default_return {
                            label = "Default return"
                            description = "This value is sent for every byte that is not reserved for register data"
                            type = string
                            widget = edit
                            default_value = "0x00"
                            group = "Message:2"
                        }

                        message_write_frame {
                            label = "Write frame"
                            description = "Message write frame"
                            widget = edit
                            type = string
                            default_value = "[{'part': 'Command', 'length': 8, 'start_bit': 0, 'logic': '==', 'value': 0}, {'part': 'Address', 'length': 8, 'start_bit': 8, 'logic': '==', 'value': 0}, {'part': 'Register data', 'length': 16, 'start_bit': 16, 'logic': '==', 'value': 0}]"
                            group = "Message:2"
                        }

                        message_read_frame {
                            label = "Read frame"
                            description = "Message read frame"
                            widget = edit
                            type = string
                            default_value = "[{'part': 'Command', 'length': 8, 'start_bit': 0, 'logic': '==', 'value': 255}, {'part': 'Address', 'length': 8, 'start_bit': 8, 'logic': '==', 'value': 0}]"
                            group = "Message:2"
                        }

                        message_out {
                            label = "Message output"
                            description = "Message output structure"
                            widget = edit
                            type = string
                            default_value = "[{'part': 'Register data', 'length': 16, 'start_bit': 16, 'logic': '==', 'value': 0}]"
                            group = "Message:2"
                        }

                        output_type {
                            label = "Receive output"
                            description = "Define output type"
                            widget = combo
                            type = string
                            combo_values = "as part of read frame", "in new message"
                            default_value = "as part of read frame"
                            group = "Message:2"
                            keepline
                        }

                        generate_message_structure {
                            description = "Generate message structure through GUI"
                            label = ""
                            widget = button
                            type = string
                            default_value = "Generate message structure"
                            group = "Message:2"

                            CODE button_clicked
                                from typhoon.apps.schematic_editor.dialogs.spi_slave_message_dialog import generate_message_structure

                                write_frame = mdl.get_property_disp_value(mdl.prop(container_handle, "message_write_frame"))
                                read_frame = mdl.get_property_disp_value(mdl.prop(container_handle, "message_read_frame"))
                                output = mdl.get_property_disp_value(mdl.prop(container_handle, "message_out"))

                                write_frame, read_frame, output = generate_message_structure(mdl, container_handle, write_frame, read_frame, output)

                                if write_frame:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "message_write_frame"), str(write_frame))
                                if read_frame:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "message_read_frame"), str(read_frame))
                                if output:
                                   mdl.set_property_disp_value(mdl.prop(container_handle, "message_out"), str(output))
                            ENDCODE
                        }

                        registers {
                            label = "Registers"
                            description = "User registers definition"
                            widget = edit
                            type = string
                            default_value = "[{'signal_name': 'signal0', 'register_address': '0x00', 'io_type': 'in', 'signal_type': 'variable', 'register_value': 'From input port', 'data_type': 'int', 'length': '1', 'endianness': 'little_endian'}, {'signal_name': 'signal1', 'register_address': '0x00', 'io_type': 'out', 'signal_type': 'variable', 'register_value': '0', 'data_type': 'int', 'length': '1', 'endianness': 'little_endian'}, {'signal_name': 'signal2', 'register_address': '0x00', 'io_type': 'out', 'signal_type': 'constant', 'register_value': '0', 'data_type': 'int', 'length': '1', 'endianness': 'little_endian'}]"
                            group = "Registers:3"

                            CODE property_value_changed
                                from typhoon.import_path.handlers.spi_slave import create_internal_components

                                regs = mdl.get_property_value(mdl.prop(container_handle, "registers"))
                                regs = eval(regs)
                                register_names_dict = mdl.get_property_disp_value(mdl.prop(container_handle, "register_names_dict"))

                                create_internal_components(mdl, container_handle, regs, register_names_dict)

                                mdl.set_property_disp_value(mdl.prop(container_handle, "register_names_dict"), "{}")
                            ENDCODE
                        }

                        register_names_dict
                        {
                            label = "Signal names dict"
                            description = "Used to handle old Signal names and Ports"
                            widget = edit
                            type = string
                            default_value = "{}"
                            group = "Data:3"
                            nonvisible
                        }

                        generate_registers {
                            description = "Generate registers through GUI"
                            label = ""
                            widget = button
                            type = string
                            default_value = "Generate registers"
                            group = "Registers:3"

                            CODE button_clicked
                                from typhoon.apps.schematic_editor.dialogs.spi_slave_registers_dialog import generate_registers

                                conf = mdl.get_property_disp_value(mdl.prop(container_handle, "registers"))
                                message_write_frame = mdl.get_property_disp_value(mdl.prop(container_handle, "message_write_frame"))

                                for part in eval(message_write_frame):
                                    if part["part"] == "Address":
                                        address_length = part["length"]

                                if conf == "":
                                    conf = "[]"
                                conf, register_names_dict_new = generate_registers(mdl, container_handle, conf, address_length)

                                if conf:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "registers"), str(conf))
                                if register_names_dict_new:
                                    register_names_dict = eval(mdl.get_property_disp_value(mdl.prop(container_handle, "register_names_dict")))
                                    register_names_dict.update(register_names_dict_new)
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "register_names_dict"), str(register_names_dict))

                            ENDCODE
                        }

                        saved_hil_device_config {
                            label = "Saved SPI configuration per device"
                            description = "Saved dictionary of all SPI configurations for all devices"
                            widget = edit
                            type = string
                            default_value = ""

                            no_evaluate
                            nonvisible
                        }

                        CODE init
                            operating_mode = mdl.prop(item_handle, "operating_mode")
                            mdl.disable_property(operating_mode)
                        ENDCODE

                        CODE pre_validate
                            from typhoon.import_path.handlers.spi_slave import pre_validate

                            write_frame = mdl.get_property_disp_value(mdl.prop(item_handle, "message_write_frame"))
                            read_frame = mdl.get_property_disp_value(mdl.prop(item_handle, "message_read_frame"))
                            out = mdl.get_property_disp_value(mdl.prop(item_handle, "message_out"))
                            registers = mdl.get_property_disp_value(mdl.prop(item_handle, "registers"))
                            default_return = mdl.get_property_disp_value(mdl.prop(item_handle, "default_return"))

                            for part in eval(write_frame):
                                if part["part"] == "Address":
                                    address_length = part["length"]

                            err_message, err_component, warning = pre_validate(write_frame, read_frame, out, registers,
                                                                                address_length, default_return)

                            if err_message:
                                if warning:
                                    for i in range(len(err_message)):
                                        mdl.warning(
                                            err_message[i],
                                            kind=api_const.WARNING_GENERAL,
                                            context=mdl.prop(item_handle, err_component[i])
                                        )
                                else:
                                    mdl.error(
                                        err_message,
                                        kind=api_const.ERROR_PROPERTY_VALUE_INVALID,
                                        context=mdl.prop(item_handle, err_component)
                                    )
                                    return
                        ENDCODE
                    }

                }
                [
                    size = 128, 128
                ]
            }

            component Category "Ethernet Variable Exchange" {
                visible = "real_time"

                component eth_ve_setup  "ETH VE Setup"    { }

                component Subsystem "ETH VE Send"  {

                    layout = dynamic
                    previous_names = "eth_ve_setup"
                    require = "sw_eth_ve"



                    mask {
                        icon = "image('ETH_VE_Send.svg')"
                        help_file = "ethernet_variable_exchange.html#ethernet_variable_exchange__section_chm_x25_22b"

                        description = "Transmits data over Ethernet port using Ethernet Variable Exchange protocol. Both UDP and TCP/IP carrier layers are supported. Number and types of variables and constants to be sent is defined by the Configuration parameter in the Data submenu."

                        hil_id {
                            description = "ID of the device on which this component will be executed"
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        protocol {
                            label = "Protocol"
                            description = "Selection of the communication protocol."
                            type = string
                            widget = combo
                            combo_values = "UDP", "TCP/IP"
                            default_value = "UDP"
                            group = "Network:2"
                        }

                        endianness {
                            label = "Endianness"
                            description = "Order of the bytes in the word."
                            type = string
                            widget = combo
                            combo_values = "Little Endian", "Big Endian"
                            default_value = "Little Endian"
                            group = "Data:3"
                            nonvisible
                        }

                        specify_local_port {
                            label = "Specify local send port"
                            description = "Specify the port from which a message is sent."
                            type = bool
                            widget = checkbox
                            default_value = False
                            group = "Network:2"

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "specify_local_port", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "specify_local_port", new_value)

                            ENDCODE
                        }

                        local_send_port {
                            label = "Local send port"
                            description = "A port from which a message is sent."
                            type = uint
                            widget = edit
                            min_value = 0
                            max_value = 65536
                            default_value = 55055
                            group = "Network:2"
                        }

                        dest_ip {
                            label = "Destination IP address"
                            description = "A destination IP address is the IP address to which a message is sent."
                            type = string
                            widget = edit
                            default_value = "192.168.0.1"
                            no_evaluate
                            group = "Network:2"
                        }

                        destination_port {
                            label = "Destination port"
                            description = "A destination port is the port to which a message is sent."
                            widget = edit
                            type = uint
                            min_value = 0
                            max_value = 65536
                            default_value = 55000
                            group = "Network:2"
                        }

                        stream_source {
                            description = "Chose if the component will generate new data stream or the data will be a part of the existing message."
                            label = "Stream source"
                            widget = combo
                            type = string
                            combo_values = "New data stream", "Append to existing data stream"
                            default_value = "New data stream"
                            group = "General:1"

                            CODE property_value_edited
                                dialog_dynamics(mdl, container_handle, "stream_source", new_value)
                            ENDCODE

                            CODE property_value_changed
                                dialog_dynamics(mdl, container_handle, "stream_source", new_value)
                            ENDCODE
                        }

                        stream_source_id {
                            description = "Stream source ID number"
                            label = "Stream source ID"
                            type = int
                            widget = edit
                            default_value = 1000
                            min_value = 1
                            max_value = 65534
                            group = "General:1"
                        }

                        append_index {
                            description = "Index value will determine the order in which ETH VE data is sorted in the message"
                            label = "Append index"
                            widget = combo
                            type = string
                            combo_values = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"
                            default_value = "1"
                            group = "General:1"
                        }

                        choose_stream_source {
                            description = "Chose to which data stream to append ETH VE Send data"
                            label = "Choose existing stream"
                            widget = combo
                            type = string
                            combo_values = dynamic
                            default_value = ""
                            group = "General:1"
                        }

                        sample_time {
                            label = "Sample time"
                            description = "Input Sampling time."
                            type = real
                            widget = edit
                            default_value = 1e-3
                            group = "General:1"
                        }

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = inherit
                            group = "General:1"
                        }

                        number_of_inputs{
                            label = "Number of variables"
                            description = "Number of variables to send over ETH."
                            type = uint
                            widget = edit
                            min_value = 1
                            max_value = 350
                            default_value = 1
                            nonvisible
                        }

                        configuration {
                            label = "Configuration"
                            description = "Configuration for ETH payload"
                            widget = edit
                            type = string
                            default_value = ""
                            group = "Data:3"

                            CODE property_value_changed
                                from typhoon.import_path.handlers.eth_send import create_internal_components

                                execution_rate = mdl.get_property_value(mdl.prop(container_handle, "execution_rate"))
                                conf = mdl.get_property_value(mdl.prop(container_handle, "configuration"))
                                conf = eval(conf)
                                signal_names_dict = mdl.get_property_disp_value(mdl.prop(container_handle, "signal_names_dict"))

                                create_internal_components(mdl, container_handle, conf, signal_names_dict)

                                mdl.set_property_disp_value(mdl.prop(container_handle, "signal_names_dict"), "{}")
                            ENDCODE

                        }

                        signal_names_dict {
                            label = "Signal names dict"
                            description = "Used to handle old Signal names and Ports"
                            widget = edit
                            type = string
                            default_value = "{}"
                            group = "Data:3"
                            nonvisible

                        }


                        generate_configuration {
                            description = "Generate configuration through GUI"
                            label = ""
                            widget = button
                            type = string
                            default_value = "Generate configuration"
                            group = "Data:3"

                            CODE button_clicked
                                from typhoon.apps.schematic_editor.dialogs.eth_send_dialog import generate_configuration

                                conf = mdl.get_property_disp_value(mdl.prop(container_handle, "configuration"))

                                if conf == "":
                                    conf = "[]"
                                conf, signal_names_dict_new = generate_configuration(mdl, container_handle, conf)

                                if conf:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "configuration"), str(conf))
                                if signal_names_dict_new:
                                    signal_names_dict = eval(mdl.get_property_disp_value(mdl.prop(container_handle, "signal_names_dict")))
                                    signal_names_dict.update(signal_names_dict_new)
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "signal_names_dict"), str(signal_names_dict))

                            ENDCODE
                        }

                        _supported_platforms {
                            label = "Supported platforms"
                            description = "Supported platforms"
                            widget=edit
                            type = string
                            default_value = "['hil']"
                            nonvisible
                            vector
                        }

                        CODE init

                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                            from typhoon.apps.schematic_editor.dialogs.eth_send_dialog import default_dict
                            from typhoon.import_path.handlers.eth_send import create_internal_components


                            def dialog_dynamics(mdl, mask_handle, prop_name, new_value):
                                if prop_name == "specify_local_port":
                                    local_send_port = mdl.prop(mask_handle, "local_send_port")

                                    if new_value:
                                        mdl.enable_property(local_send_port)
                                    else:
                                        mdl.disable_property(local_send_port)

                                if prop_name == "stream_source":
                                    stream_source_id = mdl.prop(mask_handle, "stream_source_id")
                                    choose_stream_source = mdl.prop(mask_handle, "choose_stream_source")
                                    append_index = mdl.prop(mask_handle, "append_index")
                                    protocol = mdl.prop(mask_handle, "protocol")
                                    specify_local_port = mdl.prop(mask_handle, "specify_local_port")
                                    local_send_port = mdl.prop(mask_handle, "local_send_port")
                                    dest_ip = mdl.prop(mask_handle, "dest_ip")
                                    destination_port = mdl.prop(mask_handle, "destination_port")

                                    if new_value == "New data stream":
                                        mdl.show_property(stream_source_id)
                                        mdl.hide_property(choose_stream_source)
                                        mdl.disable_property(append_index)
                                        mdl.set_property_combo_values(append_index, ["1"])

                                        mdl.enable_property(protocol)
                                        mdl.enable_property(specify_local_port)
                                        mdl.enable_property(local_send_port)
                                        mdl.enable_property(dest_ip)
                                        mdl.enable_property(destination_port)
                                    else:
                                        mdl.hide_property(stream_source_id)
                                        mdl.show_property(choose_stream_source)
                                        mdl.enable_property(append_index)
                                        if mdl.get_property_value(append_index) == "1":
                                            mdl.set_property_value(append_index, "2")
                                        mdl.set_property_combo_values(append_index, [str(val) for val in range(2,21)])

                                        mdl.disable_property(protocol)
                                        mdl.disable_property(specify_local_port)
                                        mdl.disable_property(local_send_port)
                                        mdl.disable_property(dest_ip)
                                        mdl.disable_property(destination_port)


                                    from typhoon.import_path.handlers.eth_send import get_stream_id_values

                                    stream_id_values = get_stream_id_values(mdl, mask_handle)

                                    mdl.set_property_combo_values(choose_stream_source, stream_id_values)

                            conf = mdl.get_property_value(mdl.prop(item_handle, "configuration"))
                            endianess = mdl.get_property_value(mdl.prop(item_handle, "endianness"))

                            if endianess == 'Big Endian':
                                endianess = 'big_endian'
                            else:
                                endianess = 'little_endian'

                            if not conf:
                                """
                                This part of the code handles backward compatibility
                                """
                                conf = [ default_dict ]

                                conf[0]["endianess"] = endianess

                            mdl.set_property_value(mdl.prop(item_handle, "configuration"), str(conf))

                            create_internal_components(mdl, item_handle, conf)
                        ENDCODE

                        CODE pre_validate
                            from typhoon.utilities.ip_address import is_ip_address_valid
                            from typhoon.util.math_functions import is_number
                            from typhoon.api.schematic_editor.exception import SchApiException

                            from typhoon.apps.schematic_editor.dialogs.eth_send_dialog import check_dict, \
                                literal_eval, errors_dict

                            conf = mdl.get_property_value(mdl.prop(item_handle, "configuration"))
                            conf = literal_eval(conf)

                            val_error = check_dict(conf)
                            if val_error:
                                mdl.error(
                                    errors_dict[str(val_error)],
                                    kind=api_const.ERROR_PROPERTY_VALUE_INVALID,
                                    context=mdl.prop(item_handle, "configuration")
                                )
                                return

                            ip_str = mdl.get_property_value(mdl.prop(item_handle, "dest_ip"))

                            valid = is_ip_address_valid(ip_str)

                            if not valid:
                                if is_number(ip_str[0]):
                                    mdl.error(
                                        "Value for IP address should look like xxx.xxx.xxx.xxx, where xxx is number between 0 and 255!",
                                        kind=api_const.ERROR_PROPERTY_VALUE_INVALID,
                                        context=mdl.prop(item_handle, "dest_ip")
                                    )
                                    return
                                else:
                                    try:
                                        ip_from_namespace = mdl.get_ns_var(ip_str)
                                        valid = is_ip_address_valid(ip_from_namespace)
                                        if not valid:
                                            mdl.error(
                                                "Value for IP address should look like xxx.xxx.xxx.xxx, where xxx is number between 0 and 255!",
                                                kind=api_const.ERROR_PROPERTY_VALUE_INVALID,
                                                context=mdl.prop(item_handle, "dest_ip")
                                            )
                                            return
                                        ip_str = ip_from_namespace
                                    except KeyError:
                                        mdl.error(
                                            "Variable '%s' is not defined in the namespace!" % ip_str,
                                            kind=api_const.ERROR_PROPERTY_VALUE_INVALID,
                                            context=mdl.prop(item_handle, "dest_ip")
                                        )
                                        return

                            # By splitting the ip_str by dot, we create the list of strings.
                            # For example "192.168.0.0" -> [u"192", u"168", u"0", u"0"]
                            dest_ip = ip_str.split(".")
                        ENDCODE

                        CODE post_resolve

                            from typhoon.conf.hw import platforms, hardware

                            device = mdl.get_model_property_value("hil_device")
                            eth_ve_max_input_size =\
                                hardware.get_sp_platform_param(hardware.ETH_VE_MAX_INPUT_SIZE, device, platforms.COMM_CPU)
                            comp_handle = mdl.get_sub_level_handle(item_handle)

                            sys_out = mdl.get_item("sys_out", parent=comp_handle, item_type=api_const.ITEM_COMPONENT)
                            input_size = mdl.get_terminal_dimension(mdl.term(sys_out, "in"))[0]
                            if input_size > eth_ve_max_input_size:
                                mdl.error(
                                    "Input size of %s must be less than %s" % (mdl.get_fqn(comp_handle), eth_ve_max_input_size),
                                    kind=ERROR_GENERAL,
                                    context=comp_handle
                                )
                                return
                        ENDCODE
                    }

                }
                [
                    size = 64, 64
                ]

                component Subsystem "ETH VE Receive"  {

                    layout = dynamic
                    previous_names = "eth_ve_receive"
                    require = "sw_eth_ve"


                    mask {
                        icon = "image('ETH_VE_Receive.svg')"
                        help_file = "ethernet_variable_exchange.html#ethernet_variable_exchange__section_rtv_gb5_22b"

                        description = "Receives data over Ethernet port using Ethernet Variable Exchange protocol. Both UDP and TCP/IP carrier layers are supported. Number and types of variables to be received is defined by the Configuration parameter in the Data submenu."

                        hil_id {
                            description = "ID of the device on which this component will be executed"
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        number_of_inputs{
                            label = "Number of input variables"
                            description = "Number of input variables from the remote source."
                            type = uint
                            widget = edit
                            min_value = 1
                            max_value = 350
                            default_value = 1
                            nonvisible
                            group = "Data:3"
                        }

                        input_type {
                            label = "Input variable data type"
                            description = "Input variable data type."
                            widget = combo
                            combo_values = "real", "int", "uint"
                            default_value = "real"
                            type = string
                            nonvisible
                            group = "Data:3"
                        }


                        protocol {
                            label = "Protocol"
                            description = "Selection of the communication protocol."
                            type = string
                            widget = combo
                            combo_values = "UDP", "TCP/IP"
                            default_value = "UDP"
                            group = "Network:2"
                        }

                        endianness {
                            label = "Endianness"
                            description = "Order of the bytes in the word."
                            type = string
                            widget = combo
                            combo_values = "Little Endian", "Big Endian"
                            default_value = "Little Endian"
                            group = "Data:3"
                            nonvisible
                        }

                        local_receive_port {
                            label = "Local receive port"
                            description = "The port on which a message is received."
                            widget = edit
                            type = uint
                            min_value = 0
                            max_value = 65536
                            default_value = 55000
                            group = "Network:2"
                        }

                        specify_remote_port {
                            label = "Specify source port"
                            description = "Specify the source port from which a message is received."
                            type = bool
                            widget = checkbox
                            default_value = False
                            group = "Network:2"

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "specify_remote_port", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "specify_remote_port", new_value)

                            ENDCODE
                        }

                        remote_connection_port {
                            label = "Source port"
                            description = "A source port is the port from which a message is received."
                            widget = edit
                            type = uint
                            min_value = 0
                            max_value = 65536
                            default_value = 55055
                            group = "Network:2"
                        }

                        specify_remote_ip {
                            label = "Specify source IP address"
                            description = "Specify the source IP address from which a message is received."
                            type = bool
                            widget = checkbox
                            default_value = False
                            group = "Network:2"

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "specify_remote_ip", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "specify_remote_ip", new_value)

                            ENDCODE
                        }

                        src_ip {
                            label = "Source IP address"
                            description = "A source IP address is the IP address from wich a message is received."
                            type = string
                            widget = edit
                            default_value = "192.168.0.1"
                            no_evaluate
                            group = "Network:2"
                        }

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = 100e-6
                            group = "General:1"
                        }

                        configuration {
                            label = "Configuration"
                            description = "Configuration for ETH payload"
                            widget = edit
                            type = string
                            default_value = ""
                            group = "Data:3"

                            CODE property_value_changed
                                from typhoon.import_path.handlers.eth_receive import create_internal_components

                                execution_rate = mdl.get_property_value(mdl.prop(container_handle, "execution_rate"))
                                conf = mdl.get_property_value(mdl.prop(container_handle, "configuration"))
                                conf = eval(conf)
                                signal_names_dict = mdl.get_property_disp_value(mdl.prop(container_handle, "signal_names_dict"))

                                create_internal_components(mdl, container_handle, conf, execution_rate, signal_names_dict)

                                mdl.set_property_disp_value(mdl.prop(container_handle, "signal_names_dict"), "{}")
                            ENDCODE

                        }

                        signal_names_dict
                        {
                            label = "Signal names dict"
                            description = "Used to handle old Signal names and Ports"
                            widget = edit
                            type = string
                            default_value = "{}"
                            group = "Data:3"
                            nonvisible

                        }

                        generate_configuration {
                            description = "Generate configuration through GUI"
                            label = ""
                            widget = button
                            type = string
                            default_value = "Generate configuration"
                            group = "Data:3"

                            CODE button_clicked
                                from typhoon.apps.schematic_editor.dialogs.eth_receive_dialog import generate_configuration

                                conf = mdl.get_property_disp_value(mdl.prop(container_handle, "configuration"))
                                execution_rate = mdl.get_property_value(mdl.prop(container_handle, "execution_rate"))

                                if conf == "":
                                    conf = "[]"
                                conf, signal_names_dict_new = generate_configuration(mdl, container_handle, conf)

                                if conf:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "configuration"), str(conf))
                                if signal_names_dict_new:
                                    signal_names_dict = eval(mdl.get_property_disp_value(mdl.prop(container_handle, "signal_names_dict")))
                                    signal_names_dict.update(signal_names_dict_new)
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "signal_names_dict"), str(signal_names_dict))

                            ENDCODE
                        }

                        _supported_platforms {
                            label = "Supported platforms"
                            description = "Supported platforms"
                            widget=edit
                            type = string
                            default_value = "['hil']"
                            nonvisible
                            vector
                        }

                        CODE init
                            from typhoon.apps.schematic_editor.dialogs.eth_receive_dialog import default_dict
                            from typhoon.import_path.handlers.eth_receive import create_internal_components

                            execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))


                            def dialog_dynamics(mdl, mask_handle, prop_name, new_value):
                                if prop_name == "specify_remote_ip":
                                    src_ip = mdl.prop(mask_handle, "src_ip")

                                    if new_value:
                                        mdl.enable_property(src_ip)
                                    else:
                                        mdl.disable_property(src_ip)

                                elif "specify_remote_port":
                                    remote_connection_port = mdl.prop(mask_handle, "remote_connection_port")

                                    if new_value:
                                        mdl.enable_property(remote_connection_port)
                                    else:
                                        mdl.disable_property(remote_connection_port)


                            conf = mdl.get_property_value(mdl.prop(item_handle, "configuration"))
                            endianess = mdl.get_property_value(mdl.prop(item_handle, "endianness"))
                            input_type = mdl.get_property_value(mdl.prop(item_handle, "input_type"))
                            number_of_inputs = mdl.get_property_value(mdl.prop(item_handle, "number_of_inputs"))

                            if endianess == 'Big Endian':
                                endianess = 'big_endian'
                            else:
                                endianess = 'little_endian'

                            if not conf:
                                """
                                This part of the code handles backward compatibility
                                """
                                conf = [default_dict]

                                conf[0]["endianess"] = endianess
                                conf[0]["dimension"] = str(number_of_inputs)
                                conf[0]["data_type"] = input_type


                            mdl.set_property_value(mdl.prop(item_handle, "configuration"), str(conf))

                            create_internal_components(mdl, item_handle, conf, execution_rate)

                        ENDCODE

                        CODE pre_validate
                            from typhoon.utilities.ip_address import is_ip_address_valid
                            from typhoon.util.math_functions import is_number
                            from typhoon.api.schematic_editor.exception import SchApiException
                            from typhoon.apps.schematic_editor.dialogs.eth_receive_dialog import check_dict, \
                                literal_eval, errors_dict

                            ip_str = mdl.get_property_value(mdl.prop(item_handle, "src_ip"))

                            valid = is_ip_address_valid(ip_str)

                            if not valid:
                                if is_number(ip_str[0]):
                                    mdl.error(
                                        "Value for IP address should look like xxx.xxx.xxx.xxx, where xxx is number between 0 and 255!",
                                        kind=api_const.ERROR_PROPERTY_VALUE_INVALID,
                                        context=mdl.prop(item_handle, "src_ip")
                                    )
                                    return
                                else:
                                    try:
                                        ip_from_namespace = mdl.get_nw_var(ip_str)
                                        valid = is_ip_address_valid(ip_from_namespace)
                                        if not valid:
                                            mdl.error(
                                                "Value for IP address should look like xxx.xxx.xxx.xxx, where xxx is number between 0 and 255!",
                                                kind=api_const.ERROR_PROPERTY_VALUE_INVALID,
                                                context=mdl.prop(item_handle, "src_ip")
                                            )
                                            return
                                        ip_str = ip_from_namespace
                                    except KeyError:
                                        mdl.error(
                                            "Variable '%s' is not defined in the namespace!" % ip_str,
                                            kind=api_const.ERROR_PROPERTY_VALUE_INVALID,
                                            context=mdl.prop(item_handle, "src_ip")
                                        )
                                        return

                            conf = mdl.get_property_value(mdl.prop(item_handle, "configuration"))
                            conf = literal_eval(conf)

                            val_error = check_dict(conf)
                            if val_error:
                                mdl.error(
                                    errors_dict[str(val_error)],
                                    kind=api_const.ERROR_PROPERTY_VALUE_INVALID,
                                    context=mdl.prop(item_handle, "configuration")
                                )
                                return

                            # By splitting the ip_str by dot, we create the list of strings.
                            # For example "192.168.0.0" -> [u"192", u"168", u"0", u"0"]
                            src_ip = ip_str.split(".")
                        ENDCODE

                    }

                }
                [
                    size = 64, 64
                ]

            }

            component Category "CAN" {
                visible = "real_time"

                component Category "CAN Bus" {
                    
                    component Subsystem "CAN Setup"{
                        layout = static
                        previous_names = "can_setup"
                        require = "sw_can_bus"

                        component "core/SP input" "can1_status_out" {
                            dimension = "1"
                            execution_rate = "execution_rate"
                        }
                        [ position = 8800, 7800 ]

                        component "core/SP input" "can2_status_out" {
                            dimension = "1"
                            execution_rate = "execution_rate"
                        }
                        [ position = 8800, 7900 ]

                        port out{
                            position = right top
                            label = "can1"
                            kind = sp
                            direction = in
                            sp_type {
                                supported = int, uint, real
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 9000, 7800 ]

                        port out1{
                            position = right bottom
                            label = "can2"
                            kind = sp
                            direction = in
                            sp_type {
                                supported = int, uint, real
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 9000, 7900 ]

                        connect "can1_status_out.out" out
                        connect "can2_status_out.out" out1

                        mask {
                            icon = "image('can/can_setup.svg')"
                            help_file = "can_bus_protocol.html#reference_nhz_j1f_l1b__section_gdv_t1f_l1b"

                            description = "This block defines CAN controller settings for the connected HIL device. Note: Clock reference for both CAN controllers is 100 MHz"

                            can1_cofig_method {
                                label = "Specify bit timing values for CAN1"
                                description = "Choose how to specify CAN1 bit timing values: Automatic (values are calculated using baud rate
                                ), Manual (bit timing values are manually specified)"
                                widget = combo
                                type = string
                                combo_values = "Automatic", "Manual"
                                default_value = "Automatic"
                                group = "CAN1:2"
                    
                                CODE property_value_edited
                    
                                    dialog_dynamics(mdl, container_handle, "can1_cofig_method", new_value)
                    
                                ENDCODE
                    
                                CODE property_value_changed
                    
                                    dialog_dynamics(mdl, container_handle, "can1_cofig_method", new_value)
                    
                                ENDCODE
                            }
                    
                            can1_baud_rate {
                                label = "CAN1 baud rate"
                                description = "CAN1 baud rate in bit/s"
                                type = int
                                widget = edit
                                default_value = "50000"
                                unit = "bits/s"
                                group = "CAN1:2"
                            }
                    
                            can1_cd {
                                label = "CAN1 Clock Divider"
                                description = "Calculated Clock Divider value for CAN1"
                                type = int
                                widget = edit
                                default_value = 0
                                group = "CAN1:2"
                            }
                    
                            can1_ts1 {
                                label = "CAN1 Time Segment 1"
                                description = "Calculated Time Segment 1 value for CAN1"
                                type = int
                                widget = edit
                                default_value = 0
                                unit = "time quanta"
                                group = "CAN1:2"
                            }
                    
                            can1_ts2 {
                                label = "CAN1 Time Segment 2"
                                description = "Calculated Time Segment 2 value for CAN1"
                                type = int
                                widget = edit
                                default_value = 0
                                unit = "time quanta"
                                group = "CAN1:2"
                            }
                    
                            can1_sjw {
                                label = "CAN1 Resynchronization Jump Width"
                                description = "Calculated Resynchronization Jump Width value for CAN1"
                                type = int
                                widget = edit
                                default_value = 1
                                unit = "time quanta"
                                group = "CAN1:2"
                            }
                    
                            can1_er {
                                label = "CAN1 controller execution rate"
                                description = "Execution rate for CAN1 controller"
                                type = real
                                widget = edit
                                default_value = 10e-3
                                min_value = 1e-3
                                max_value = 30
                                unit = "s"
                                group = "CAN1:2"
                            }
                    
                            can2_cofig_method {
                                label = "Specify bit timing values for CAN2"
                                description = "Choose how to specify CAN2 bit timing values: Automatic (values are calculated using baud rate
                                ), Manual (bit timing values are manually specified)"
                                widget = combo
                                type = string
                                combo_values = "Automatic", "Manual"
                                default_value = "Automatic"
                                group = "CAN2:3"
                    
                                CODE property_value_edited
                    
                                    dialog_dynamics(mdl, container_handle, "can2_cofig_method", new_value)
                    
                                ENDCODE
                    
                                CODE property_value_changed
                    
                                    dialog_dynamics(mdl, container_handle, "can2_cofig_method", new_value)
                    
                                ENDCODE
                            }
                    
                            can2_baud_rate {
                                label = "CAN2 baud rate"
                                description = "CAN2 baud rate in bit/s"
                                type = int
                                widget = edit
                                default_value = "50000"
                                unit = "bits/s"
                                group = "CAN2:3"
                            }
                    
                            can2_cd {
                                label = "CAN2 Clock Divider"
                                description = "Calculated Clock Divider value for CAN2"
                                type = int
                                widget = edit
                                default_value = 0
                                group = "CAN2:3"
                            }
                    
                            can2_ts1 {
                                label = "CAN2 Time Segment 1"
                                description = "Calculated Time Segment 1 value for CAN2"
                                type = int
                                widget = edit
                                default_value = 0
                                unit = "time quanta"
                                group = "CAN2:3"
                            }
                    
                            can2_ts2 {
                                label = "CAN2 Time Segment 2"
                                description = "Calculated Time Segment 2 value for CAN2"
                                type = int
                                widget = edit
                                default_value = 0
                                unit = "time quanta"
                                group = "CAN2:3"
                            }
                    
                            can2_sjw {
                                label = "CAN2 Resynchronization Jump Width"
                                description = "Calculated Resynchronization Jump Width value for CAN2"
                                type = int
                                widget = edit
                                default_value = 1
                                unit = "time quanta"
                                group = "CAN2:3"
                            }
                    
                            can2_er {
                                label = "CAN2 controller execution rate"
                                description = "Execution rate for CAN2 controller"
                                type = real
                                widget = edit
                                default_value = 10e-3
                                min_value = 1e-3
                                max_value = 30
                                unit = "s"
                                group = "CAN2:3"
                            }
                    
                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }
                    
                            calc_values {
                                label = "CAN calculated values"
                                description = "Dictionary of calculated values"
                                widget = edit
                                type = string
                                default_value = "{'CAN1': {'cd_calc': '1', 'ts1_calc': '1', 'ts2_calc': '1', 'sjw_calc': '1'}, 'CAN2': {'cd_calc': '1', 'ts1_calc': '1', 'ts2_calc': '1', 'sjw_calc': '1'},
                                'CAN FD1': {'cd_calc': '1', 'ts1_calc': '1', 'ts2_calc': '1', 'sjw_calc': '1'}, 
                                'CAN FD2': {'cd_calc': '1', 'ts1_calc': '1', 'ts2_calc': '1', 'sjw_calc': '1'},  
                                'send_num': 0,
                                'send_buff_len': 0,
                                'receive_num': 0,}"
                                no_evaluate
                                nonvisible
                            }

                            calc_values_can_fd {
                                label = "CAN calculated values"
                                description = "Dictionary of calculated values"
                                widget = edit
                                type = string
                                default_value = "{
                                'CAN FD1': {'cd_calc': '1', 'ts1_calc': '1', 'ts2_calc': '1', 'sjw_calc': '1'}, 
                                'CAN FD2': {'cd_calc': '1', 'ts1_calc': '1', 'ts2_calc': '1', 'sjw_calc': '1'},  
                                'send_num': 0,
                                'send_buff_len': 0,
                                'receive_num': 0,
                                'receive_buff_len': 0,}"
                                no_evaluate
                                nonvisible
                            }

                            execution_rate {
                                label = "Execution rate"
                                description = "Signal processing execution rate"
                                widget = edit
                                type = real
                                default_value = "100e-6"
                                group = "General:1"
                            }
                            
                            can_fd1_config_method {
                                label = "Specify bit timing values for CAN FD1"
                                description = "Choose how to specify CAN FD1 bit timing values: Automatic (values are calculated using baud rate
                                ), Manual (bit timing values are manually specified)"
                                widget = combo
                                type = string
                                combo_values = "Automatic", "Manual"
                                default_value = "Automatic"
                                group = "CAN FD1:4"
                    
                                CODE property_value_edited
                    
                                    dialog_dynamics(mdl, container_handle, "can_fd1_config_method", new_value)
                    
                                ENDCODE
                    
                                CODE property_value_changed
                    
                                    dialog_dynamics(mdl, container_handle, "can_fd1_config_method", new_value)
                    
                                ENDCODE
                            }

                            can_fd1_baud_rate {
                                label = "CAN FD1 baud rate"
                                description = "CAN FD1 baud rate in bit/s"
                                type = int
                                widget = edit
                                default_value = "50000"
                                unit = "bits/s"
                                group = "CAN FD1:4"
                            }

                            can_fd1_cd {
                                label = "CAN FD1 Clock Divider"
                                description = "Calculated Clock Divider value for CAN FD1"
                                type = int
                                widget = edit
                                default_value = 0
                                group = "CAN FD1:4"
                                nonvisible
                            }
                    
                            can_fd1_ts1 {
                                label = "CAN FD1 Time Segment 1"
                                description = "Calculated Time Segment 1 value for CAN FD1"
                                type = int
                                widget = edit
                                default_value = 0
                                unit = "time quanta"
                                group = "CAN FD1:4"
                                nonvisible
                            }
                    
                            can_fd1_ts2 {
                                label = "CAN FD1 Time Segment 2"
                                description = "Calculated Time Segment 2 value for CAN FD1"
                                type = int
                                widget = edit
                                default_value = 0
                                unit = "time quanta"
                                group = "CAN FD1:4"
                                nonvisible
                            }
                    
                            can_fd1_sjw {
                                label = "CAN FD1 Resynchronization Jump Width"
                                description = "Calculated Resynchronization Jump Width value for CAN FD1"
                                type = int
                                widget = edit
                                default_value = 1
                                unit = "time quanta"
                                group = "CAN FD1:4"
                                nonvisible
                            }

                            can_fd1_er {
                                label = "CAN FD1 controller execution rate"
                                description = "Execution rate for CAN FD1 controller"
                                type = real
                                widget = edit
                                default_value = 10e-3
                                min_value = 1e-3
                                max_value = 30
                                unit = "s"
                                group = "CAN FD1:4"
                            }

                            can_fd2_config_method {
                                label = "Specify bit timing values for CAN FD2"
                                description = "Choose how to specify CAN FD2 bit timing values: Automatic (values are calculated using baud rate
                                ), Manual (bit timing values are manually specified)"
                                widget = combo
                                type = string
                                combo_values = "Automatic", "Manual"
                                default_value = "Automatic"
                                group = "CAN FD2:5"
                    
                                CODE property_value_edited
                    
                                    dialog_dynamics(mdl, container_handle, "can_fd2_config_method", new_value)
                    
                                ENDCODE
                    
                                CODE property_value_changed
                    
                                    dialog_dynamics(mdl, container_handle, "can_fd2_config_method", new_value)
                    
                                ENDCODE
                            }

                            can_fd2_baud_rate {
                                label = "CAN FD2 baud rate"
                                description = "CAN FD2 baud rate in bit/s"
                                type = int
                                widget = edit
                                default_value = "50000"
                                unit = "bits/s"
                                group = "CAN FD2:5"
                            }

                            can_fd2_cd {
                                label = "CAN FD2 Clock Divider"
                                description = "Calculated Clock Divider value for CAN FD2"
                                type = int
                                widget = edit
                                default_value = 0
                                group = "CAN FD2:5"
                                nonvisible
                            }
                    
                            can_fd2_ts1 {
                                label = "CAN FD2 Time Segment 1"
                                description = "Calculated Time Segment 1 value for CAN FD2"
                                type = int
                                widget = edit
                                default_value = 0
                                unit = "time quanta"
                                group = "CAN FD2:5"
                                nonvisible
                            }
                    
                            can_fd2_ts2 {
                                label = "CAN FD2 Time Segment 2"
                                description = "Calculated Time Segment 2 value for CAN FD2"
                                type = int
                                widget = edit
                                default_value = 0
                                unit = "time quanta"
                                group = "CAN FD2:5"
                                nonvisible
                            }
                    
                            can_fd2_sjw {
                                label = "CAN FD2 Resynchronization Jump Width"
                                description = "Calculated Resynchronization Jump Width value for CAN FD2"
                                type = int
                                widget = edit
                                default_value = 1
                                unit = "time quanta"
                                group = "CAN FD2:5"
                                nonvisible
                            }
                    
                            can_fd2_er {
                                label = "CAN FD2 controller execution rate"
                                description = "Execution rate for CAN FD2 controller"
                                type = real
                                widget = edit
                                default_value = 10e-3
                                min_value = 1e-3
                                max_value = 30
                                unit = "s"
                                group = "CAN FD2:5"
                            }
                            
                            // Ensures backward compatibility
                            
                            hil_device_id_combo_values {
                                label = ""
                                description = "Combo values for hil_device_id property. Used in component init"
                                widget = edit
                                type = string
                                default_value = "[]"
                                nonvisible
                    
                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_setup import hil_device_id_values_changed
                    
                                    hil_device_id_values_changed(mdl, prop_handle, container_handle, new_value)
                                ENDCODE
                    
                            }
                    
                            saved_hil_device_config {
                                label = "Saved CAN configuration per device"
                                description = "Saved dictionary of all CAN configurations for all devices"
                                widget = edit
                                type = string
                                default_value = ""
                                no_evaluate
                                nonvisible
                            }
                    
                            CODE init

                                def dialog_dynamics(mdl, container_handle, prop_name, new_value):
                                    hil_device = mdl.core_model.configuration.hil_device
                                    if prop_name == "can1_cofig_method":
                                        baudrate = mdl.prop(container_handle, "can1_baud_rate")
                                        clk_divider = mdl.prop(container_handle, "can1_cd")
                                        timesegment1 = mdl.prop(container_handle, "can1_ts1")
                                        timesegment2 = mdl.prop(container_handle, "can1_ts2")
                                        syncjump = mdl.prop(container_handle, "can1_sjw")
                        
                                        if new_value == "Manual":
                                            mdl.hide_property(baudrate)
                                            mdl.show_property(clk_divider)
                                            mdl.show_property(timesegment1)
                                            mdl.show_property(timesegment2)
                                            mdl.show_property(syncjump)
                                        else:
                                            mdl.show_property(baudrate)
                                            mdl.hide_property(clk_divider)
                                            mdl.hide_property(timesegment1)
                                            mdl.hide_property(timesegment2)
                                            mdl.hide_property(syncjump)
                        
                                    elif prop_name == "can2_cofig_method":
                                        baudrate = mdl.prop(container_handle, "can2_baud_rate")
                                        clk_divider = mdl.prop(container_handle, "can2_cd")
                                        timesegment1 = mdl.prop(container_handle, "can2_ts1")
                                        timesegment2 = mdl.prop(container_handle, "can2_ts2")
                                        syncjump = mdl.prop(container_handle, "can2_sjw")
                        
                                        if new_value == "Manual":
                                            mdl.hide_property(baudrate)
                                            mdl.show_property(clk_divider)
                                            mdl.show_property(timesegment1)
                                            mdl.show_property(timesegment2)
                                            mdl.show_property(syncjump)
                                        else:
                                            mdl.show_property(baudrate)
                                            mdl.hide_property(clk_divider)
                                            mdl.hide_property(timesegment1)
                                            mdl.hide_property(timesegment2)
                                            mdl.hide_property(syncjump)

                                    elif prop_name == "can_fd2_config_method":
                                        baudrate = mdl.prop(container_handle, "can_fd2_baud_rate")
                                        clk_divider = mdl.prop(container_handle, "can_fd2_cd")
                                        timesegment1 = mdl.prop(container_handle, "can_fd2_ts1")
                                        timesegment2 = mdl.prop(container_handle, "can_fd2_ts2")
                                        syncjump = mdl.prop(container_handle, "can_fd2_sjw")
                                        
                                        if new_value == "Manual":
                                            mdl.hide_property(baudrate)
                                            mdl.show_property(clk_divider)
                                            mdl.show_property(timesegment1)
                                            mdl.show_property(timesegment2)
                                            mdl.show_property(syncjump)
                                        else:
                                            if hil_device == "HIL606":
                                                mdl.show_property(baudrate)
                                            else:
                                                mdl.hide_property(baudrate)

                                            mdl.hide_property(clk_divider)
                                            mdl.hide_property(timesegment1)
                                            mdl.hide_property(timesegment2)
                                            mdl.hide_property(syncjump)
                                    elif prop_name == "can_fd1_config_method":
                                        baudrate = mdl.prop(container_handle, "can_fd1_baud_rate")
                                        clk_divider = mdl.prop(container_handle, "can_fd1_cd")
                                        timesegment1 = mdl.prop(container_handle, "can_fd1_ts1")
                                        timesegment2 = mdl.prop(container_handle, "can_fd1_ts2")
                                        syncjump = mdl.prop(container_handle, "can_fd1_sjw")

                                        if new_value == "Manual":
                                            mdl.hide_property(baudrate)
                                            mdl.show_property(clk_divider)
                                            mdl.show_property(timesegment1)
                                            mdl.show_property(timesegment2)
                                            mdl.show_property(syncjump)
                                        else:
                                            if hil_device == "HIL606":
                                                mdl.show_property(baudrate)
                                            else:
                                                mdl.hide_property(baudrate)
                                            mdl.hide_property(clk_divider)
                                            mdl.hide_property(timesegment1)
                                            mdl.hide_property(timesegment2)
                                            mdl.hide_property(syncjump)

                                def bit_timing_calculate(BitRate, CAN_clk, SamplePoint):
                                    """
                                    This function calculates bit timing constants (Clock Divider, and Time Segments)
                                    using specified bit rate and referent CAN clock frequency. Sample point is set to 85 %
                                    """
                                    from math import ceil
                        
                                    ClockDivider = []

                                    
                                    # Value for time quanta should be between 8 and 23
                                    TimeQuanta = range(8, 24)
                        
                                    # calculate clock divider for each time quanta value
                                    for tqs in TimeQuanta:
                                        ClockDivider.append(CAN_clk / tqs / BitRate)
                        
                                    # Clock divider value should be round number. Here all round numbers are extracted
                                    ClockDivider_int = []
                                    TimeQuanta_index = []
                                    for index, cd in enumerate(ClockDivider):
                                        if int(cd) == cd:
                                            ClockDivider_int.append(cd)
                                            TimeQuanta_index.append(TimeQuanta[index])
                        
                                    if ClockDivider_int == []:
                                        # If no Clock Divider value is a round number, use the value closest to round one
                                        residue = []
                                        for index, cd in enumerate(ClockDivider):
                                            residue.append(cd - int(cd))
                                        residue_min = min(residue)
                                        ind = residue.index(residue_min)
                                        CD = int(ClockDivider[ind])
                                        TQ = TimeQuanta[ind]
                                    else:
                                        # Use the Clock divider value for which the time quanta is closer to 25 as posible
                                        ClockDivider_min = min(ClockDivider_int)
                                        ind = ClockDivider_int.index(ClockDivider_min)
                                        CD = int(ClockDivider_int[ind])
                                        TQ = TimeQuanta_index[ind]

                                    # Calculate time segments based on time quanta value
                                    TimeSegment1 = SamplePoint * TQ - 1
                                    TimeSegment1 = ceil(TimeSegment1)
                                    TimeSegment2 = TQ - 1 - TimeSegment1
                        
                                    return int(CD), int(TimeSegment1), int(TimeSegment2)

                                def can_fd_bit_timing_calculate(BitRate, CAN_clk, SamplePoint):
                                    """
                                    This function calculates bit timing constants (Clock Divider, and Time Segments)
                                    using specified bit rate and referent CAN clock frequency. Sample point is set to 80 %

                                    """
                                    from math import ceil
                        
                                    ClockDivider = []

                                    TimeQuanta = range(4, 385)
                        
                                    # calculate clock divider for each time quanta value
                                    for tqs in TimeQuanta:
                                        ClockDivider.append(CAN_clk / tqs / BitRate)
                        
                                    # Clock divider value should be round number. Here all round numbers are extracted
                                    ClockDivider_int = []
                                    TimeQuanta_index = []
                                    for index, cd in enumerate(ClockDivider):
                                        if int(cd) == cd:
                                            ClockDivider_int.append(cd)
                                            TimeQuanta_index.append(TimeQuanta[index])
                        
                                    if ClockDivider_int == []:
                                        # If no Clock Divider value is a round number, use the value closest to round one
                                        residue = []
                                        for index, cd in enumerate(ClockDivider):
                                            residue.append(cd - int(cd))
                                        residue_min = min(residue)
                                        ind = residue.index(residue_min)
                                        CD = int(ClockDivider[ind])
                                        TQ = TimeQuanta[ind]
                                    else:
                                        # Use the Clock divider value for which the time quanta is closer to 25 as posible
                                        ClockDivider_min = min(ClockDivider_int)
                                        ind = ClockDivider_int.index(ClockDivider_min)
                                        CD = int(ClockDivider_int[ind])
                                        TQ = TimeQuanta_index[ind]

                                    # Calculate time segments based on time quanta value
                                    TimeSegment1 = SamplePoint * TQ - 1
                                    TimeSegment1 = ceil(TimeSegment1)
                                    TimeSegment2 = TQ - 1 - TimeSegment1

                                    sjw = min(TimeSegment1, TimeSegment2)
                        
                                    return int(CD), int(TimeSegment1), int(TimeSegment2), int(sjw)
                            

                                hil_device = mdl.core_model.configuration.hil_device

                                if hil_device == "HIL606":
                                    mdl.show_property(mdl.prop(item_handle, "can_fd1_config_method"))
                                    mdl.show_property(mdl.prop(item_handle, "can_fd2_config_method"))
                                    can_fd1_config_method = mdl.get_property_value(mdl.prop(item_handle, "can_fd1_config_method"))
                                    can_fd2_config_method = mdl.get_property_value(mdl.prop(item_handle, "can_fd2_config_method"))
                                    if can_fd1_config_method == "Automatic":
                                        mdl.show_property(mdl.prop(item_handle, "can_fd1_baud_rate"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd1_cd"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd1_ts1"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd1_ts2"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd1_sjw"))
                                    else:
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd1_baud_rate"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd1_cd"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd1_ts1"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd1_ts2"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd1_sjw"))
                                    
                                    if can_fd2_config_method == "Automatic":
                                        mdl.show_property(mdl.prop(item_handle, "can_fd2_baud_rate"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd2_cd"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd2_ts1"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd2_ts2"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd2_sjw"))
                                    else:
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd2_baud_rate"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd2_cd"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd2_ts1"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd2_ts2"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd2_sjw"))

                                    mdl.show_property(mdl.prop(item_handle, "can_fd1_er"))
                                    mdl.show_property(mdl.prop(item_handle, "can_fd2_er"))
                                else:
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_baud_rate"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_baud_rate"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_er"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_er"))

                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_cd"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_ts1"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_ts2"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_sjw"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_cd"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_ts1"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_ts2"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_sjw"))

                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_config_method"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_config_method"))
                        
                            ENDCODE

                            CODE pre_compile
                                from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                                comp_handle = mdl.get_sub_level_handle(item_handle)
                                can1_status_out = mdl.get_item("can1_status_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                mdl.set_terminal_sp_type(mdl.term(can1_status_out, "out"), "int")

                                can1_status_out = mdl.get_item("can2_status_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                mdl.set_terminal_sp_type(mdl.term(can1_status_out, "out"), "int")

                            ENDCODE                       
                            
                            CODE configuration_changed

                                hil_device = mdl.core_model.configuration.hil_device

                                if hil_device == "HIL606":
                                    mdl.show_property(mdl.prop(item_handle, "can_fd1_config_method"))
                                    mdl.show_property(mdl.prop(item_handle, "can_fd2_config_method"))

                                    can_fd1_config_method = mdl.get_property_value(mdl.prop(item_handle, "can_fd1_config_method"))
                                    can_fd2_config_method = mdl.get_property_value(mdl.prop(item_handle, "can_fd2_config_method"))
                                    if can_fd1_config_method == "Automatic":
                                        mdl.show_property(mdl.prop(item_handle, "can_fd1_baud_rate"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd1_cd"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd1_ts1"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd1_ts2"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd1_sjw"))
                                    else:
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd1_baud_rate"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd1_cd"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd1_ts1"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd1_ts2"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd1_sjw"))
                                    
                                    if can_fd2_config_method == "Automatic":
                                        mdl.show_property(mdl.prop(item_handle, "can_fd2_baud_rate"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd2_cd"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd2_ts1"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd2_ts2"))
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd2_sjw"))
                                    else:
                                        mdl.hide_property(mdl.prop(item_handle, "can_fd2_baud_rate"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd2_cd"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd2_ts1"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd2_ts2"))
                                        mdl.show_property(mdl.prop(item_handle, "can_fd2_sjw"))

                                    mdl.show_property(mdl.prop(item_handle, "can_fd1_er"))
                                    mdl.show_property(mdl.prop(item_handle, "can_fd2_er"))
                                else:
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_baud_rate"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_baud_rate"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_er"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_er"))

                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_cd"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_ts1"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_ts2"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_sjw"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_cd"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_ts1"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_ts2"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_sjw"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd1_config_method"))
                                    mdl.hide_property(mdl.prop(item_handle, "can_fd2_config_method"))

                            ENDCODE

                            CODE post_resolve
                                CAN_CLK_REF = 100e6
                                SamplePoint = 0.85

                                CAN_FD_CLK_REF = 40e6
                        
                                can1_config_method = mdl.get_property_value(mdl.prop(item_handle, "can1_cofig_method"))
                                can2_config_method = mdl.get_property_value(mdl.prop(item_handle, "can2_cofig_method"))
                                can1_cd1 = mdl.get_property_value(mdl.prop(item_handle, "can1_cd"))
                                can1_baud = mdl.get_property_value(mdl.prop(item_handle, "can1_baud_rate"))
                                can2_baud = mdl.get_property_value(mdl.prop(item_handle, "can2_baud_rate"))
                                can1_ts11 = mdl.get_property_value(mdl.prop(item_handle, "can1_ts1"))
                                can1_ts21 = mdl.get_property_value(mdl.prop(item_handle, "can1_ts2"))
                                can1_sjw = mdl.get_property_value(mdl.prop(item_handle, "can1_sjw"))
                                can2_cd1 = mdl.get_property_value(mdl.prop(item_handle, "can2_cd"))
                                can2_ts11 = mdl.get_property_value(mdl.prop(item_handle, "can2_ts1"))
                                can2_ts21 = mdl.get_property_value(mdl.prop(item_handle, "can2_ts2"))
                                can2_sjw =  mdl.get_property_value(mdl.prop(item_handle, "can2_sjw"))

                                calc_values = eval(mdl.get_property_value(mdl.prop(item_handle, "calc_values")))

                                # Calculate bit timing values for CAN1
                                if can1_config_method == "Automatic":
                                    can1_bit_rate = int(can1_baud)
                                    # Calculate bit timing
                                    can1_cd, can1_ts1, can1_ts2 = bit_timing_calculate(can1_bit_rate, CAN_CLK_REF, SamplePoint)
                                    calc_values["CAN1"]["cd_calc"] = str(can1_cd)
                                    calc_values["CAN1"]["ts1_calc"] = str(can1_ts1)
                                    calc_values["CAN1"]["ts2_calc"] = str(can1_ts2)
                                    calc_values["CAN1"]["sjw_calc"] = str(4)
                                else:
                                    calc_values["CAN1"]["cd_calc"] = can1_cd1
                                    calc_values["CAN1"]["ts1_calc"] = can1_ts11
                                    calc_values["CAN1"]["ts2_calc"] = can1_ts21
                                    calc_values["CAN1"]["sjw_calc"] = can1_sjw
                        
                                # Calculate bit timing values for CAN1
                                if can2_config_method == "Automatic":
                                    can2_bit_rate = int(can2_baud)
                                    # Calculate bit timing
                                    can2_cd, can2_ts1, can2_ts2 = bit_timing_calculate(can2_bit_rate, CAN_CLK_REF, SamplePoint)
                                    calc_values["CAN2"]["cd_calc"] = str(can2_cd)
                                    calc_values["CAN2"]["ts1_calc"] = str(can2_ts1)
                                    calc_values["CAN2"]["ts2_calc"] = str(can2_ts2)
                                    calc_values["CAN2"]["sjw_calc"] = str(4)
                                else:
                                    calc_values["CAN2"]["cd_calc"] = can2_cd1
                                    calc_values["CAN2"]["ts1_calc"] = can2_ts11
                                    calc_values["CAN2"]["ts2_calc"] = can2_ts21
                                    calc_values["CAN2"]["sjw_calc"] = can2_sjw
                                
                                
                                hil_device = mdl.core_model.configuration.hil_device
                                if hil_device == "HIL606":
                                    can_fd1_config_method = mdl.get_property_value(mdl.prop(item_handle, "can_fd1_config_method"))
                                    can_fd2_config_method = mdl.get_property_value(mdl.prop(item_handle, "can_fd2_config_method"))
                                    can_fd1_cd1 = mdl.get_property_value(mdl.prop(item_handle, "can_fd1_cd"))
                                    can_fd1_baud = mdl.get_property_value(mdl.prop(item_handle, "can_fd1_baud_rate"))
                                    can_fd2_baud = mdl.get_property_value(mdl.prop(item_handle, "can_fd2_baud_rate"))
                                    can_fd1_ts11 = mdl.get_property_value(mdl.prop(item_handle, "can_fd1_ts1"))
                                    can_fd1_ts21 = mdl.get_property_value(mdl.prop(item_handle, "can_fd1_ts2"))
                                    can_fd1_sjw1 = mdl.get_property_value(mdl.prop(item_handle, "can_fd1_sjw"))
                                    can_fd2_cd1 = mdl.get_property_value(mdl.prop(item_handle, "can_fd2_cd"))
                                    can_fd2_ts11 = mdl.get_property_value(mdl.prop(item_handle, "can_fd2_ts1"))
                                    can_fd2_ts21 = mdl.get_property_value(mdl.prop(item_handle, "can_fd2_ts2"))
                                    can_fd2_sjw1 =  mdl.get_property_value(mdl.prop(item_handle, "can_fd2_sjw"))
                                    
                                    calc_values_can_fd = eval(mdl.get_property_value(mdl.prop(item_handle, "calc_values_can_fd")))

                                    # Calculate bit timing values for CAN1
                                    if can_fd1_config_method == "Automatic":
                                        can_fd1_bit_rate = int(can_fd1_baud)
                                        # Calculate bit timing
                                        # Nominal Bit Rate parameters
                                        can_fd1_cd, can_fd1_ts1, can_fd1_ts2, can_fd1_sjw = can_fd_bit_timing_calculate(can_fd1_bit_rate, CAN_FD_CLK_REF, SamplePoint)
                                        calc_values_can_fd["CAN FD1"]["cd_calc"] = str(can_fd1_cd)
                                        calc_values_can_fd["CAN FD1"]["ts1_calc"] = str(can_fd1_ts1)
                                        calc_values_can_fd["CAN FD1"]["ts2_calc"] = str(can_fd1_ts2)
                                        calc_values_can_fd["CAN FD1"]["sjw_calc"] = str(can_fd1_sjw)

                                    else:
                                        # Nominal Bit Rate parameters
                                        calc_values_can_fd["CAN FD1"]["cd_calc"] = can_fd1_cd1
                                        calc_values_can_fd["CAN FD1"]["ts1_calc"] = can_fd1_ts11
                                        calc_values_can_fd["CAN FD1"]["ts2_calc"] = can_fd1_ts21
                                        calc_values_can_fd["CAN FD1"]["sjw_calc"] = can_fd1_sjw1
                            
                                    # Calculate bit timing values for CAN1
                                    if can_fd2_config_method == "Automatic":
                                        can_fd2_bit_rate = int(can_fd2_baud)
                                        # Calculate bit timing
                                        can_fd2_cd, can_fd2_ts1, can_fd2_ts2, can_fd2_sjw = can_fd_bit_timing_calculate(can_fd2_bit_rate, CAN_FD_CLK_REF, SamplePoint)
                                        calc_values_can_fd["CAN FD2"]["cd_calc"] = str(can_fd2_cd)
                                        calc_values_can_fd["CAN FD2"]["ts1_calc"] = str(can_fd2_ts1)
                                        calc_values_can_fd["CAN FD2"]["ts2_calc"] = str(can_fd2_ts2)
                                        calc_values_can_fd["CAN FD2"]["sjw_calc"] = str(can_fd2_sjw)

                                    else:
                                        calc_values_can_fd["CAN FD2"]["cd_calc"] = can_fd2_cd1
                                        calc_values_can_fd["CAN FD2"]["ts1_calc"] = can_fd2_ts11
                                        calc_values_can_fd["CAN FD2"]["ts2_calc"] = can_fd2_ts21
                                        calc_values_can_fd["CAN FD2"]["sjw_calc"] = can_fd2_sjw1
                                    
                                    mdl.set_property_value(mdl.prop(item_handle, "calc_values_can_fd"), str(calc_values_can_fd))
                        
                                mdl.set_property_value(mdl.prop(item_handle, "calc_values"), str(calc_values))
                        
                            ENDCODE

                        }
                    }
                    [
                        size = 80, 90
                    ]

                    component Subsystem "CAN Bus Send" {

                        layout = dynamic
                        require = "sw_can_bus"

                        mask {
                            icon = "image('can/can_send.svg')"
                            help_file = "can_bus_protocol.html#reference_nhz_j1f_l1b__section_vgx_ghf_l1b"

                            description = ""

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            db_messages {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            name {
                                description = ""
                                type = string
                                default_value = "CAN message"
                                nonvisible
                                no_evaluate
                            }

                            can_controller {
                                description = ""
                                type = string
                                default_value = "CAN1"
                                no_evaluate
                            }

                            data_input {
                                description = ""
                                type = string
                                default_value = "Dialog window"
                                no_evaluate

                                CODE property_value_changed

                                    # Backward compatibility
                                    if new_value == "CANdb file":
                                        mdl.set_property_value(prop_handle, "Configuration file")

                                ENDCODE
                            }

                            file_label {
                                description = ""
                                type = string
                                default_value = "Configuration file"
                                nonvisible
                                no_evaluate
                            }

                            file_path {
                                description = "CAN Configuration file."
                                label = "Path to the configuration file"
                                type = string
                                widget = file_chooser *.dbc *.arxml
                                default_value = "Configuration file"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import file_path_changed

                                    file_path_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            choose_message_values {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            choose_message {
                                description = ""
                                type = string
                                default_value = ""
                                no_evaluate

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import choose_message_changed

                                    choose_message_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            identifier_type {
                                description = ""
                                type = string
                                default_value = "11 bit"
                                no_evaluate
                            }

                            identifier_value {
                                description = ""
                                type = int
                                default_value = 100
                            }

                            data_length {
                                description = ""
                                type = int
                                default_value = 1
                            }

                            transmit_type {
                                description = ""
                                type = string
                                default_value = "{'On event': True, 'On timer': False}"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import create_event_port

                                    comp_handle = mdl.get_sub_level_handle(container_handle)

                                    transmit_type = eval(new_value)
                                    create_event_port(mdl, comp_handle, transmit_type["On event"])
                                ENDCODE
                            }

                            transmit_period {
                                description = ""
                                type = real
                                default_value = 100
                            }

                            signals {
                                description = ""
                                type = string
                                default_value = "[]"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import create_internal_components, check_signals, update_dict_fields
                                    from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                                    create_from_scratch = False

                                    try:
                                        signals = eval(new_value)
                                        if isinstance(signals, dict):
                                            signals = [signals]

                                        new_signals = update_dict_fields(signals)

                                        check_signals(new_signals, mdl.get_property_value(mdl.prop(container_handle, "data_length")))
                                    except ValueError as e:
                                        mdl.error(
                                            str(e),
                                            context=prop_handle,
                                            kind=ERROR_PROPERTY_VALUE_INVALID
                                        )
                                        return

                                    signal_names_dict = eval(mdl.get_property_value(mdl.prop(container_handle, "signal_names_dict")))

                                    if not signal_names_dict:
                                        create_from_scratch = True

                                        signal_names_dict = {}
                                        for signal in new_signals:
                                            signal_names_dict[signal["name"]] = {
                                                "rename": signal["name"],
                                                "delete": True
                                            }

                                    transmit_type = eval(mdl.get_property_value(mdl.prop(container_handle, "transmit_type")))

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    create_internal_components(mdl, comp_handle, signal_names_dict, new_signals, 
                                                               on_event_send=transmit_type["On event"], create_from_scratch=create_from_scratch)

                                    mdl.set_property_value(mdl.prop(container_handle, "signal_names_dict"), str({}))
                                ENDCODE
                            }

                            signal_names_dict {
                                description = "Used to help with renaming and deleting component terminals."
                                type = string
                                default_value = "{}"
                                nonvisible
                                no_evaluate
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                            CODE init
                                # Legacy loader
                                try:
                                    transmit_type = eval(mdl.get_property_value(mdl.prop(item_handle, "transmit_type")))
                                except Exception as e:
                                    transmit_type = {"On event": False, "On timer": False, "On request": False}
                                    if mdl.get_property_value(mdl.prop(item_handle, "transmit_type")) == "Periodically":
                                        transmit_type["On timer"] = True
                                    else:
                                        transmit_type[mdl.get_property_value(mdl.prop(item_handle, "transmit_type"))] = True

                                mdl.set_property_value(mdl.prop(item_handle, "transmit_type"), str(transmit_type))
                            ENDCODE

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.can_send_dialog import CANSendDialog

                                dialog = CANSendDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                                dialog.exec_()
                            ENDCODE

                            CODE pre_validate
                                from typhoon.import_path.handlers.can_send import component_pre_validate

                                component_pre_validate(mdl, item_handle, "CAN Bus")

                                # Reset hil id property value
                                # This value is updated during compile but it needs to be reseted before compile
                                # because copied value from component from different schematic may cause problem.
                                mdl.set_property_value(mdl.prop(item_handle, "hil_id"), 0)
                            ENDCODE

                            CODE post_resolve

                                comp_handle = mdl.get_sub_level_handle(item_handle)

                                from typhoon.import_path.handlers.can_send import component_pre_compile

                                component_pre_compile(mdl, item_handle)
                            ENDCODE

                        }

                    }
                    [
                        size = 160, 120
                    ]

                    component Subsystem "CAN Bus Receive" {

                        layout = dynamic
                        require = "sw_can_bus"

                        mask {
                            icon = "image('can/can_receive.svg')"
                            help_file = "can_bus_protocol.html#reference_nhz_j1f_l1b__section_dqn_jqh_l1b"

                            description = ""

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            db_messages {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            name {
                                description = ""
                                type = string
                                default_value = "CAN message"
                                nonvisible
                                no_evaluate
                            }

                            can_controller {
                                description = ""
                                type = string
                                default_value = "CAN1"
                                no_evaluate
                            }

                            data_input {
                                description = ""
                                type = string
                                default_value = "Dialog window"
                                no_evaluate

                                CODE property_value_changed

                                    # Backward compatibility
                                    if new_value == "CANdb file":
                                        mdl.set_property_value(prop_handle, "Configuration file")

                                ENDCODE
                            }

                            file_label {
                                description = ""
                                type = string
                                default_value = "Configuration file"
                                nonvisible
                                no_evaluate
                            }

                            file_path {
                                description = "CAN Configuration file."
                                label = "Path to the configuration file"
                                type = string
                                widget = file_chooser *.dbc *.arxml
                                default_value = "Configuration file"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import file_path_changed

                                    file_path_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            choose_message_values {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            choose_message {
                                description = ""
                                type = string
                                default_value = ""
                                no_evaluate

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import choose_message_changed

                                    choose_message_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            identifier_type {
                                description = ""
                                type = string
                                default_value = "11 bit"
                                no_evaluate
                            }

                            identifier_value {
                                description = ""
                                type = int
                                default_value = 100
                            }

                            data_length {
                                description = ""
                                type = int
                                default_value = 1
                            }

                            signals {
                                description = ""
                                type = string
                                default_value = "[]"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import check_signals, update_dict_fields
                                    from typhoon.import_path.handlers.can_receive import create_internal_components
                                    from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                                    create_from_scratch = False

                                    try:
                                        signals = eval(new_value)
                                        if isinstance(signals, dict):
                                            signals = [signals]

                                        new_signals = update_dict_fields(signals)

                                        check_signals(new_signals, mdl.get_property_value(mdl.prop(container_handle, "data_length")))
                                    except ValueError as e:
                                        mdl.error(
                                            str(e),
                                            context=prop_handle,
                                            kind=ERROR_PROPERTY_VALUE_INVALID
                                        )
                                        return

                                    signal_names_dict = eval(mdl.get_property_value(mdl.prop(container_handle, "signal_names_dict")))

                                    if not signal_names_dict:
                                        create_from_scratch = True

                                        signal_names_dict = {}
                                        for signal in new_signals:
                                            signal_names_dict[signal["name"]] = {
                                                "rename": signal["name"],
                                                "delete": True
                                            }

                                    execution_rate = mdl.get_property_value(mdl.prop(container_handle, "execution_rate"))

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    create_internal_components(mdl, comp_handle, signal_names_dict, new_signals, execution_rate,
                                                               create_from_scratch=create_from_scratch)

                                    mdl.set_property_value(mdl.prop(container_handle, "signal_names_dict"), str({}))
                                ENDCODE
                            }

                            signal_names_dict {
                                description = "Used to help with renaming and deleting component terminals."
                                type = string
                                default_value = "{}"
                                nonvisible
                                no_evaluate
                            }

                            execution_rate {
                                description = ""
                                type = string
                                default_value = "100e-6"
                                no_evaluate
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                            CODE pre_validate
                                from typhoon.import_path.handlers.can_send import component_pre_validate

                                component_pre_validate(mdl, item_handle, "CAN Bus")

                                # Reset hil id property value
                                # This value is updated during compile but it needs to be reseted before compile
                                # because copied value from component from different schematic may cause problem.
                                mdl.set_property_value(mdl.prop(item_handle, "hil_id"), 0)
                            ENDCODE

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.can_receive_dialog import CANReceiveDialog

                                dialog = CANReceiveDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                                dialog.exec_()
                            ENDCODE

                        }
                    }
                    [
                        size = 160, 120
                    ]

                }

                component Category "CAN FD" {

                    component can_fd_setup  "CAN FD Setup"    { require = "sw_can_bus and hw_can_fd" }

                    component Subsystem "CAN FD Send" {

                        layout = dynamic
                        require = "sw_can_bus and hw_can_fd"

                        mask {
                            icon = "image('can/can_fd_send.svg')"
                            help_file = "can_fd_protocol.html#can_fd_protocol__section_vgx_ghf_l1b"

                            description = ""

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            db_messages {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            name {
                                description = ""
                                type = string
                                default_value = "CAN message"
                                nonvisible
                                no_evaluate
                            }

                            can_controller {
                                description = ""
                                type = string
                                default_value = "CAN1"
                                no_evaluate
                            }

                            data_input {
                                description = ""
                                type = string
                                default_value = "Dialog window"
                                no_evaluate

                                CODE property_value_changed

                                    # Backward compatibility
                                    if new_value == "CANdb file":
                                        mdl.set_property_value(prop_handle, "Configuration file")

                                ENDCODE
                            }

                            file_label {
                                description = ""
                                type = string
                                default_value = "Configuration file"
                                nonvisible
                                no_evaluate
                            }

                            file_path {
                                description = "CAN Configuration file."
                                label = "Path to the configuration file"
                                type = string
                                widget = file_chooser *.dbc *.arxml
                                default_value = "Configuration file"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import file_path_changed

                                    file_path_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            choose_message_values {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            choose_message {
                                description = ""
                                type = string
                                default_value = ""
                                no_evaluate

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import choose_message_changed

                                    choose_message_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            identifier_type {
                                description = ""
                                type = string
                                default_value = "11 bit"
                                no_evaluate
                            }

                            identifier_value {
                                description = ""
                                type = int
                                default_value = 100
                            }

                            dest_addr_source {
                                description = ""
                                type = string
                                default_value = "Fixed"
                                no_evaluate
                            }

                            src_addr_source {
                                description = ""
                                type = string
                                default_value = "Fixed"
                                no_evaluate
                            }

                            data_length {
                                description = ""
                                type = int
                                default_value = 1
                            }

                            transmit_type {
                                description = ""
                                type = string
                                default_value = "{'On event': True, 'On timer': False}"
                                no_evaluate

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import create_event_port

                                    comp_handle = mdl.get_sub_level_handle(container_handle)

                                    transmit_type = eval(new_value)
                                    create_event_port(mdl, comp_handle, transmit_type["On event"])
                                ENDCODE
                            }

                            transmit_period {
                                description = ""
                                type = real
                                default_value = 100
                            }

                            signals {
                                description = ""
                                type = string
                                default_value = "[]"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import create_internal_components, check_signals, update_dict_fields
                                    from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                                    create_from_scratch = False

                                    try:
                                        signals = eval(new_value)
                                        if isinstance(signals, dict):
                                            signals = [signals]

                                        new_signals = update_dict_fields(signals)

                                        check_signals(new_signals, mdl.get_property_value(mdl.prop(container_handle, "data_length")))
                                    except ValueError as e:
                                        mdl.error(
                                            str(e),
                                            context=prop_handle,
                                            kind=ERROR_PROPERTY_VALUE_INVALID
                                        )
                                        return

                                    signal_names_dict = eval(mdl.get_property_value(mdl.prop(container_handle, "signal_names_dict")))

                                    if not signal_names_dict:
                                        create_from_scratch = True

                                        signal_names_dict = {}
                                        for signal in new_signals:
                                            signal_names_dict[signal["name"]] = {
                                                "rename": signal["name"],
                                                "delete": True
                                            }

                                    transmit_type = eval(mdl.get_property_value(mdl.prop(container_handle, "transmit_type")))

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    create_internal_components(mdl, comp_handle, signal_names_dict, new_signals, 
                                                               on_event_send=transmit_type["On event"], create_from_scratch=create_from_scratch)

                                    mdl.set_property_value(mdl.prop(container_handle, "signal_names_dict"), str({}))
                                ENDCODE
                            }

                            signal_names_dict {
                                description = "Used to help with renaming and deleting component terminals."
                                type = string
                                default_value = "{}"
                                nonvisible
                                no_evaluate
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.can_fd_send_dialog import CANFDSendDialog

                                dialog = CANFDSendDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                                dialog.exec_()
                            ENDCODE

                            CODE pre_validate
                                from typhoon.import_path.handlers.can_send import component_pre_validate

                                component_pre_validate(mdl, item_handle, "CAN FD")

                                # Reset hil id property value
                                # This value is updated during compile but it needs to be reseted before compile
                                # because copied value from component from different schematic may cause problem.
                                mdl.set_property_value(mdl.prop(item_handle, "hil_id"), 0)
                            ENDCODE

                            CODE post_resolve

                                comp_handle = mdl.get_sub_level_handle(item_handle)

                                from typhoon.import_path.handlers.can_send import component_pre_compile

                                component_pre_compile(mdl, item_handle)
                            ENDCODE

                        }

                    }
                    [
                        size = 160, 120
                    ]

                    component Subsystem "CAN FD Receive" {

                        layout = dynamic
                        require = "sw_can_bus and hw_can_fd"

                        mask {
                            icon = "image('can/can_fd_receive.svg')"
                            help_file = "can_fd_protocol.html#can_fd_protocol__section_dqn_jqh_l1b"

                            description = ""

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            db_messages {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            name {
                                description = ""
                                type = string
                                default_value = "CAN message"
                                nonvisible
                                no_evaluate
                            }

                            can_controller {
                                description = ""
                                type = string
                                default_value = "CAN1"
                                no_evaluate
                            }

                            data_input {
                                description = ""
                                type = string
                                default_value = "Dialog window"
                                no_evaluate

                                CODE property_value_changed

                                    # Backward compatibility
                                    if new_value == "CANdb file":
                                        mdl.set_property_value(prop_handle, "Configuration file")

                                ENDCODE
                            }

                            file_label {
                                description = ""
                                type = string
                                default_value = "Configuration file"
                                nonvisible
                                no_evaluate
                            }

                            file_path {
                                description = "CAN Configuration file."
                                label = "Path to the configuration file"
                                type = string
                                widget = file_chooser *.dbc *.arxml
                                default_value = "Configuration file"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import file_path_changed

                                    file_path_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            choose_message_values {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            choose_message {
                                description = ""
                                type = string
                                default_value = ""
                                no_evaluate

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import choose_message_changed

                                    choose_message_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            identifier_type {
                                description = ""
                                type = string
                                default_value = "11 bit"
                                no_evaluate
                            }

                            identifier_value {
                                description = ""
                                type = int
                                default_value = 100
                            }

                            data_length {
                                description = ""
                                type = int
                                default_value = 1
                            }

                            signals {
                                description = ""
                                type = string
                                default_value = "[]"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import check_signals, update_dict_fields
                                    from typhoon.import_path.handlers.can_receive import create_internal_components
                                    from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                                    create_from_scratch = False

                                    try:
                                        signals = eval(new_value)
                                        if isinstance(signals, dict):
                                            signals = [signals]

                                        new_signals = update_dict_fields(signals)

                                        check_signals(new_signals, mdl.get_property_value(mdl.prop(container_handle, "data_length")))
                                    except ValueError as e:
                                        mdl.error(
                                            str(e),
                                            context=prop_handle,
                                            kind=ERROR_PROPERTY_VALUE_INVALID
                                        )
                                        return

                                    signal_names_dict = eval(mdl.get_property_value(mdl.prop(container_handle, "signal_names_dict")))

                                    if not signal_names_dict:
                                        create_from_scratch = True

                                        signal_names_dict = {}
                                        for signal in new_signals:
                                            signal_names_dict[signal["name"]] = {
                                                "rename": signal["name"],
                                                "delete": True
                                            }

                                    execution_rate = mdl.get_property_value(mdl.prop(container_handle, "execution_rate"))

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    create_internal_components(mdl, comp_handle, signal_names_dict, new_signals, execution_rate,
                                                               create_from_scratch=create_from_scratch)

                                    mdl.set_property_value(mdl.prop(container_handle, "signal_names_dict"), str({}))
                                ENDCODE
                            }

                            signal_names_dict {
                                description = "Used to help with renaming and deleting component terminals."
                                type = string
                                default_value = "{}"
                                nonvisible
                                no_evaluate
                            }

                            execution_rate {
                                description = ""
                                type = string
                                default_value = "100e-6"
                                no_evaluate
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                            CODE pre_validate
                                from typhoon.import_path.handlers.can_send import component_pre_validate

                                component_pre_validate(mdl, item_handle, "CAN FD")

                                # Reset hil id property value
                                # This value is updated during compile but it needs to be reseted before compile
                                # because copied value from component from different schematic may cause problem.
                                mdl.set_property_value(mdl.prop(item_handle, "hil_id"), 0)
                            ENDCODE

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.can_fd_receive_dialog import CANFDReceiveDialog

                                dialog = CANFDReceiveDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                                dialog.exec_()
                            ENDCODE

                        }
                    }
                    [
                        size = 160, 120
                    ]
                }

                component Category "J1939" {

                    component Subsystem  "J1939 Arbitration" {

                        layout = dynamic
                        require = "sw_can_bus"

                        component "core/SP output" "preferred_addr_in" {
                            dimension = "1"
                        }
                        [ position = 8000, 8000 ]

                        component "core/Data Type Conversion" "data_conversion" {
                            output_type = "uint"
                        }
                        [ position = 7800, 8000]

                        component "core/Limit" "limit" {
                            upper_limit = 253
                            lower_limit = 0
                        }
                        [ position = 7900, 8000]

                        component "core/SP input" "ecu_id_out" {
                            dimension = "1"
                            init_val = 254
                        }
                        [ position = 8200, 8000 ]

                        port preferred_addr {
                            position = left:1
                            direction = out
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 7700, 8000 ]

                        port ecu_id {
                            position = right:1
                            direction = in
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 8300, 8000 ]

                        connect preferred_addr "data_conversion.in"
                        connect "data_conversion.out" "limit.in"
                        connect "limit.out" "preferred_addr_in.in"
                        connect "ecu_id_out.out" ecu_id

                        mask {
                            icon = "image('can/j1939_arbitration.svg')"
                            help_file = "j1939_protocol.html#j1939_protocol__section_c4g_gzk_fpb"

                            description = "Component used for ECU address arbitration as defined in J1939."

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            can_controller {
                                label = "CAN controller"
                                description = "CAN controller"
                                type = string
                                widget = combo
                                combo_values = "CAN1", "CAN2"
                                default_value = "CAN1"
                            }

                            arbitrary_address_capable {
                                label = "Arbitrary address capable"
                                description = "Arbitrary address capable"
                                type = string
                                widget = combo
                                combo_values = "False", "True"
                                default_value = "False"
                            }

                            industry_group {
                                label = "Industry group"
                                description = "Industry group"
                                type = string
                                widget = combo
                                combo_values = "0 - Global", "1 - On-Highway", "2 - Agricultural and Forestry", "3 - Construction", "4 - Marine", "5 - Industry-Process"
                                default_value = "0 - Global"
                            }

                            vehicle_system_instance {
                                label = "Vehicle system instance"
                                description = "Vehicle system instance"
                                type = int
                                widget = edit
                                default_value = 0
                                min_value = 0
                                max_value = 15
                            }

                            vehicle_system {
                                label = "Vehicle system"
                                description = "Vehicle system"
                                type = int
                                widget = edit
                                default_value = 0
                                min_value = 0
                                max_value = 127
                            }

                            function {
                                label = "Function"
                                description = "Function"
                                type = int
                                widget = edit
                                default_value = 0
                                min_value = 0
                                max_value = 255
                            }

                            function_instance {
                                label = "Function instance"
                                description = "Function instance"
                                type = int
                                widget = edit
                                default_value = 0
                                min_value = 0
                                max_value = 31
                            }

                            ecu_instance {
                                label = "ECU instance"
                                description = "ECU instance"
                                type = int
                                widget = edit
                                default_value = 0
                                min_value = 0
                                max_value = 7
                            }

                            manufacturer_code {
                                label = "Manufacturer code"
                                description = "Manufacturer code"
                                type = int
                                widget = edit
                                default_value = 0
                                min_value = 0
                                max_value = 2047
                            }

                            identity_number {
                                label = "Identity number"
                                description = "Identity number"
                                type = int
                                widget = edit
                                default_value = 0
                                min_value = 0
                                max_value = 2097151
                            }
                        }
                    }
                    [
                        size = 120, 80
                    ]

                    component Subsystem "J1939 Send" {

                        layout = dynamic
                        require = "sw_can_bus"

                        mask {
                            icon = "image('can/j1939_pgn_send.svg')"
                            help_file = "j1939_protocol.html#j1939_protocol__section_ldm_5fl_fpb"

                            description = ""

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            db_messages {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            name {
                                description = ""
                                type = string
                                default_value = "CAN message"
                                nonvisible
                                no_evaluate
                            }

                            can_controller {
                                description = ""
                                type = string
                                default_value = "CAN1"
                                no_evaluate
                            }

                            data_input {
                                description = ""
                                type = string
                                default_value = "Dialog window"
                                no_evaluate

                                CODE property_value_changed

                                    # Backward compatibility
                                    if new_value == "CANdb file":
                                        mdl.set_property_value(prop_handle, "Configuration file")

                                ENDCODE
                            }

                            file_label {
                                description = ""
                                type = string
                                default_value = "Configuration file"
                                nonvisible
                                no_evaluate
                            }

                            file_path {
                                description = "CAN Configuration file."
                                label = "Path to the configuration file"
                                type = string
                                widget = file_chooser *.dbc *.arxml
                                default_value = "Configuration file"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import file_path_changed

                                    file_path_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            choose_message_values {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            choose_message {
                                description = ""
                                type = string
                                default_value = ""
                                no_evaluate

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import choose_message_changed

                                    choose_message_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            identifier_type {
                                description = ""
                                type = string
                                default_value = "29 bit"
                                no_evaluate
                            }

                            identifier_value {
                                description = ""
                                type = int
                                default_value = 100
                            }

                            dest_addr_source {
                                description = ""
                                type = string
                                default_value = "Fixed"
                                no_evaluate
                            }

                            src_addr_source {
                                description = ""
                                type = string
                                default_value = "Fixed"
                                no_evaluate
                            }

                            data_length {
                                description = ""
                                type = int
                                default_value = 8
                            }

                            transmit_type {
                                description = ""
                                type = string
                                default_value = "{'On event': True, 'On timer': False, 'On request': True}"
                                no_evaluate
                            }

                            transmit_period {
                                description = ""
                                type = real
                                default_value = 100
                            }

                            signals {
                                description = ""
                                type = string
                                default_value = "[]"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import create_internal_components, check_signals, update_dict_fields
                                    from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                                    create_from_scratch = False

                                    try:
                                        signals = eval(new_value)
                                        if isinstance(signals, dict):
                                            signals = [signals]

                                        new_signals = update_dict_fields(signals)

                                        check_signals(new_signals, mdl.get_property_value(mdl.prop(container_handle, "data_length")))
                                    except ValueError as e:
                                        mdl.error(
                                            str(e),
                                            context=prop_handle,
                                            kind=ERROR_PROPERTY_VALUE_INVALID
                                        )
                                        return

                                    signal_names_dict = eval(mdl.get_property_value(mdl.prop(container_handle, "signal_names_dict")))

                                    if not signal_names_dict:
                                        create_from_scratch = True

                                        signal_names_dict = {}
                                        for signal in new_signals:
                                            signal_names_dict[signal["name"]] = {
                                                "rename": signal["name"],
                                                "delete": True
                                            }

                                    transmit_type = eval(mdl.get_property_value(mdl.prop(container_handle, "transmit_type")))
                                    src_addr_source = mdl.get_property_value(mdl.prop(container_handle, "src_addr_source"))
                                    dest_addr_source = mdl.get_property_value(mdl.prop(container_handle, "dest_addr_source"))
                                    identifier_value = mdl.get_property_value(mdl.prop(container_handle, "identifier_value"))

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    create_internal_components(mdl, comp_handle, signal_names_dict, new_signals,
                                        on_event_send=transmit_type["On event"],
                                        create_from_scratch=create_from_scratch,
                                        src_addr_as_variable=src_addr_source == "Variable",
                                        dst_addr_as_variable=dest_addr_source == "Variable" and ((identifier_value >> 8) & 0xFF) < 240
                                    )

                                    mdl.set_property_value(mdl.prop(container_handle, "signal_names_dict"), str({}))
                                ENDCODE
                            }

                            signal_names_dict {
                                description = "Used to help with renaming and deleting component terminals."
                                type = string
                                default_value = "{}"
                                nonvisible
                                no_evaluate
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.j1939_send_dialog import J1939SendDialog

                                dialog = J1939SendDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                                dialog.exec_()
                            ENDCODE

                            CODE pre_validate
                                from typhoon.import_path.handlers.can_send import component_pre_validate

                                component_pre_validate(mdl, item_handle, "J1939")

                                # Reset hil id property value
                                # This value is updated during compile but it needs to be reseted before compile
                                # because copied value from component from different schematic may cause problem.
                                mdl.set_property_value(mdl.prop(item_handle, "hil_id"), 0)
                            ENDCODE

                            CODE post_resolve

                                comp_handle = mdl.get_sub_level_handle(item_handle)

                                from typhoon.import_path.handlers.can_send import component_pre_compile

                                component_pre_compile(mdl, item_handle)
                            ENDCODE

                        }

                    }
                    [
                        size = 160, 120
                    ]

                    component Subsystem "J1939 Receive" {

                        layout = dynamic
                        require = "sw_can_bus"

                        mask {
                            icon = "image('can/j1939_pgn_receive.svg')"
                            help_file = "j1939_protocol.html#j1939_protocol__section_pzs_n3l_fpb"

                            description = ""

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            db_messages {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            name {
                                description = ""
                                type = string
                                default_value = "CAN message"
                                nonvisible
                                no_evaluate
                            }

                            can_controller {
                                description = ""
                                type = string
                                default_value = "CAN1"
                                no_evaluate
                            }

                            data_input {
                                description = ""
                                type = string
                                default_value = "Dialog window"
                                no_evaluate

                                CODE property_value_changed

                                    # Backward compatibility
                                    if new_value == "CANdb file":
                                        mdl.set_property_value(prop_handle, "Configuration file")

                                ENDCODE
                            }

                            file_label {
                                description = ""
                                type = string
                                default_value = "Configuration file"
                                nonvisible
                                no_evaluate
                            }

                            file_path {
                                description = "CAN Configuration file."
                                label = "Path to the configuration file"
                                type = string
                                widget = file_chooser *.dbc *.arxml
                                default_value = "Configuration file"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import file_path_changed

                                    file_path_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            choose_message_values {
                                description = ""
                                type = string
                                default_value = "[]"
                                nonvisible
                                no_evaluate
                            }

                            choose_message {
                                description = ""
                                type = string
                                default_value = ""
                                no_evaluate

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import choose_message_changed

                                    choose_message_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            identifier_type {
                                description = ""
                                type = string
                                default_value = "29 bit"
                                no_evaluate
                            }

                            identifier_value {
                                description = ""
                                type = int
                                default_value = 100
                            }

                            dest_addr_source {
                                description = ""
                                type = string
                                default_value = "Fixed"
                                no_evaluate
                            }

                            src_addr_source {
                                description = ""
                                type = string
                                default_value = "Fixed"
                                no_evaluate
                            }

                            data_length {
                                description = ""
                                type = int
                                default_value = 8
                            }

                            signals {
                                description = ""
                                type = string
                                default_value = "[]"

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.can_send import check_signals, update_dict_fields
                                    from typhoon.import_path.handlers.can_receive import create_internal_components
                                    from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                                    create_from_scratch = False

                                    try:
                                        signals = eval(new_value)
                                        if isinstance(signals, dict):
                                            signals = [signals]

                                        new_signals = update_dict_fields(signals)

                                        check_signals(new_signals, mdl.get_property_value(mdl.prop(container_handle, "data_length")))
                                    except ValueError as e:
                                        mdl.error(
                                            str(e),
                                            context=prop_handle,
                                            kind=ERROR_PROPERTY_VALUE_INVALID
                                        )
                                        return

                                    signal_names_dict = eval(mdl.get_property_value(mdl.prop(container_handle, "signal_names_dict")))

                                    if not signal_names_dict:
                                        create_from_scratch = True

                                        signal_names_dict = {}
                                        for signal in new_signals:
                                            signal_names_dict[signal["name"]] = {
                                                "rename": signal["name"],
                                                "delete": True
                                            }

                                    execution_rate = mdl.get_property_value(mdl.prop(container_handle, "execution_rate"))

                                    dest_addr_source = mdl.get_property_value(mdl.prop(container_handle, "dest_addr_source"))
                                    src_addr_source = mdl.get_property_value(mdl.prop(container_handle, "src_addr_source"))
                                    identifier_value = mdl.get_property_value(mdl.prop(container_handle, "identifier_value"))

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    create_internal_components(mdl, comp_handle, signal_names_dict, new_signals, execution_rate,
                                                               src_addr_as_variable=src_addr_source == "Variable",
                                                               dst_addr_as_variable=dest_addr_source == "Variable" and ((identifier_value >> 8) & 0xFF) < 240)

                                    mdl.set_property_value(mdl.prop(container_handle, "signal_names_dict"), str({}))
                                ENDCODE
                            }

                            signal_names_dict {
                                description = "Used to help with renaming and deleting component terminals."
                                type = string
                                default_value = "{}"
                                nonvisible
                                no_evaluate
                            }

                            execution_rate {
                                description = ""
                                type = string
                                default_value = "100e-6"
                                nonvisible
                                no_evaluate
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                            CODE pre_validate
                                from typhoon.import_path.handlers.can_send import component_pre_validate

                                component_pre_validate(mdl, item_handle, "J1939")

                                # Reset hil id property value
                                # This value is updated during compile but it needs to be reseted before compile
                                # because copied value from component from different schematic may cause problem.
                                mdl.set_property_value(mdl.prop(item_handle, "hil_id"), 0)
                            ENDCODE

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.j1939_receive_dialog import J1939ReceiveDialog

                                dialog = J1939ReceiveDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                                dialog.exec_()
                            ENDCODE

                        }

                    }
                    [
                        size = 160, 120
                    ]

                }

                component Category "CANopen" {

                    component Subsystem "CANopen Slave" {
                        layout = dynamic
                        require = "sw_can_bus"
                        previous_names = "CANOpen Slave"

                        mask {
                            icon = "image('can/canopen_slave.svg')"
                            help_file = "canopen_protocol.html#canopen_protocol.dita__section_apf_pvl_g3b"

                            description = ""

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            load_default_values {
                                description = ""
                                type = bool
                                default_value = True
                                nonvisible
                            }

                            file_content {
                                description = "Store the content of EDS file"
                                type = string
                                default_value = ""
                                no_evaluate
                                nonvisible
                            }

                            file_name {
                                description = "EDS file name"
                                type = string
                                default_value = ""
                                no_evaluate
                                nonvisible
                            }

                            can_controller {
                                description = ""
                                type = string
                                default_value = "CAN1"
                                nonvisible
                                no_evaluate
                            }

                            baudrate {
                                description = "Baudrate value"
                                type = string
                                default_value = ""
                                no_evaluate
                                nonvisible
                            }

                            baudrate_values {
                                description = "Baudrate combo value"
                                type = string
                                default_value = "[]"
                                no_evaluate
                                nonvisible
                            }

                            slave_id {
                                description = "Slave ID value"
                                type = string
                                default_value = "0x10"
                                no_evaluate
                                nonvisible
                            }

                            model_control_changes {
                                description = "Track of all changes made to model control field"
                                type = string
                                default_value = "{}"
                                no_evaluate
                                nonvisible
                            }

                            value_changes {
                                description = "Track of all changes made to value field"
                                type = string
                                default_value = "{}"
                                no_evaluate
                                nonvisible
                            }

                            terminal_type_changes {
                                description = "Track of all changes made to terminal type field"
                                type = string
                                default_value = "{}"
                                no_evaluate
                                nonvisible
                            }

                            execution_rate {
                                description = ""
                                type = string
                                default_value = "100e-6"
                                nonvisible
                                no_evaluate
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.canopen_slave_dialog import CANopenSlaveDialog

                            dialog = CANopenSlaveDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                            dialog.exec_()
                        ENDCODE

                        CODE init
                            from typhoon.import_path.handlers.canopen_slave import component_init

                            component_init(mdl, item_handle)
                        ENDCODE

                        CODE pre_compile
                            from typhoon.import_path.handlers.canopen_slave import component_pre_compile

                            component_pre_compile(mdl, item_handle)
                        ENDCODE
                    }
                    [
                        size = 240, 120
                    ]

                }

            }

            component Category "EtherCAT" {
                visible = "real_time"

                component Subsystem "EtherCAT Slave" {

                    layout = dynamic
                    require = "sw_ethercat"

                    mask {

                        icon = "image('EtherCAT_Slave.svg')"
                        help_file = "ethercat_protocol.html#ethercat_protocol__section_kq1_5h1_snb"
                        description = "Sends and receives data over EtherCAT protocol. Only PDO transmission is supported (no mailbox protocols). RxPDO and TxPDO entries which correspond to the variables and constants to be transmitted should be defined in the provided ESI configuration file (below)."

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = 100e-6
                        }

                        pdo_configuration {
                            label = "PDO configuration"
                            description = "String representation of the PDO configuration"
                            type = string
                            default_value = "{}"
                            nonvisible
                        }

                        sm_configuration {
                            label = "SyncManager configuration"
                            description = "String representation of the SyncManager configuration"
                            type = string
                            default_value = "{}"
                            nonvisible
                        }

                        vendor_and_product_info {
                            label = "Vendor and product information"
                            description = "Vendor and product information"
                            type = string
                            default_value = "{}"
                            nonvisible
                        }

                        hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                        CODE init
                            from typhoon.import_path.handlers.ethercat import create_terminals

                            pdos = eval(mdl.get_property_value(mdl.prop(item_handle, "pdo_configuration")))
                            create_terminals(mdl, item_handle, pdos)
                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.ethercat_dialog import EtherCATSlaveDialog

                            dialog = EtherCATSlaveDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                            dialog.exec_()
                        ENDCODE

                    }

                }
                [
                    position = 8240, 8104
                    size = 240, 120
                ]

            }

            component Category "IEC 61850" {
                visible = "real_time"

                component Category "Sampled Values" {

                    component comm_sv_setup  "SV Setup"   { }

                    component Subsystem "SV Publisher"  {

                        layout = dynamic
                        require = "sw_iec61850"

                        component "core/Gain" "I_scale" {
                            gain = 1000
                        }
                        [ position = 8000, 8100 ]

                        component "core/Gain" "V_scale" {
                            gain = 100
                        }
                        [ position = 8000, 8300 ]

                        component "core/Data Type Conversion" "I_convert" {
                            output_type = "int"
                        }
                        [ position = 8100, 8100 ]

                        component "core/Data Type Conversion" "V_convert" {
                            output_type = "int"
                        }
                        [ position = 8100, 8300 ]

                        component "core/Byte Swap" "I_byte_swap" {
                            out_type = "uint"
                        }
                        [ position = 8200, 8100 ]

                        component "core/Byte Swap" "IQ_byte_swap" {
                            out_type = "uint"
                        }
                        [ position = 8200, 8200 ]

                        component "core/Byte Swap" "V_byte_swap" {
                            out_type = "uint"
                        }
                        [ position = 8200, 8300 ]

                        component "core/Byte Swap" "VQ_byte_swap" {
                            out_type = "uint"
                        }
                        [ position = 8200, 8400 ]

                        component "core/Bus Split" "I_bus_split" {
                            outputs = "4"
                        }
                        [ position = 8300, 8100 ]

                        component "core/Bus Split" "IQ_bus_split" {
                            outputs = "4"
                        }
                        [ position = 8300, 8200 ]

                        component "core/Bus Split" "V_bus_split" {
                            outputs = "4"
                        }
                        [ position = 8300, 8300 ]

                        component "core/Bus Split" "VQ_bus_split" {
                            outputs = "4"
                        }
                        [ position = 8300, 8400 ]

                        component "core/Bus Join" "bus_join" {
                            inputs = "16"
                        }
                        [ position = 8400, 8250 ]

                        component "core/SP output" "SV_data" {
                            write_method = "Custom function"
                        }
                        [ position = 8500, 8250 ]

                        port I {
                            position = left:1
                            direction = out
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 7900, 8100 ]

                        port V {
                            position = left:3
                            direction = out
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 7900, 8300 ]

                        connect I "I_scale.in"
                        connect V "V_scale.in"
                        connect "I_scale.out" "I_convert.in"
                        connect "V_scale.out" "V_convert.in"
                        connect "I_convert.out" "I_byte_swap.in"
                        connect "V_convert.out" "V_byte_swap.in"
                        connect "I_byte_swap.out" "I_bus_split.in"
                        connect "IQ_byte_swap.out" "IQ_bus_split.in"
                        connect "V_byte_swap.out" "V_bus_split.in"
                        connect "VQ_byte_swap.out" "VQ_bus_split.in"
                        connect "I_bus_split.out" "bus_join.in"
                        connect "I_bus_split.out1" "bus_join.in2"
                        connect "I_bus_split.out2" "bus_join.in4"
                        connect "I_bus_split.out3" "bus_join.in6"
                        connect "IQ_bus_split.out" "bus_join.in1"
                        connect "IQ_bus_split.out1" "bus_join.in3"
                        connect "IQ_bus_split.out2" "bus_join.in5"
                        connect "IQ_bus_split.out3" "bus_join.in7"
                        connect "V_bus_split.out" "bus_join.in8"
                        connect "V_bus_split.out1" "bus_join.in10"
                        connect "V_bus_split.out2" "bus_join.in12"
                        connect "V_bus_split.out3" "bus_join.in14"
                        connect "VQ_bus_split.out" "bus_join.in9"
                        connect "VQ_bus_split.out1" "bus_join.in11"
                        connect "VQ_bus_split.out2" "bus_join.in13"
                        connect "VQ_bus_split.out3" "bus_join.in15"
                        connect "bus_join.out" "SV_data.in"

                        mask{
                            icon = "image('iec61850/SV_Publisher.svg')"
                            help_file = "iec_61850_sampled_values_protocol.html#reference_qhf_nmt_qz__section_edv_ncz_ddb"

                            description = "Implements IEC 61850 SV protocol publisher functionality."

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            asdu_create {
                                description = "Chose if the component will generate new SV message or the data will be a part of the existing SV message."
                                label = "Create"
                                widget = combo
                                type = string
                                combo_values = "New SV message", "Sequence ASDU"
                                default_value = "New SV message"
                                group = "General:1"

                                CODE property_value_edited

                                    dialog_dynamics(mdl, container_handle, "asdu_create", new_value)

                                ENDCODE

                                CODE property_value_changed

                                    dialog_dynamics(mdl, container_handle, "asdu_create", new_value)

                                ENDCODE
                            }

                            destination_mac {
                                description = "Destination MAC address"
                                label = "Destination MAC address"
                                type = string
                                widget = edit
                                default_value = "01:0C:CD:04:00:00"
                                group = "General:1"
                                no_evaluate
                            }

                            user_priority {
                                description = "SV message priority (1=lowest - 7=highest)"
                                label = "User priorty"
                                type = int
                                widget = edit
                                default_value = 4
                                min_value = 1
                                max_value = 7
                                group = "General:1"
                            }

                            vlanID {
                                description = "Virtual LAN identification (0 - 4095)"
                                label = "VLAN ID"
                                type = int
                                widget = edit
                                default_value = 0
                                min_value = 0
                                max_value = 4095
                                group = "General:1"
                            }

                            appID {
                                description = "Application identifier (0x4000 - 0x7FFF; 16384 - 32767)"
                                label = "APP ID"
                                type = string
                                widget = edit
                                default_value = "0x4000"
                                no_evaluate
                                group = "General:1"
                            }

                            simulate {
                                description = "The value defines the Simulate bit in the Reserved1 field of the SV message."
                                label = "Simulate"
                                type = string
                                widget = combo
                                combo_values = "False", "True"
                                default_value = "False"
                                group = "General:1"
                            }

                            simulate_source {
                                description = "Choose how to define the Simulate flag value"
                                label = "source"
                                widget = combo
                                type = string
                                combo_values = "Dialog", "Model", "SCADA"
                                default_value = "Dialog"
                                keepline

                                CODE property_value_edited

                                    dialog_dynamics(mdl, container_handle, "simulate_source", new_value)

                                ENDCODE
    
                                CODE property_value_changed
                                    from typhoon.import_path.handlers.sv_publisher import simulate_source_changed
    
                                    dialog_dynamics(mdl, container_handle, "simulate_source", new_value)
                                    simulate_source_changed(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            choose_appID {
                                description = "Chose to which message to append the ASDU"
                                label = "Choose existing SV message"
                                widget = combo
                                type = string
                                combo_values = dynamic
                                default_value = ""
                                group = "General:1"
                            }

                            asdu_index {
                                description = "Choose the index of ASDU in SV message"
                                label = "ASDU index"
                                widget = combo
                                type = string
                                combo_values = "1", "2", "3", "4", "5", "6", "7", "8"
                                default_value = "1"
                                group = "General:1"
                            }

                            svID {
                                description = "SV message identificator"
                                label = "svID"
                                type = string
                                widget = edit
                                default_value = "ExampleSVMessage"
                                group = "ASDU:2"
                                no_evaluate
                            }

                            confRev {
                                description = "Configuration revision"
                                label = "confRev"
                                type = int
                                widget = edit
                                default_value = 1
                                min_value = 0
                                max_value = 4294967295
                                group = "ASDU:2"
                            }

                            smpSynch {
                                description = "Sample synchronization type: None (0 - No synchronization), Local (1 - Synchronized in Local network), Remote (2 - Synchronized by the Remote time source)"
                                label = "Synchronization"
                                widget = combo
                                type = string
                                combo_values = "None", "Local", "Remote"
                                default_value = "None"
                                group = "ASDU:2"
                            }

                            smpSynch_value_type {
                                description = "Define if the Synchronization value is static (defined from the Dialog) or is it dynamicaly changed douring the simulation run.
If the value is dynamic, the synchronization value will depend on the status of PTP synchronization."
                                label = "value is"
                                widget = combo
                                type = string
                                combo_values = "static", "dynamic"
                                default_value = "static"
                                group = "ASDU:2"
                                keepline

                                CODE property_value_edited

                                    dialog_dynamics(mdl, container_handle, "smpSynch_value_type", new_value)

                                ENDCODE

                                CODE property_value_changed

                                    dialog_dynamics(mdl, container_handle, "smpSynch_value_type", new_value)

                                ENDCODE
                            }

                            gmIdentity {
                                description = "This hexadecimal value represents the grandmaster identity when synchronizing over PTP. "
                                label = "gmIdentity"
                                widget = edit
                                type = string
                                default_value = "0000000000000000"
                                group = "ASDU:2"
                                no_evaluate
                            }

                            gmIdentity_value_type {
                                description = "Define if the gmIdentity value is static (defined from the Dialog), dynamicaly assigned or not used (none)."
                                label = "value is"
                                widget = combo
                                type = string
                                combo_values = "static", "dynamic", "none"
                                default_value = "dynamic"
                                group = "ASDU:2"
                                keepline

                                CODE property_value_edited

                                    dialog_dynamics(mdl, container_handle, "gmIdentity_value_type", new_value)

                                ENDCODE

                                CODE property_value_changed

                                    dialog_dynamics(mdl, container_handle, "gmIdentity_value_type", new_value)

                                ENDCODE
                            }

                            i_scaling {
                                description = "Current scaling factor"
                                label = "I scaling factor"
                                type = real
                                widget = edit
                                default_value = 1000
                                group = "ASDU:2"

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID, ITEM_COMPONENT

                                    comp_handle = mdl.get_sub_level_handle(container_handle)

                                    if is_number(new_value):
                                        i_scale = mdl.get_item("I_scale", comp_handle, ITEM_COMPONENT)
                                        mdl.set_property_value(mdl.prop(i_scale, "gain"), new_value)
                                    else:
                                        mdl.error(
                                            "Current scaling factor must be a number.",
                                            context=prop_handle,
                                            kind=ERROR_PROPERTY_VALUE_INVALID
                                        )
                                ENDCODE
                            }

                            i_type {
                                description = "Value of this type will be written to SV message"
                                label = "I type"
                                type = string
                                widget = combo
                                combo_values = "real", "int", "uint"
                                default_value = "int"
                                group = "ASDU:2"
                                keepline

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    i_convert = mdl.get_item("I_convert", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(i_convert, "output_type"), new_value)
                                ENDCODE
                            }

                            v_scaling {
                                description = "Voltage scaling factor"
                                label = "V scaling factor"
                                type = real
                                widget = edit
                                default_value = 100
                                group = "ASDU:2"

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID, ITEM_COMPONENT

                                    comp_handle = mdl.get_sub_level_handle(container_handle)

                                    if is_number(new_value):
                                        v_scale = mdl.get_item("V_scale", comp_handle, ITEM_COMPONENT)
                                        mdl.set_property_value(mdl.prop(v_scale, "gain"), new_value)
                                    else:
                                        mdl.error(
                                            "Voltage scaling factor must be a number.",
                                            context=prop_handle,
                                            kind=ERROR_PROPERTY_VALUE_INVALID
                                        )
                                ENDCODE
                            }

                            v_type {
                                description = "Value of this type will be written to SV message"
                                label = "V type"
                                type = string
                                widget = combo
                                combo_values = "real", "int", "uint"
                                default_value = "int"
                                group = "ASDU:2"
                                keepline

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    v_convert = mdl.get_item("V_convert", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(v_convert, "output_type"), new_value)
                                ENDCODE
                            }

                            generate_quality {
                                description = "Generate quality through GUI"
                                label = ""
                                widget = button
                                type = string
                                default_value = "Generate quality"
                                group = "Signal Quality:3"

                                CODE button_clicked
                                    from typhoon.import_path.handlers.sv_publisher import generate_quality

                                    generate_quality(mdl, container_handle)
                                ENDCODE
                            }

                            iq_type {
                                description = "The way the current quality value is specified."
                                label = "Current signal quality"
                                type = string
                                widget = combo
                                combo_values = "Fixed", "Variable"
                                default_value = "Variable"
                                group = "Signal Quality:3"

                                CODE property_value_edited

                                    dialog_dynamics(mdl, container_handle, "iq_type", new_value)

                                ENDCODE

                                CODE property_value_changed

                                    dialog_dynamics(mdl, container_handle, "iq_type", new_value)

                                ENDCODE
                            }

                            ia_quality {
                                description = "Quality value for current Ia"
                                label = "Ia quality"
                                type = string
                                widget = edit
                                default_value = "00000000000000"
                                group = "Signal Quality:3"
                                no_evaluate
                            }

                            ib_quality {
                                description = "Quality value for current Ib"
                                label = "Ib quality"
                                type = string
                                widget = edit
                                default_value = "00000000000000"
                                group = "Signal Quality:3"
                                no_evaluate
                            }

                            ic_quality {
                                description = "Quality value for current Ic"
                                label = "Ic quality"
                                type = string
                                widget = edit
                                default_value = "00000000000000"
                                group = "Signal Quality:3"
                                no_evaluate
                            }

                            in_quality {
                                description = "Quality value for current In"
                                label = "In quality"
                                type = string
                                widget = edit
                                default_value = "00000000000000"
                                group = "Signal Quality:3"
                                no_evaluate
                            }

                            vq_type {
                                description = "The way the voltage quality value is specified."
                                label = "Voltage signal quality"
                                type = string
                                widget = combo
                                combo_values = "Fixed", "Variable"
                                default_value = "Variable"
                                group = "Signal Quality:3"

                                CODE property_value_edited

                                    dialog_dynamics(mdl, container_handle, "vq_type", new_value)

                                ENDCODE

                                CODE property_value_changed

                                    dialog_dynamics(mdl, container_handle, "vq_type", new_value)

                                ENDCODE
                            }

                            va_quality {
                                description = "Quality value for current Va"
                                label = "Va quality"
                                type = string
                                widget = edit
                                default_value = "00000000000000"
                                group = "Signal Quality:3"
                                no_evaluate
                            }

                            vb_quality {
                                description = "Quality value for current Vb"
                                label = "Vb quality"
                                type = string
                                widget = edit
                                default_value = "00000000000000"
                                group = "Signal Quality:3"
                                no_evaluate
                            }

                            vc_quality {
                                description = "Quality value for current Vc"
                                label = "Vc quality"
                                type = string
                                widget = edit
                                default_value = "00000000000000"
                                group = "Signal Quality:3"
                                no_evaluate
                            }

                            vn_quality {
                                description = "Quality value for current Vn"
                                label = "Vn quality"
                                type = string
                                widget = edit
                                default_value = "00000000000000"
                                group = "Signal Quality:3"
                                no_evaluate
                            }

                            publisher_index {
                                description = "Index of tx buffer to write in"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                            CODE init
                                from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                from typhoon.import_path.handlers.sv_publisher import create_inputs

                                def dialog_dynamics(mdl, mask_handle, prop_name, new_value):
                                    if prop_name == "asdu_create":
                                        destination_mac_p = mdl.prop(mask_handle, "destination_mac")
                                        user_priority_p = mdl.prop(mask_handle, "user_priority")
                                        vlanID_p = mdl.prop(mask_handle, "vlanID")
                                        appID_p = mdl.prop(mask_handle, "appID")
                                        simulate_p = mdl.prop(mask_handle, "simulate")
                                        choose_appID_p = mdl.prop(mask_handle, "choose_appID")
                                        asdu_index_p = mdl.prop(mask_handle, "asdu_index")
                                        simulate_source = mdl.prop(mask_handle, "simulate_source")

                                        if new_value == "New SV message":
                                            mdl.show_property(destination_mac_p)
                                            mdl.show_property(user_priority_p)
                                            mdl.show_property(vlanID_p)
                                            mdl.show_property(appID_p)
                                            mdl.show_property(simulate_p)
                                            mdl.show_property(simulate_source)
                                            mdl.hide_property(choose_appID_p)

                                            mdl.set_property_combo_values(asdu_index_p, ["1"])
                                            mdl.disable_property(asdu_index_p)

                                            default_appID = mdl.get_property_default_value(appID_p)
                                            mdl.set_property_disp_value(appID_p, default_appID)
                                        else:
                                            mdl.hide_property(destination_mac_p)
                                            mdl.hide_property(user_priority_p)
                                            mdl.hide_property(vlanID_p)
                                            mdl.hide_property(appID_p)
                                            mdl.hide_property(simulate_p)
                                            mdl.show_property(choose_appID_p)
                                            mdl.hide_property(simulate_source)
                                            mdl.enable_property(asdu_index_p)

                                            from typhoon.import_path.handlers.sv_publisher import get_appID_values

                                            appID_values = get_appID_values(mdl, mdl.get_parent(mask_handle)) or ["dynamic"]

                                            mdl.set_property_combo_values(choose_appID_p, appID_values)
                                            mdl.set_property_disp_value(choose_appID_p, appID_values[0])
                                            mdl.set_property_combo_values(asdu_index_p, [str(val) for val in range(2,9)])

                                    elif prop_name == "iq_type":
                                        ia_quality = mdl.prop(mask_handle, "ia_quality")
                                        ib_quality = mdl.prop(mask_handle, "ib_quality")
                                        ic_quality = mdl.prop(mask_handle, "ic_quality")
                                        in_quality = mdl.prop(mask_handle, "in_quality")

                                        if new_value == "Fixed":
                                            mdl.show_property(ia_quality)
                                            mdl.show_property(ib_quality)
                                            mdl.show_property(ic_quality)
                                            mdl.show_property(in_quality)
                                        else:
                                            mdl.hide_property(ia_quality)
                                            mdl.hide_property(ib_quality)
                                            mdl.hide_property(ic_quality)
                                            mdl.hide_property(in_quality)

                                    elif prop_name == "vq_type":
                                        va_quality = mdl.prop(mask_handle, "va_quality")
                                        vb_quality = mdl.prop(mask_handle, "vb_quality")
                                        vc_quality = mdl.prop(mask_handle, "vc_quality")
                                        vn_quality = mdl.prop(mask_handle, "vn_quality")

                                        if new_value == "Fixed":
                                            mdl.show_property(va_quality)
                                            mdl.show_property(vb_quality)
                                            mdl.show_property(vc_quality)
                                            mdl.show_property(vn_quality)
                                        else:
                                            mdl.hide_property(va_quality)
                                            mdl.hide_property(vb_quality)
                                            mdl.hide_property(vc_quality)
                                            mdl.hide_property(vn_quality)

                                    elif prop_name == "simulate_source":
                                        simulate = mdl.prop(mask_handle, "simulate")

                                        if new_value == "Dialog":
                                            mdl.enable_property(simulate)
                                        else:
                                            mdl.disable_property(simulate)

                                    elif prop_name == "smpSynch_value_type":
                                        smpSynch = mdl.prop(mask_handle, "smpSynch")

                                        if new_value == "static":
                                            mdl.enable_property(smpSynch)
                                        else:
                                            mdl.disable_property(smpSynch)

                                    elif prop_name == "gmIdentity_value_type":
                                        smpSynch = mdl.prop(mask_handle, "gmIdentity")

                                        if new_value == "static":
                                            mdl.enable_property(smpSynch)
                                        else:
                                            mdl.disable_property(smpSynch)

                                comp_handle = mdl.get_sub_level_handle(item_handle)
                                create_inputs(mdl, item_handle)

                                i_type = mdl.get_property_value(mdl.prop(item_handle, "i_type"))
                                v_type = mdl.get_property_value(mdl.prop(item_handle, "v_type"))

                                i_convert = mdl.get_item("I_convert", parent=comp_handle, item_type=ITEM_COMPONENT)
                                v_convert = mdl.get_item("V_convert", parent=comp_handle, item_type=ITEM_COMPONENT)

                                mdl.set_property_value(mdl.prop(i_convert, "output_type"), i_type)
                                mdl.set_property_value(mdl.prop(v_convert, "output_type"), v_type)
                            ENDCODE

                            CODE before_change
                                from typhoon.import_path.handlers.sv_publisher import create_inputs, validate_properties
                                from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                                comp_handle = mdl.get_sub_level_handle(item_handle)
                                msg, prop = validate_properties(mdl, item_handle)
                                if msg != "OK":
                                    mdl.error(
                                        msg,
                                        context=prop,
                                        kind=ERROR_PROPERTY_VALUE_INVALID
                                    )
                                    return

                                msg, prop = create_inputs(mdl, item_handle)
                                if msg != "OK":
                                    mdl.error(
                                        msg,
                                        context=prop,
                                        kind=ERROR_PROPERTY_VALUE_INVALID
                                    )
                                    return

                                asdu_create = mdl.get_property_disp_value(mdl.prop(item_handle, "asdu_create"))
                                if asdu_create == "Sequence ASDU":
                                    mdl.set_property_value(mdl.prop(item_handle, "appID"), mdl.get_property_disp_value(mdl.prop(item_handle, "choose_appID")))

                            ENDCODE

                            CODE pre_validate
                                from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                                comp_handle = mdl.get_sub_level_handle(item_handle)
                                i_in_dim = mdl.get_terminal_dimension(mdl.term(mdl.get_item("I_scale", parent=comp_handle, item_type="component"), "in"))[0]
                                if i_in_dim != 'i' and i_in_dim != 4:
                                    mdl.error(
                                        "Current input signal must have dimension 4. (detected dimension is {})".format(i_in_dim),
                                        context=comp_handle,
                                        kind=ERROR_PROPERTY_VALUE_INVALID
                                    )
                                    return

                                v_in_dim = mdl.get_terminal_dimension(mdl.term(mdl.get_item("V_scale", parent=comp_handle, item_type="component"), "in"))[0]
                                if v_in_dim != 'i' and v_in_dim != 4:
                                    mdl.error(
                                        "Voltage input signal must have dimension 4. (detected dimension is {})".format(v_in_dim),
                                        context=comp_handle,
                                        kind=ERROR_PROPERTY_VALUE_INVALID
                                    )
                                    return

                                if mdl.get_property_value(mdl.prop(item_handle, "iq_type")) == "Variable":
                                    iq_in_dim = mdl.get_terminal_dimension(mdl.term(mdl.get_item("IQ_convert", parent=comp_handle, item_type="component"), "in"))[0]
                                    if iq_in_dim != 'i' and iq_in_dim != 4:
                                        mdl.error(
                                            "Current quality input signal must have dimension 4. (detected dimension is {})".format(iq_in_dim),
                                            context=comp_handle,
                                            kind=ERROR_PROPERTY_VALUE_INVALID
                                        )
                                        return

                                if mdl.get_property_value(mdl.prop(item_handle, "vq_type")) == "Variable":
                                    vq_in_dim = mdl.get_terminal_dimension(mdl.term(mdl.get_item("VQ_convert", parent=comp_handle, item_type="component"), "in"))[0]
                                    if vq_in_dim != 'i' and vq_in_dim != 4:
                                        mdl.error(
                                            "Voltage quality input signal must have dimension 4. (detected dimension is {})".format(vq_in_dim),
                                            context=comp_handle,
                                            kind=ERROR_PROPERTY_VALUE_INVALID
                                        )
                                        return

                                
                                asdu_create = mdl.get_property_disp_value(mdl.prop(item_handle, "asdu_create"))
                                choose_appID = mdl.get_property_disp_value(mdl.prop(item_handle, "choose_appID"))
                                if asdu_create == "Sequence ASDU" and choose_appID == "dynamic":
                                    mdl.error(
                                        "No message ID is selected. Please select a valid message ID for the sequence ASDU.",
                                        context=comp_handle,
                                        kind=ERROR_PROPERTY_VALUE_INVALID
                                    )
                                    return
                            ENDCODE

                            CODE pre_compile
                                from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                                # If the Simulate value is dictated through SCADA component, the SCADA cannot easily inherit the
                                # execution rate from the model, so the following code sets it explicetely
                                if mdl.get_property_value(mdl.prop(item_handle, "simulate_source")) == "SCADA":
                                    comp_handle = mdl.get_sub_level_handle(item_handle)
                                    
                                    SV_data = mdl.get_item("SV_data", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    Simulate = mdl.get_item("Simulate", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    simulate_source_sys_in = mdl.get_item("simulate_source_sys_in", parent=comp_handle, item_type=ITEM_COMPONENT)


                                    mdl.set_property_value(mdl.prop(Simulate, "execution_rate"), 
                                                           mdl.get_property_value(mdl.prop(SV_data, "execution_rate")))

                                    mdl.set_property_value(mdl.prop(simulate_source_sys_in, "execution_rate"), 
                                                           mdl.get_property_value(mdl.prop(SV_data, "execution_rate")))
                            ENDCODE
                        }


                    CODE on_dialog_open
                        mask_handle = mdl.get_mask(item_handle)
                        asdu_create = mdl.get_property_disp_value(mdl.prop(mask_handle, "asdu_create"))
                        choose_appID_p = mdl.prop(mask_handle, "choose_appID")
                        choose_appID = mdl.get_property_disp_value(choose_appID_p)

                        if asdu_create == "Sequence ASDU":
                            from typhoon.import_path.handlers.sv_publisher import get_appID_values

                            appID_values = get_appID_values(mdl, mdl.get_parent(mask_handle)) or ["dynamic"]
                            mdl.set_property_combo_values(choose_appID_p, appID_values)

                            if choose_appID == "dynamic" or choose_appID not in appID_values:
                                mdl.set_property_disp_value(choose_appID_p, appID_values[0])
                            else: 
                                mdl.set_property_disp_value(choose_appID_p, choose_appID)
                    ENDCODE

                    }
                    [
                        size = 112, 128
                    ]

                    component Subsystem "SV Subscriber" {

                        layout = dynamic
                        require = "sw_iec61850"

                        component "core/SP input" "SV_data" {
                            dimension = "16"
                            read_method = "Custom function"
                        }
                        [ position = 7900, 8250 ]

                        component "core/Bus Split" "bus_split" {
                            outputs = "16"
                        }
                        [ position = 8000, 8250 ]

                        component "core/Bus Join" "I_bus_join" {
                            inputs =" 4"
                        }
                        [ position = 8100, 8100 ]

                        component "core/Bus Join" "IQ_bus_join" {
                            inputs =" 4"
                        }
                        [ position = 8100, 8200 ]

                        component "core/Bus Join" "V_bus_join" {
                            inputs =" 4"
                        }
                        [ position = 8100, 8300 ]

                        component "core/Bus Join" "VQ_bus_join" {
                            inputs =" 4"
                        }
                        [ position = 8100, 8400 ]

                        component "core/Byte Swap" "I_byte_swap" {}
                        [ position = 8200, 8100 ]

                        component "core/Byte Swap" "IQ_byte_swap" {
                            out_type = "uint"
                        }
                        [ position = 8200, 8200 ]

                        component "core/Byte Swap" "V_byte_swap" {}
                        [ position = 8200, 8300 ]

                        component "core/Byte Swap" "VQ_byte_swap" {
                            out_type = "uint"
                        }
                        [ position = 8200, 8400 ]

                        component "core/Gain" "I_scale" {
                            gain = 0.001
                        }
                        [ position = 8300, 8100 ]

                        component "core/Gain" "V_scale" {
                            gain = 0.01
                        }
                        [ position = 8300, 8300 ]

                        port I {
                            position = right:1
                            direction = in
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = int
                                readonly = true
                            }
                        }
                        [ position = 8400, 8100 ]

                        port IQ {
                            position = right:2
                            direction = in
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = int
                                readonly = true
                            }
                        }
                        [ position = 8400, 8200 ]

                        port V {
                            position = right:3
                            direction = in
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = int
                                readonly = true
                            }
                        }
                        [ position = 8400, 8300 ]

                        port VQ {
                            position = right:4
                            direction = in
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = int
                                readonly = true
                            }
                        }
                        [ position = 8400, 8400 ]

                        connect "SV_data.out" "bus_split.in"
                        connect "bus_split.out" "I_bus_join.in"
                        connect "bus_split.out2" "I_bus_join.in1"
                        connect "bus_split.out4" "I_bus_join.in2"
                        connect "bus_split.out6" "I_bus_join.in3"
                        connect "bus_split.out1" "IQ_bus_join.in"
                        connect "bus_split.out3" "IQ_bus_join.in1"
                        connect "bus_split.out5" "IQ_bus_join.in2"
                        connect "bus_split.out7" "IQ_bus_join.in3"
                        connect "bus_split.out8" "V_bus_join.in"
                        connect "bus_split.out10" "V_bus_join.in1"
                        connect "bus_split.out12" "V_bus_join.in2"
                        connect "bus_split.out14" "V_bus_join.in3"
                        connect "bus_split.out9" "VQ_bus_join.in"
                        connect "bus_split.out11" "VQ_bus_join.in1"
                        connect "bus_split.out13" "VQ_bus_join.in2"
                        connect "bus_split.out15" "VQ_bus_join.in3"
                        connect "I_bus_join.out" "I_byte_swap.in"
                        connect "I_byte_swap.out" "I_scale.in"
                        connect "I_scale.out" I
                        connect "IQ_bus_join.out" "IQ_byte_swap.in"
                        connect "IQ_byte_swap.out" IQ
                        connect "V_bus_join.out" "V_byte_swap.in"
                        connect "V_byte_swap.out" "V_scale.in"
                        connect "V_scale.out" V
                        connect "VQ_bus_join.out" "VQ_byte_swap.in"
                        connect "VQ_byte_swap.out" VQ

                        mask{
                            icon = "image('iec61850/SV_Subscriber.svg')"
                            help_file = "iec_61850_sampled_values_protocol.html#reference_qhf_nmt_qz__section_mzj_4cz_ddb"

                            description = "Implements IEC 61850 SV protocol subscriber functionality."

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            appID {
                                description = "Subscribing SV message application ID"
                                label = "APP ID"
                                widget = edit
                                type = string
                                default_value = "0x4000"
                                no_evaluate
                            }

                            svID {
                                description = "Subscribing SV message ID"
                                label = "SV ID"
                                widget = edit
                                type = string
                                default_value = "ExampleSVMessage"
                                no_evaluate
                            }

                            i_scale {
                                description = "Current scaling factor"
                                label = "I scaling factor"
                                type = real
                                widget = edit
                                default_value = 0.001

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    if is_number(new_value):
                                        i_scale = mdl.get_item("I_scale", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        mdl.set_property_value(mdl.prop(i_scale, "gain"), new_value)
                                ENDCODE
                            }

                            i_type {
                                previous_names = "i_out_type"
                                description = "Set current ouput signal type"
                                label = " I type"
                                type = string
                                widget = combo
                                combo_values = "int", "uint", "real"
                                default_value = "int"
                                keepline

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    i_byte_swap = mdl.get_item("I_byte_swap", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(i_byte_swap, "out_type"), new_value)
                                ENDCODE
                            }

                            v_scale {
                                description = "Voltage scaling factor"
                                label = "V scaling factor"
                                type = real
                                widget = edit
                                default_value = 0.01

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                                    if is_number(new_value):
                                        comp_handle = mdl.get_sub_level_handle(container_handle)
                                        v_scale = mdl.get_item("V_scale", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        mdl.set_property_value(mdl.prop(v_scale, "gain"), new_value)
                                ENDCODE
                            }

                            v_type {
                                previous_names = "v_out_type"
                                description = "Set voltage ouput signal type"
                                label = "V type"
                                type = string
                                widget = combo
                                combo_values = "int", "uint", "real"
                                default_value = "int"
                                keepline

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    v_byte_swap = mdl.get_item("V_byte_swap", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    mdl.set_property_value(mdl.prop(v_byte_swap, "out_type"), new_value)
                                ENDCODE
                            }

                            execution_rate {
                                label = "Execution rate"
                                previous_names = "timer_interval"
                                description = "Signal processing execution rate"
                                widget = edit
                                type = real
                                default_value = 100e-6
                            }

                            subscriber_index {
                                description = "Index of RX buffer to write in"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            subscriber_offset {
                                description = "Offset in the RX buffer to write in"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                            CODE pre_validate
                                from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                                comp_handle = mdl.get_sub_level_handle(item_handle)
                                sv_data = mdl.get_item("SV_data", parent=comp_handle, item_type=ITEM_COMPONENT)
                                mdl.set_terminal_sp_type(mdl.term(sv_data, "out"), "uint")

                                i_scale = mdl.get_item("I_scale", parent=comp_handle, item_type=ITEM_COMPONENT)
                                mdl.set_terminal_sp_type(mdl.term(i_scale, "out"), "real")

                                v_scale = mdl.get_item("V_scale", parent=comp_handle, item_type=ITEM_COMPONENT)
                                mdl.set_terminal_sp_type(mdl.term(v_scale, "out"), "real")

                                execution_rate = mdl.get_property_disp_value(mdl.prop(item_handle, "execution_rate"))
                                mdl.set_property_disp_value(mdl.prop(sv_data, "execution_rate"), execution_rate)
                                mdl.set_property_value(mdl.prop(sv_data, "execution_rate"), execution_rate)
                            ENDCODE

                            CODE before_change
                                from typhoon.import_path.handlers.sv_subscriber import validate_properties
                                from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                                msg, prop = validate_properties(mdl, item_handle)
                                if msg != "OK":
                                    mdl.error(
                                        msg,
                                        context=prop,
                                        kind=ERROR_PROPERTY_VALUE_INVALID
                                    )
                                    return
                            ENDCODE

                        }


                    }
                    [
                        size = 112, 128
                    ]
                }

                component Category "GOOSE" {

                    component Subsystem "GOOSE Publisher" iec_goose_publish {

                        layout = dynamic
                        require = "sw_iec61850"
                        previous_names = "Goose Publisher"

                        port data{
                            position = left auto
                            kind = sp
                            direction = out
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [
                            position = 150, 150
                        ]

                        component gen_sys_out "goose_data_in" gen_sys_out{}
                        [
                            position = 200, 150
                        ]

                        connect data "goose_data_in.in"

                        mask {

                            icon = "image('iec61850/GOOSE_Publisher.svg')"
                            help_file = "iec_61850_goose_protocol.html#reference_qhf_nmt_qz__section_nqm_1nt_qz"

                            description = "Configuration should be defined with appropriate configuration file."

                            configuration{
                                description = "IED configuration from configuration file."
                                label = "Path to configuration file"
                                type = string
                                widget = file_chooser *.icd *.ssd *.scd
                                default_value = "path to configuration file"

                                CODE property_value_edited
                                    from typhoon.import_path.handlers.goose_publisher import configuration_property_edited

                                    configuration_property_edited(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            ied {
                                default_value = ""
                                label = "IED"
                                description = "IED to simulate from configuration file"
                                type = string
                                widget = combo
                                combo_values = dynamic

                                CODE property_value_edited
                                    from typhoon.import_path.handlers.goose_publisher import ied_property_edited

                                    ied_property_edited(mdl, container_handle, new_value)
                                ENDCODE

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.goose_publisher import ied_property_edited

                                    ied_property_edited(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            gooseCB {
                                default_value = ""
                                label = "GOOSE Control Block"
                                description = "GOOSE Control Block name as defined in configuration file"
                                type = string
                                widget = combo
                                combo_values = dynamic

                                CODE property_value_edited
                                    from typhoon.import_path.handlers.goose_publisher import gooseCB_property_edited

                                    gooseCB_property_edited(mdl, container_handle, new_value)
                                ENDCODE

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.goose_publisher import gooseCB_property_edited

                                    gooseCB_property_edited(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            preview {
                                label = ""
                                description = "Displays GOOSE data."
                                widget = button
                                type = string
                                default_value = "Data preview"
                                keepline

                                CODE button_clicked
                                    from typhoon.import_path.handlers.goose_publisher import preview_button_clicked

                                    preview_button_clicked(mdl, container_handle)
                                ENDCODE
                            }

                            gcb_data_text {
                                label = "GOOSE data preview text"
                                description = "GOOSE data preview text"
                                type = string
                                widget = edit
                                default_value = "No information available"
                                nonvisible
                                no_evaluate
                            }

                            ied_values {
                                label = "IED values"
                                description = "List of names for ied combobox"
                                type = string
                                widget = edit
                                default_value = "None"
                                nonvisible
                                no_evaluate
                            }

                            gooseCB_values {
                                label = "GOOSE control block values"
                                description = "List of names gor gooseCB combobox"
                                type = string
                                widget = edit
                                default_value = "None"
                                nonvisible
                                no_evaluate
                            }

                            data_set {
                                default_value = ""
                                label = "Data set name"
                                description = "Data set name as defined in configuration file"
                                type = string
                                widget = edit

                                nonvisible
                                no_evaluate
                            }

                            ControlBlocks_values {
                                label = "Control blocks values"
                                description = "List of control blocks for GOOSE bublisher"
                                type = string
                                widget = edit
                                default_value = "None"
                                nonvisible
                                no_evaluate
                            }

                            execution_rate {
                                label = "Execution rate"
                                previous_names = "timer_interval"
                                description = "Signal processing execution rate"
                                widget = edit
                                type = real
                                default_value = inherit
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                            CODE init
                                from typhoon.import_path.handlers.goose_publisher import component_init

                                component_init(mdl, item_handle)
                            ENDCODE

                            CODE before_change
                                from typhoon.import_path.handlers.goose_publisher import before_component_change

                                before_component_change(mdl, item_handle, prop_entered_values)
                            ENDCODE

                            CODE pre_validate
                                from typhoon.import_path.handlers.goose_publisher import component_pre_validate

                                component_pre_validate(mdl, item_handle)
                            ENDCODE

                            CODE post_resolve
                                from typhoon.import_path.handlers.goose_publisher import component_pre_compile

                                component_pre_compile(mdl, item_handle)
                            ENDCODE
                        }





                    }
                    [
                        position = 8240, 8104
                        size = 112, 128
                    ]

                    component Subsystem "GOOSE Subscriber" iec_goose_subscr {

                        layout = dynamic
                        require = "sw_iec61850"
                        previous_names = "Goose Subscriber"

                        port data{
                            position = right center
                            kind = sp
                            direction = in
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [
                            position = 200, 150
                        ]

                        component src_sys_in "goose_data_out" src_sys_in{}
                        [
                            position = 150, 150
                        ]

                        connect data "goose_data_out.out"

                        mask {
                            icon = "image('iec61850/GOOSE_Subscriber.svg')"
                            help_file = "iec_61850_goose_protocol.html#reference_qhf_nmt_qz__section_fpm_wnt_qz"

                            description = "Configuration should be defined with appropriate configuration file."

                            configuration{
                                description = "IED configuration from configuration file."
                                label = "Path to configuration file"
                                type = string
                                widget = file_chooser *.icd *.ssd *.scd
                                default_value = "path to configuration file"

                                CODE property_value_edited
                                    from typhoon.import_path.handlers.goose_subscriber import configuration_property_edited

                                    configuration_property_edited(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            ied {
                                default_value = ""
                                label = "IED"
                                description = "IED to simulate from configuration file"
                                type = string
                                widget = combo
                                combo_values = dynamic

                                CODE property_value_edited
                                    from typhoon.import_path.handlers.goose_subscriber import ied_property_edited

                                    ied_property_edited(mdl, container_handle, new_value)
                                ENDCODE

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.goose_subscriber import ied_property_edited

                                    ied_property_edited(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            out_num {
                                label = "Number of outputs"
                                description = "Output terminal vector dimension"
                                type = int
                                widget = edit
                                min_value = 0
                                default_value = 1
                                nonvisible
                            }

                            data_set {
                                default_value = ""
                                label = "Data set name"
                                description = "Data set name as defined in configuration file"
                                type = string
                                widget = combo
                                no_evaluate
                                combo_values = dynamic

                                CODE property_value_edited
                                    from typhoon.import_path.handlers.goose_subscriber import data_set_property_edited

                                    data_set_property_edited(mdl, container_handle, new_value)
                                ENDCODE

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.goose_subscriber import data_set_property_edited

                                    data_set_property_edited(mdl, container_handle, new_value)
                                ENDCODE
                            }

                            preview {
                                label = ""
                                description = "Displays GOOSE data."
                                widget = button
                                type = string
                                default_value = "Data preview"
                                keepline

                                CODE button_clicked
                                    from typhoon.import_path.handlers.goose_subscriber import preview_button_clicked

                                    preview_button_clicked(mdl, container_handle)
                                ENDCODE
                            }

                            ds_data_text {
                                label = "GOOSE data preview text"
                                description = "GOOSE data preview text"
                                type = string
                                widget = edit
                                default_value = "No information available"
                                nonvisible
                                no_evaluate
                            }

                            ied_values {
                                label = "IED values"
                                description = "List of names for ied combobox"
                                type = string
                                widget = edit
                                default_value = "None"
                                nonvisible
                                no_evaluate
                            }

                            data_set_values {
                                label = "GOOSE data set values"
                                description = "List of names for data_set combobox"
                                type = string
                                widget = edit
                                default_value = "None"
                                nonvisible
                                no_evaluate
                            }

                            fcda_values {
                                label = "FCDA values"
                                description = "FCDA values"
                                type = string
                                widget = edit
                                default_value = "None"
                                nonvisible
                                no_evaluate
                            }

                            appID {
                                label = "Application ID"
                                description = "Application indentifier"
                                type = int
                                widget = edit
                                min_value = 0
                                default_value = 0
                                nonvisible
                                no_evaluate
                            }

                            GoCBRef {
                                label = "GOCBREF"
                                description = "Goose Control Block Reference"
                                type = string
                                widget = edit
                                default_value = " "
                                nonvisible
                                no_evaluate
                            }

                            execution_rate {
                                label = "Execution rate"
                                previous_names = "timer_interval"
                                description = "Signal processing execution rate"
                                widget = edit
                                type = real
                                default_value = "100e-6"
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }


                            CODE init
                                from typhoon.import_path.handlers.goose_subscriber import component_init

                                component_init(mdl, item_handle)
                            ENDCODE

                            CODE before_change
                                from typhoon.import_path.handlers.goose_subscriber import before_component_change

                                before_component_change(mdl, item_handle, prop_entered_values)
                            ENDCODE

                            CODE pre_validate
                                from typhoon.import_path.handlers.goose_subscriber import component_pre_validate

                                component_pre_validate(mdl, item_handle)
                            ENDCODE

                        }


                    }
                    [
                        position = 8240, 8104
                        size = 112, 128
                    ]

                }

                component Category "MMS" {

                    component Subsystem "MMS Server" iec_mms_server {

                        layout = dynamic
                        require = "sw_iec61850"

                        mask {
                            icon = "image('iec61850/MMS_Server.svg')"
                            help_file = "iec_61850_mms_protocol.html#iec_61850_mms_protocol__section_vwm_2pp_cgb"

                            description = "Configuration should be defined with appropriate configuration file."

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            server_ip {
                                description = "Server IP address"
                                widget = edit
                                type = ip_address
                                default_value = "192.168.0.100"
                                nonvisible
                            }

                            server_netmask {
                                description = "Server Netmask"
                                widget = edit
                                type = ip_address
                                default_value = "255.255.255.0"
                                nonvisible
                            }

                            server_gateway_enable {
                                description = "Server Gateway enable"
                                type = bool
                                default_value = False
                                nonvisible
                            }

                            server_gateway {
                                description = "Server Gateway"
                                widget = edit
                                type = ip_address
                                default_value = ""
                                nonvisible
                            }

                            vendor {
                                description = "Vendor name"
                                type = string
                                default_value = "Typhoon HIL"
                                nonvisible
                            }

                            model_name {
                                description = "Model name"
                                type = string
                                default_value = "HIL 402"
                                nonvisible
                            }

                            revision {
                                description = "Revision number"
                                type = string
                                default_value = "1.0"
                                nonvisible
                            }

                            file_path {
                                description = "Full file path"
                                type = string
                                default_value = ""
                                nonvisible
                            }

                            full_file_path {
                                description = "Full file path"
                                type = string
                                default_value = ""
                                nonvisible
                            }

                            file_name {
                                description = "File name"
                                type = string
                                default_value = ""
                                nonvisible
                            }

                            ied_names {
                                description = "List of IED names"
                                type = string
                                default_value = "[]"
                                nonvisible
                            }

                            chosen_ied {
                                description = "Chosen IED to simulate"
                                type = string
                                default_value = ""
                                nonvisible
                            }

                            scl {
                                description = "Parsed .scl structure"
                                type = string
                                default_value = "{}"
                                nonvisible
                            }

                            enum_types {
                                description = "Enum types from .scl"
                                type = string
                                default_value = "[]"
                                nonvisible
                            }

                            ied_data {
                                description = "Data from .scl per IED"
                                type = string
                                default_value = "[]"
                                nonvisible
                            }

                            leaf_values {
                                description = "Leaf node values"
                                type = string
                                default_value = ""
                                nonvisible
                            }

                            included_leafs {
                                description = "Included leaf nodes"
                                type = string
                                default_value = "[]"
                                nonvisible
                            }

                            execution_rate {
                                label = "Execution rate"
                                previous_names = "timer_interval"
                                description = "Signal processing execution rate"
                                widget = edit
                                type = real
                                default_value = "100e-6"
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                            CODE init
                                from typhoon.import_path.handlers.mms_server import create_terminals

                                included_leafs = eval(mdl.get_property_value(mdl.prop(item_handle, "included_leafs")))
                                create_terminals(mdl, item_handle, included_leafs)

                            ENDCODE

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.mms_server_dialog import MMSServerDialog

                                dialog = MMSServerDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                                dialog.exec_()
                            ENDCODE

                            CODE post_resolve
                                from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ERROR_GENERAL
                                from typhoon.import_path.handlers import mms_server

                                comp_handle = mdl.get_sub_level_handle(item_handle)

                                included_leafs = eval(mdl.get_property_value(mdl.prop(item_handle, "included_leafs")))
                                ip_addr = mdl.get_property_value(mdl.prop(item_handle, "server_ip"))
                                netmask = mdl.get_property_value(mdl.prop(item_handle, "server_netmask"))
                                file_path = mdl.get_property_value(mdl.prop(item_handle, "file_path"))

                                # included signals validation
                                if len(included_leafs) == 0:
                                    mdl.error(
                                        "At least one signal must be included in the MMS Server.",
                                        kind=ERROR_GENERAL,
                                        context=comp_handle
                                    )
                                    return

                                # ip validation
                                ip_parts = ip_addr.split(".")
                                if len(ip_parts) != 4:
                                    message = "Value for IP address should look like xxx.xxx.xxx.xxx, where xxx is number between 0 and 255!"
                                    mdl.error(
                                        message,
                                        kind=ERROR_GENERAL,
                                        context=comp_handle
                                    )
                                    return

                                for item in ip_parts:
                                    if not item.isdigit():
                                        message = "Value for IP address should look like xxx.xxx.xxx.xxx, where xxx is number between 0 and 255!"
                                        mdl.error(
                                            message,
                                            kind=ERROR_GENERAL,
                                            context=comp_handle
                                        )
                                        return

                                    if not 0 <= int(item) <= 255:
                                        message = "Value for IP address cannot be less than 0 and greater than 255!"
                                        mdl.error(
                                            message,
                                            kind=ERROR_GENERAL,
                                            context=comp_handle
                                        )
                                        return

                                # netmask validation
                                netmask_parts = netmask.split(".")
                                if len(netmask_parts) != 4:
                                    message = "Value for netmask should look like xxx.xxx.xxx.xxx, where xxx is number between 0 and 255!"
                                    mdl.error(
                                        message,
                                        kind=ERROR_GENERAL,
                                        context=comp_handle
                                    )
                                    return

                                for item in netmask_parts:
                                    if not item.isdigit():
                                        message = "Value for netmask should look like xxx.xxx.xxx.xxx, where xxx is number between 0 and 255!"
                                        mdl.error(
                                            message,
                                            kind=ERROR_GENERAL,
                                            context=comp_handle
                                        )
                                        return

                                    if not 0 <= int(item) <= 255:
                                        message = "Value for netmask cannot be less than 0 and greater than 255!"
                                        mdl.error(
                                            message,
                                            kind=ERROR_GENERAL,
                                            context=comp_handle
                                        )
                                        return

                                valid_netmasks = ['0.0.0.0', '128.0.0.0', '192.0.0.0', '224.0.0.0', '240.0.0.0', '248.0.0.0', '252.0.0.0',
                                                '254.0.0.0', '255.0.0.0',
                                                '255.128.0.0', '255.192.0.0', '255.224.0.0', '255.240.0.0', '255.248.0.0', '255.252.0.0',
                                                '255.254.0.0', '255.255.0.0',
                                                '255.255.128.0', '255.255.192.0', '255.255.224.0', '255.255.240.0', '255.255.248.0',
                                                '255.255.252.0', '255.255.254.0', '255.255.255.0',
                                                '255.255.255.128', '255.255.255.192', '255.255.255.224', '255.255.255.240',
                                                '255.255.255.248', '255.255.255.252', '255.255.255.254', '255.255.255.255']

                                if netmask in valid_netmasks:
                                    pass
                                else:
                                    message = "Invalid netmask!"
                                    mdl.error(
                                        message,
                                        kind=ERROR_GENERAL,
                                        context=comp_handle
                                    )
                                    return

                                for leaf in included_leafs:
                                    if included_leafs[leaf]["direction"] == "in":
                                        terminal_name = mms_server.create_terminal_name(leaf)
                                        port = mdl.get_item(terminal_name + "_in", parent=comp_handle, item_type=ITEM_COMPONENT)

                                        port_dimension = mdl.get_terminal_dimension(mdl.term(port, "in"))[0]

                                        if port_dimension != included_leafs[leaf]["dimension"]:
                                            name = included_leafs[leaf]["alias"] if included_leafs[leaf]["alias"] else terminal_name
                                            message = "Dimension of signal {} is {}. It should be {} as defined in configuration file".format(name, port_dimension, included_leafs[leaf]["dimension"])
                                            mdl.error(
                                                message,
                                                kind=ERROR_GENERAL,
                                                context=comp_handle
                                            )
                                            return

                                # Check file path
                                import os.path
                                # Check the absolute path
                                if not os.path.isfile(file_path):
                                    # Set the relative path to model path and check the file location
                                    model_path = os.path.split(os.path.realpath(mdl.get_model_file_path()))[0]
                                    if not model_path or not os.path.isfile(os.path.join(model_path, file_path)):
                                        title = "Invalid SCL file path"
                                        msg = "SCL file does not exist on the specified path.\n" \
                                            "If relative path is used, the model must be saved."
                                        mdl.error(
                                            msg,
                                            kind=ERROR_GENERAL,
                                            context=comp_handle
                                        )
                                        return
                                    else:
                                        full_file_path = os.path.join(model_path, file_path)
                                else:
                                    full_file_path = file_path

                                mdl.set_property_value(mdl.prop(item_handle, "full_file_path"), full_file_path)
                            ENDCODE
                        }

                    }
                    [
                        position = 8240, 8104
                        size = 112, 128
                    ]

                }

            }

            component Category "Modbus" {
                visible = "real_time"

                component Subsystem "ModBus Device"  {

                    layout = dynamic
                    previous_names = "modbus"
                    require = "sw_modbus"

                    component "core/SP input output" "comp_coil_in_out"  { execution_rate = "execution_rate" } [ position = 8000, 8000 ]
                    component "core/SP output" "comp_discrete_in"  {} [ position = 8000, 8100 ]
                    component "core/SP input output" "comp_holding_in_out"  { execution_rate = "execution_rate" } [ position = 8000, 8200 ]
                    component "core/SP output" "comp_reg_in"  {} [ position = 8000, 8300 ]

                    port coil_in {
                        position = left:1
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 7500, 8000
                    ]

                    port discrete_in {
                        position = left:2
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 7500, 8100
                    ]

                    port holding_in {
                        position = left:3
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 7500, 8200
                    ]

                    port reg_in {
                        position = left:4
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 7500, 8300
                    ]

                    port coil_out {
                        position = right:1
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8400, 8000
                    ]
                    port holding_out {
                        position = right:2
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8400, 8200
                    ]

                    connect "comp_coil_in_out.out" coil_out

                    mask {
                        icon = "image('modbus_server.svg')"
                        help_file = "modbus_device.html"

                        description = "The Modbus Device component implements a Modbus Server that can be accessed through external Modbus Clients. The
server configuration is defined as a python dictionary type in Model Initialization.
Detailed information on configuration can be found in the components documentation."

                        hil_id {
                            description = "ID of the device on which this component will be executed"
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        configuration {
                            description = "Modbus configuration from Model initialization"
                            label = "Modbus configuration"
                            type = string
                            widget = edit
                            default_value = "config1"

                        }

                        preview {
                            label = ""
                            description = "Displays Modbus cofiguration data."
                            widget = button
                            type = string
                            default_value = "Configuration preview"
                            keepline
                            nonvisible

                            CODE button_clicked
                                from typhoon.import_path.handlers.modbus_server import preview_button_clicked

                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                preview_button_clicked(mdl, comp_handle)
                            ENDCODE

                        }

                        eth_port {
                            label = "Ethernet port"
                            description = "Choose the Ethernet port that will be used for ETH VE protocol."
                            widget = combo
                            type = string
                            combo_values = ""
                            default_value = ""
                            group = "Network settings:2"

                            CODE property_value_changed
                                hil_device = mdl.get_model_property_value("hil_device")
                                
                                MAX_DEVICES = 16
                                ethernet_port_per_device = eval(mdl.get_property_value(mdl.prop(container_handle, "ethernet_port_per_device")))
                                for i in range(MAX_DEVICES):
                                    ethernet_port_per_device[hil_device][str(i)] = new_value

                                mdl.set_property_value(mdl.prop(container_handle, "ethernet_port_per_device"), str(ethernet_port_per_device))
                            ENDCODE
                        }

                        ethernet_port_per_device {
                            type = string
                            default_value = '{ "HIL100": {}, "HIL104": {}, "HIL402": {}, "HIL404": {}, "HIL602+": {}, "HIL603": {}, "HIL604": {}, "HIL606": {}, "VHIL+": {} }'
                            nonvisible
                        }

                        ip_addr {
                            label = "IP address"
                            description = "Modbus server IP address"
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.210"
                            group = "Network settings:2"
                        }

                        ip_addr_src {
                            label = "source"
                            description = "Choose who defines the IP address."
                            widget = combo
                            type = string
                            combo_values = "Dictionary", "Dialog", "SCADA"
                            default_value = "Dictionary"
                            group = "Network settings:2"
                            keepline

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "ip_addr_src", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "ip_addr_src", new_value)

                            ENDCODE
                        }

                        netmask {
                            label = "Netmask"
                            description = "Modbus server netmask"
                            widget = edit
                            type = ip_address
                            default_value = "255.255.255.0"
                            group = "Network settings:2"
                        }

                        netmask_src {
                            label = "source"
                            description = "Choose who defines the Netmask value."
                            widget = combo
                            type = string
                            combo_values = "Dictionary", "Dialog", "SCADA"
                            default_value = "Dictionary"
                            group = "Network settings:2"
                            keepline

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "netmask_src", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "netmask_src", new_value)

                            ENDCODE
                        }

                        port {
                            label = "Port"
                            description = "Port number"
                            widget = edit
                            type = uint
                            default_value = "502"
                            group = "Network settings:2"
                        }

                        port_src {
                            label = "source"
                            description = "Choose who defines the Port value."
                            widget = combo
                            type = string
                            combo_values = "Dictionary", "Dialog", "SCADA"
                            default_value = "Dictionary"
                            group = "Network settings:2"
                            keepline

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "port_src", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "port_src", new_value)

                            ENDCODE
                        }

                        slave_id {
                            label = "Slave ID"
                            description = "Slave ID"
                            widget = edit
                            type = uint
                            default_value = "1"
                            group = "Network settings:2"
                        }

                        slave_id_src {
                            label = "source"
                            description = "Choose who defines the Slave ID value."
                            widget = combo
                            type = string
                            combo_values = "Dictionary", "Dialog", "SCADA"
                            default_value = "Dictionary"
                            group = "Network settings:2"
                            keepline

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "slave_id_src", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "slave_id_src", new_value)

                            ENDCODE
                        }

                        gateway_enable {
                            label = "Use gateway"
                            widget = checkbox
                            type = bool
                            default_value = False
                            group = "Network settings:2"

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "gateway_enable", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "gateway_enable", new_value)

                            ENDCODE
                        }

                        gateway {
                            label = "Gateway"
                            description = "Modbus server gateway"
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.210"
                            group = "Network settings:2"
                        }

                        gateway_src {
                            label = "source"
                            description = "Choose who defines the Gateway value."
                            widget = combo
                            type = string
                            combo_values = "Dictionary", "Dialog", "SCADA"
                            default_value = "Dictionary"
                            group = "Network settings:2"
                            keepline

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "gateway_src", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "gateway_src", new_value)

                            ENDCODE
                        }

                        ip_address_port {
                            label = "Show IP address port"
                            description = "Create a port for IP address value"
                            widget = checkbox
                            type = bool
                            default_value = False
                            group = "Advanced:3"

                            CODE property_value_changed
                                from typhoon.import_path.handlers.modbus_server import create_ip_address_port

                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                create_ip_address_port(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        request_counter_port {
                            label = "Show request counter port(s)"
                            description = "Create ports for read/write requests"
                            widget = combo
                            type = string
                            combo_values = "None", "Read counter port", "Read counter port (separate)", "Write counter port", "Write counter (separate)", "Both counter ports", "Both counter ports (separate)", "Function code counter port"
                            default_value = "None"
                            group = "Advanced:3"

                            CODE property_value_changed
                                from typhoon.import_path.handlers.modbus_server import create_request_counter_port

                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                create_request_counter_port(mdl, comp_handle, new_value)
                            ENDCODE
                        }

                        message_delay {
                            label = "Message delay"
                            description = "Inject delay (in seconds) between the Client's request and the Server's response."
                            widget = combo
                            type = string
                            combo_values = "None", "Model", "SCADA"
                            default_value = "None"
                            group = "Faults:4"

                            CODE property_value_changed
                                from typhoon.import_path.handlers.modbus_server import create_message_delay_components

                                create_message_delay_components(mdl, container_handle, new_value)
                            ENDCODE
                        }

                        connection_loss {
                            label = "Connection loss"
                            description = "Force the Server to close connection with the Client."
                            widget = combo
                            type = string
                            combo_values = "None", "Model", "SCADA"
                            default_value = "None"
                            group = "Faults:4"

                            CODE property_value_changed
                                from typhoon.import_path.handlers.modbus_server import create_connection_loss_components

                                create_connection_loss_components(mdl, container_handle, new_value)
                            ENDCODE
                        }

                        defines {
                            label = "defines"
                            description = "Dictionary containing all defines used in configuration .h file"
                            type = string
                            widget = edit
                            default_value = ""
                            nonvisible
                            no_evaluate
                        }

                        modbus_sunspec {
                            label = ""
                            description = ""
                            type = bool
                            widget = edit
                            default_value = False
                            nonvisible
                        }

                        logging {
                            label = ""
                            description = ""
                            type = bool
                            widget = checkbox
                            default_value = False
                            nonvisible
                        }

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = 100e-6
                        }

                        _supported_platforms {
                            label = "Supported platforms"
                            description = "Supported platforms"
                            widget=edit
                            type = string
                            default_value = "['hil']"
                            nonvisible
                            vector
                        }

                        CODE configuration_changed
                        
                            MAX_DEVICES = 16
                            hil_device = mdl.get_model_property_value("hil_device")
                            ethernet_port_per_device = eval(mdl.get_property_value(mdl.prop(item_handle, "ethernet_port_per_device")))

                            ethernet_ports = ethernet_port_per_device[hil_device]
                            gem_list = get_available_eth_ports(hil_device, "host_cpu")
                            
                            eth_port_prop = mdl.prop(item_handle, "eth_port")
                            mdl.set_property_combo_values(eth_port_prop, gem_list)

                            for i in range(MAX_DEVICES):
                                try:
                                    ethernet_port = ethernet_ports[str(i)]
                                except KeyError:
                                    ethernet_port = ""

                                if ethernet_port not in gem_list:
                                    mdl.set_property_value(eth_port_prop, gem_list[0])
                                else:
                                    mdl.set_property_value(eth_port_prop, ethernet_port)

                        ENDCODE

                        CODE init
                            def dialog_dynamics(mdl, item_handle, prop_name, new_value):
                                if prop_name == "gateway_enable":
                                    if new_value:
                                        mdl.enable_property(mdl.prop(item_handle, "gateway"))
                                    else:
                                        mdl.disable_property(mdl.prop(item_handle, "gateway"))

                                elif prop_name == "ip_addr_src":
                                    if new_value == "Dictionary":
                                        mdl.disable_property(mdl.prop(item_handle, "ip_addr"))
                                    else:
                                        mdl.enable_property(mdl.prop(item_handle, "ip_addr"))

                                elif prop_name == "netmask_src":
                                    if new_value == "Dictionary":
                                        mdl.disable_property(mdl.prop(item_handle, "netmask"))
                                    else:
                                        mdl.enable_property(mdl.prop(item_handle, "netmask"))

                                elif prop_name == "port_src":
                                    if new_value == "Dictionary":
                                        mdl.disable_property(mdl.prop(item_handle, "port"))
                                    else:
                                        mdl.enable_property(mdl.prop(item_handle, "port"))

                                elif prop_name == "slave_id_src":
                                    if new_value == "Dictionary":
                                        mdl.disable_property(mdl.prop(item_handle, "slave_id"))
                                    else:
                                        mdl.enable_property(mdl.prop(item_handle, "slave_id"))

                                elif prop_name == "gateway_src":
                                    if new_value == "Dictionary":
                                        mdl.disable_property(mdl.prop(item_handle, "gateway"))
                                        mdl.disable_property(mdl.prop(item_handle, "gateway_enable"))
                                    else:
                                        mdl.enable_property(mdl.prop(item_handle, "gateway_enable"))
                                        if mdl.get_property_disp_value(mdl.prop(item_handle, "gateway_enable")):
                                            mdl.enable_property(mdl.prop(item_handle, "gateway"))
                                        else:
                                            mdl.disable_property(mdl.prop(item_handle, "gateway"))


                            
                            from typhoon.conf.hw.platforms import get_available_eth_ports
                            
                            MAX_DEVICES = 16

                            eth_port_prop = mdl.prop(item_handle, "eth_port")
                            hil_device = mdl.get_model_property_value("hil_device")
                            gem_list = get_available_eth_ports(hil_device, "host_cpu")
                            mdl.set_property_combo_values(eth_port_prop, gem_list)

                            ethernet_port_per_device = eval(mdl.get_property_value(mdl.prop(item_handle, "ethernet_port_per_device")))
                            ethernet_ports = ethernet_port_per_device[hil_device]
                            
                            for i in range(MAX_DEVICES):
                                try:
                                    ethernet_port_per_device[hil_device][str(i)]
                                except KeyError:
                                    ethernet_port_per_device[hil_device][str(i)] = gem_list[0]

                            mdl.set_property_value(mdl.prop(item_handle, "ethernet_port_per_device"), str(ethernet_port_per_device))
                            
                            for i in range(MAX_DEVICES):
                                try:
                                    ethernet_port = ethernet_ports[str(i)]
                                except KeyError:
                                    ethernet_port = ""

                                if ethernet_port not in gem_list:
                                    mdl.set_property_value(eth_port_prop, gem_list[0])
                                else:
                                    mdl.set_property_value(eth_port_prop, ethernet_port)

                        ENDCODE

                        CODE before_change
                            from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                            configuration = prop_entered_values["configuration"]

                            if configuration == "":
                                mdl.error(
                                    "Configuration field must be specified!",
                                    context=mdl.prop(item_handle, "configuration"),
                                    kind=ERROR_PROPERTY_VALUE_INVALID
                                )
                        ENDCODE

                        CODE pre_validate
                            from typhoon.import_path.handlers.modbus_server import component_pre_validate

                            component_pre_validate(mdl, item_handle)
                        ENDCODE

                        CODE post_resolve
                            from typhoon.import_path.handlers.modbus_server import component_post_resolve

                            component_post_resolve(mdl, item_handle)
                        ENDCODE
                    }
                }
                [
                    size = 184, 184
                ]

                component Subsystem "Modbus Client" {
                    layout = dynamic
                    require = "sw_modbus"

                    component "core/SP input" "state_out" {
                        dimension = "1"
                        execution_rate = "execution_rate"
                        init_val = 0
                    }
                    [ position = 8200, 7700 ]

                    component "core/SP input" "exception_code_out" {
                        dimension = "1"
                        execution_rate = "execution_rate"
                        init_val = 0
                    }
                    [ position = 8200, 7800 ]

                    port state {
                        position = top:1
                        direction = in
                        kind = sp
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [ position = 8300, 7700 ]

                    port exc_code {
                        position = top:2
                        direction = in
                        kind = sp
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [ position = 8300, 7800 ]

                    connect "state_out.out" state
                    connect "exception_code_out.out" exc_code

                    mask {
                        icon = "image('modbus_client.svg')"
                        icon_rotate = text_like

                        help_file = "modbus_client.html"

                        description = "Implements Modbus Client"

                        hil_id {
                            description = "ID of the device on which this component will be executed"
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        client_ip_address {
                            label = "Client IP address"
                            description = ""
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.200"
                        }

                        client_netmask {
                            label = "Client Netmask"
                            description = ""
                            widget = edit
                            type = ip_address
                            default_value = "255.255.255.0"
                        }

                        client_gateway {
                            label = "Client Gateway"
                            description = ""
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.1"
                        }

                        client_gateway_enable {
                            label = "Client Gateway enable"
                            description = ""
                            type = bool
                            widget = checkbox
                            default_value = False
                        }

                        server_ip_address {
                            label = "Server IP address"
                            description = ""
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.100"
                        }

                        server_port {
                            label = "Server Port"
                            description = ""
                            widget = edit
                            type = uint
                            default_value = "502"
                            min_value = 0
                            max_value = 65535
                        }

                        slave_id {
                            label = "Slave ID"
                            description = ""
                            widget = edit
                            type = uint
                            default_value = "255"
                            min_value = 0
                            max_value = 255
                        }

                        request_timeout {
                            label = "Request timeout"
                            description = ""
                            widget = edit
                            type = uint
                            default_value = "1000"
                            min_value = 0
                            max_value = 1800000
                        }

                        requests {
                            label = "Requests"
                            description = ""
                            widget = edit
                            type = string
                            default_value = "[]"

                            CODE property_value_changed
                                from typhoon.import_path.handlers.modbus_client import create_internal_components, check_requests
                                from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                                create_from_scratch = False

                                try:
                                    requests = eval(new_value)
                                    if isinstance(requests, dict):
                                        requests = [requests]

                                    check_requests(requests)
                                except ValueError as e:
                                    mdl.error(
                                        str(e),
                                        context=prop_handle,
                                        kind=ERROR_PROPERTY_VALUE_INVALID
                                    )
                                    return

                                request_names_dict = eval(mdl.get_property_value(mdl.prop(container_handle, "request_names_dict")))
                                if not request_names_dict:
                                    create_from_scratch = True

                                    request_names_dict = {}
                                    for request in requests:
                                        request_names_dict[request["name"]] = {
                                            "rename": request["name"],
                                            "delete": True,
                                            "function_code": request["function_code"],
                                            "transmit_type": request["transmit_type"]
                                        }

                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                create_internal_components(mdl, comp_handle, requests, request_names_dict,
                                                           create_from_scratch=create_from_scratch)
                            ENDCODE
                        }

                        request_names_dict {
                            description = "Used to help with renaming and deleting component terminals."
                            type = string
                            default_value = "{}"
                            nonvisible
                            no_evaluate
                        }

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = 100e-6
                        }

                        _supported_platforms {
                            label = "Supported platforms"
                            description = "Supported platforms"
                            widget=edit
                            type = string
                            default_value = "['hil']"
                            nonvisible
                            vector
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.modbus_client_dialog import ModbusClientDialog

                            dialog = ModbusClientDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                            dialog.exec_()
                        ENDCODE

                        CODE pre_validate
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT, SP_TYPE_UINT, SP_TYPE_INT

                            comp_handle = mdl.get_sub_level_handle(item_handle)

                            state_out = mdl.get_item("state_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                            mdl.set_terminal_sp_type(mdl.term(state_out, "out"), SP_TYPE_UINT)

                            exception_code_out = mdl.get_item("exception_code_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                            mdl.set_terminal_sp_type(mdl.term(exception_code_out, "out"), SP_TYPE_INT)
                        ENDCODE

                        CODE post_resolve
                            from typhoon.import_path.handlers.modbus_client import post_resolve

                            post_resolve(mdl, item_handle)

                            # Reset hil id property value
                            # This value is updated during compile but it needs to be reseted before compile
                            # because copied value from component from different schematic may cause problem.
                            mdl.set_property_value(mdl.prop(item_handle, "hil_id"), 0)
                        ENDCODE
                    }
                }
                [
                    size = 184, 184
                ]

                component Subsystem "SunSpec Modbus Device" {

                    layout = dynamic
                    require = "sw_modbus"

                    component gen_terminator coi_outl_terminte {}
                    [
                        position = 8088, 8032
                    ]

                    component src_constant Constant1 {
                        execution_rate = execution_rate
                    }
                    [
                        position = 7616, 8032
                    ]

                    component "core/ModBus Device" "ModBus Device" {
                        network_settings_src = "Dialog window"
                        ip_addr = ip_address
                        netmask = netmask
                        port = port
                        gateway = gateway
                        execution_rate = execution_rate
                    }
                    [
                        position = 7872, 8104
                        size = 184, 184
                    ]

                    junction Junction1 sp
                    [
                        position = 7704, 8032
                    ]

                    junction Junction2 sp
                    [
                        position = 7704, 8080
                    ]

                    connect Constant1.out Junction1 as Connection2
                    connect Junction1 "ModBus Device.coil_in" as Connection3
                    connect Junction2 Junction1 as Connection6
                    connect "ModBus Device.discrete_in" Junction2 as Connection5
                    connect coi_outl_terminte.in "ModBus Device.coil_out" as Connection11

                    mask {
                        icon = "image('modbus_sunspec.svg')"
                        icon_rotate = text_like

                        help_file = "sunspec_modbus_device.html"

                        description = "Implements Modbus slave device acording to SunSpec definitions"

                        ip_address {
                            description = ""
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.210"
                            nonvisible
                        }

                        netmask {
                            description = ""
                            widget = edit
                            type = ip_address
                            default_value = "255.255.255.0"
                            nonvisible
                        }

                        port {
                            description = ""
                            widget = edit
                            type = uint
                            default_value = "502"
                            nonvisible
                        }

                        gateway_enable {
                            description = ""
                            widget = checkbox
                            type = bool
                            default_value = False
                            nonvisible
                        }

                        gateway {
                            description = ""
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.210"
                            nonvisible
                        }

                        base_register {
                            description = ""
                            type = string
                            default_value = "40001 (Preferred)"
                            nonvisible
                        }

                        load_default_values {
                            description = ""
                            type = bool
                            default_value = True
                            nonvisible
                        }

                        common_model {
                            description = ""
                            type = string
                            default_value = "{}"
                            nonvisible
                        }

                        common_model_info {
                            description = ""
                            type = string
                            default_value = "{'fixed_length': 0}"
                            nonvisible
                        }

                        standard_model_count {
                            description = ""
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        standard_model_info {
                            description = ""
                            type = string
                            default_value = "[]"
                            nonvisible
                        }

                        standard_model {
                            description = ""
                            type = string
                            default_value = "[]"
                            nonvisible
                        }

                        vendor_model_count {
                            description = ""
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        vendor_model_info {
                            description = ""
                            type = string
                            default_value = "[]"
                            nonvisible
                        }

                        vendor_model {
                            description = ""
                            type = string
                            default_value = "[]"
                            nonvisible
                        }

                        end_model {
                            description = ""
                            type = string
                            default_value = "[]"
                            nonvisible
                        }

                        port_labels {
                            description = ""
                            type = string
                            default_value = '{"registers": [], "holding_in": [], "holding_out" : []}'
                            nonvisible
                        }

                        execution_rate {
                            description = ""
                            widget = edit
                            type = real
                            min_value = .1e-9
                            default_value = 100e-6
                        }

                        _supported_platforms {
                            label = "Supported platforms"
                            description = "Supported platforms"
                            widget=edit
                            type = string
                            default_value = "['hil']"
                            nonvisible
                            vector
                        }

                        CODE init
                            from typhoon.import_path.handlers.modbus_sunspec import create_connections, create_modbus_config
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                            old_port_labels = {"registers": [], "holding_in": [], "holding_out" : []}
                            new_port_labels = eval(mdl.get_property_value(mdl.prop(item_handle, "port_labels")))

                            comp_handle = mdl.get_sub_level_handle(item_handle)
                            create_connections(mdl, comp_handle, old_port_labels, new_port_labels)

                            modbus = mdl.get_item("ModBus Device", parent=comp_handle, item_type=ITEM_COMPONENT)
                            mdl.set_property_value(mdl.prop(modbus, "modbus_sunspec"), True)

                            mdl.set_property_value(mdl.prop(modbus, "gateway_enable"), mdl.get_property_value(mdl.prop(item_handle, "gateway_enable")))
                            # This is to eliminate compatibility issues. Previously, the gateway value was left empty, but
                            # this causes validation error.
                            if mdl.get_property_value(mdl.prop(item_handle, "gateway")) == "":
                                mdl.set_property_value(mdl.prop(item_handle, "gateway"), "192.168.0.210")

                            if not mdl.get_property_value(mdl.prop(item_handle, "load_default_values")):
                                ip_address = mdl.get_property_value(mdl.prop(item_handle, "ip_address"))
                                netmask = mdl.get_property_value(mdl.prop(item_handle, "netmask"))
                                port = mdl.get_property_value(mdl.prop(item_handle, "port"))
                                gateway_enable = mdl.get_property_value(mdl.prop(item_handle, "gateway_enable"))
                                gateway = mdl.get_property_value(mdl.prop(item_handle, "gateway"))
                                base_register = mdl.get_property_value(mdl.prop(item_handle, "base_register"))

                                common_model = eval(mdl.get_property_value(mdl.prop(item_handle, "common_model")))
                                standard_models = eval(mdl.get_property_value(mdl.prop(item_handle, "standard_model")))
                                vendor_models = eval(mdl.get_property_value(mdl.prop(item_handle, "vendor_model")))
                                end_model = eval(mdl.get_property_value(mdl.prop(item_handle, "end_model")))

                                if mdl.get_property_value(mdl.prop(item_handle, "standard_model_count")) == 1:
                                    standard_models = [standard_models]
                                elif mdl.get_property_value(mdl.prop(item_handle, "standard_model_count")) == 0:
                                    standard_models = []

                                if mdl.get_property_value(mdl.prop(item_handle, "vendor_model_count")) == 1:
                                    vendor_models = [vendor_models]
                                elif mdl.get_property_value(mdl.prop(item_handle, "vendor_model_count")) == 0:
                                    vendor_models = []

                                config, msg = create_modbus_config(
                                    base_register=base_register,
                                    common_model=common_model,
                                    standard_models=standard_models,
                                    vendor_models=vendor_models,
                                    end_model=end_model
                                )
                                mdl.set_property_value(mdl.prop(modbus, "configuration"), str(config))
                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.modbus_sunspec_dialog import ModbusSunSpecDialog

                            dialog = ModbusSunSpecDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                            dialog.exec_()
                        ENDCODE

                        CODE pre_validate
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                            comp_handle = mdl.get_sub_level_handle(item_handle)

                            modbus = mdl.get_item("ModBus Device", parent=comp_handle, item_type=ITEM_COMPONENT)
                            config = eval(mdl.get_property_value(mdl.prop(modbus, "configuration")))

                            config["ip_addr"] = mdl.get_property_value(mdl.prop(item_handle, 'ip_address'))
                            config["netmask"] = mdl.get_property_value(mdl.prop(item_handle, 'netmask'))
                            config["port"] = mdl.get_property_value(mdl.prop(item_handle, 'port'))

                            if mdl.get_property_value(mdl.prop(item_handle, 'gateway_enable')):
                                config["gateway"] = mdl.get_property_value(mdl.prop(item_handle, 'gateway'))

                            mdl.set_property_value(mdl.prop(modbus, "configuration"), str(config))

                            if mdl.get_property_value(mdl.prop(item_handle, "load_default_values")):
                                mdl.error("Modbus Sunspec values must be specified",
                                          context=comp_handle)
                                return

                            if mdl.get_property_value(mdl.prop(item_handle, "standard_model_count")) == 0 and mdl.get_property_value(mdl.prop(item_handle, "vendor_model_count")) == 0:
                                mdl.error("At least one Standard or one Vendor model must be defined.",
                                          context=comp_handle)
                                return
                        ENDCODE

                    }

                }
                [
                    position = 7992, 8176
                    size = 184, 104
                ]

            }

            component Category "OPC" {
                visible = "real_time"

                component Subsystem "OPC UA Server"  {

                    layout = dynamic
                    previous_names = "opc_ua"
                    require = "hw_eth_linux"

                    component "core/SP output" "comp_nodes_in"  {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8420, 8304
                    ]

                    component "core/SP input" "comp_nodes_out"  {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8540, 8304
                    ]

                    port nodes_in{
                        position = left center
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8330, 8304
                    ]

                    port nodes_out{
                        position = right center
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8630, 8304
                    ]

                    connect nodes_in "comp_nodes_in.in"
                    connect nodes_out "comp_nodes_out.out"

                    mask {
                        icon = "image('opc_ua.svg')"
                        help_file = "opc_ua_server.html"

                        description = "
                        Basic OPC UA Server configuration needs to have a defined IP address,
                        port, and netmask. The node structure can be defined either with
                        'nodes_in' and 'nodes_out' dictionaries or a 'nodes' dictionary.
                        Additionally, login options can be defined.
                        Currently, anonymous login and username/password login are supported.
                        If a username and password are present, then the username/password
                        login will be selected automatically; otherwise, anonymous login
                        will be used.
                        OPC UA Server component configuration should be defined
                        in the Model Initialization panel.

                        Example config shown below.
                        config1 = {
                                    'ip_addr': '192.168.0.1',
                                    'port': 16664,
                                    'netmask': '255.255.255.0',
                                    'username': 'username',
                                    'password': 'password',
                                    'nodes_in' : {
                                                    'voltage0_in': (0, 'real'),
                                                    'array_int_inputs': ([1, 2], 'int')
                                                },
                                    'nodes_out' : {
                                                    'voltage0_out': (0, 'real'),
                                                    'array_int_outputs': ([1, 2], 'int')
                                                },
                                }

                        See the OPC UA example model or the component documentation for a 'nodes'
                        configuration example. Keys in node dictionaries are used as OPC UA Node Ids
                        and are unique. The first element of a NodeID is the index of the
                        component input vector; the second element is the type of variable
                        ('int','uint', or 'real').
                        When the 'nodes' configuration is used, an additional
                        third parameter 'in' or 'out' is required."

                        configuration {
                            description = "OPC UA configuration from Model initialization"
                            label = "OPC UA configuration"
                            type = string
                            widget = edit
                            default_value = "config1"
                        }

                        defines {
                            label = "defines"
                            description = "Dictionary containing all defines used in configuration .h file"
                            type = string
                            widget = edit
                            default_value = ""
                            nonvisible
                            no_evaluate
                        }

                        eth_port {
                            label = "Ethernet port"
                            description = "Choose the Ethernet port that will be used for OPC UA protocol."
                            widget = combo
                            type = string
                            combo_values = ""
                            default_value = ""

                            CODE property_value_changed
                                hil_device = mdl.get_model_property_value("hil_device")
                                
                                MAX_DEVICES = 16
                                ethernet_port_per_device = eval(mdl.get_property_value(mdl.prop(container_handle, "ethernet_port_per_device")))
                                for i in range(MAX_DEVICES):
                                    ethernet_port_per_device[hil_device][str(i)] = new_value

                                mdl.set_property_value(mdl.prop(container_handle, "ethernet_port_per_device"), str(ethernet_port_per_device))
                            ENDCODE
                        }

                        ethernet_port_per_device {
                            type = string
                            default_value = '{ "HIL100": {}, "HIL104": {}, "HIL402": {}, "HIL404": {}, "HIL602+": {}, "HIL603": {}, "HIL604": {}, "HIL606": {}, "VHIL+": {} }'
                            nonvisible
                        }

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = 100e-6
                        }

                        CODE before_change
                            from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                            configuration = prop_entered_values["configuration"]

                            if configuration == "":
                                mdl.error(
                                    "Configuration field must be specified!",
                                    kind=ERROR_PROPERTY_VALUE_INVALID,
                                    context=mdl.prop(item_handle, "configuration")
                                )
                        ENDCODE

                        CODE pre_validate
                            from typhoon.import_path.handlers.opc_ua import component_pre_validate

                            component_pre_validate(mdl, item_handle)
                        ENDCODE

                        CODE post_resolve
                            from typhoon.import_path.handlers.opc_ua import component_pre_compile
                            from typhoon.api.schematic_editor.const import WARNING_GENERAL

                            component_pre_compile(mdl, item_handle)

                            comp_handle = mdl.get_sub_level_handle(item_handle)
                            mdl.warning(
                                "OPC UA component will use HOST Machine IP address for Virtual HIL Device instead from given configuration.",
                                kind=WARNING_GENERAL,
                                context=comp_handle
                            )
                        ENDCODE

                        CODE init
                            from typhoon.conf.hw.platforms import get_available_eth_ports
                            
                            MAX_DEVICES = 16

                            eth_port_prop = mdl.prop(item_handle, "eth_port")
                            hil_device = mdl.get_model_property_value("hil_device")
                            gem_list = get_available_eth_ports(hil_device, "host_cpu")
                            mdl.set_property_combo_values(eth_port_prop, gem_list)

                            ethernet_port_per_device = eval(mdl.get_property_value(mdl.prop(item_handle, "ethernet_port_per_device")))
                            ethernet_ports = ethernet_port_per_device[hil_device]
                            
                            for i in range(MAX_DEVICES):
                                try:
                                    ethernet_port_per_device[hil_device][str(i)]
                                except KeyError:
                                    ethernet_port_per_device[hil_device][str(i)] = gem_list[0]

                            mdl.set_property_value(mdl.prop(item_handle, "ethernet_port_per_device"), str(ethernet_port_per_device))
                            
                            for i in range(MAX_DEVICES):
                                try:
                                    ethernet_port = ethernet_ports[str(i)]
                                except KeyError:
                                    ethernet_port = ""

                                if ethernet_port not in gem_list:
                                    mdl.set_property_value(eth_port_prop, gem_list[0])
                                else:
                                    mdl.set_property_value(eth_port_prop, ethernet_port)

                        ENDCODE

                        CODE configuration_changed

                            MAX_DEVICES = 16
                            hil_device = mdl.get_model_property_value("hil_device")
                            ethernet_port_per_device = eval(mdl.get_property_value(mdl.prop(item_handle, "ethernet_port_per_device")))

                            ethernet_ports = ethernet_port_per_device[hil_device]
                            gem_list = get_available_eth_ports(hil_device, "host_cpu")
                            
                            eth_port_prop = mdl.prop(item_handle, "eth_port")
                            mdl.set_property_combo_values(eth_port_prop, gem_list)

                            for i in range(MAX_DEVICES):
                                try:
                                    ethernet_port = ethernet_ports[str(i)]
                                except KeyError:
                                    ethernet_port = ""

                                if ethernet_port not in gem_list:
                                    mdl.set_property_value(eth_port_prop, gem_list[0])
                                else:
                                    mdl.set_property_value(eth_port_prop, ethernet_port)

                        ENDCODE
                    }

                }

                [
                    size = 184, 184
                ]

            }

            component Category "DNP3" {
                visible = "real_time"

                component Subsystem "DNP3 Outstation"  {

                    layout = dynamic
                    previous_names = "dnp3"
                    require = "sw_dnp3"

                    component "core/SP output" "comp_analog_in"  {
                        execution_rate = "inherit"
                    }

                    [
                        position = 8420, 8504
                    ]

                    component "core/SP output" "comp_binary_in"  {
                        execution_rate = "inherit"
                    }

                    [
                        position = 8420, 8304
                    ]

                    component "core/SP output" "comp_double_bit_binary_in"{
                        execution_rate = "inherit"
                    }
                    [
                        position = 8420, 8404
                    ]

                    component "core/SP input" "comp_analog_out"  {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8610, 8404
                    ]

                    component "core/SP input" "comp_binary_out"  {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8610, 8304
                    ]

                    port analog_in{
                        position = left:3
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8330, 8504
                    ]

                    port binary_in{
                        position = left:1
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8330, 8304
                    ]

                    port double_bit_binary_in{
                        position = left:2
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8330, 8404
                    ]

                    port analog_out{
                        position = right center
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8700, 8404
                    ]

                    port binary_out{
                        position = right center
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8700, 8304
                    ]

                    connect analog_in "comp_analog_in.in"
                    connect binary_in "comp_binary_in.in"
                    connect double_bit_binary_in "comp_double_bit_binary_in.in"
                    connect analog_out "comp_analog_out.out"
                    connect binary_out "comp_binary_out.out"

                    mask {

                        icon = "image('dnp3.svg')"
                        help_file = "dnp3_outstation.html"

                        description = "Configuration should be defined in Model initialization as so:
                        config1 = {
                                    'link': {
                                                'ip_addr': '192.168.0.199',
                                                'port': 20000,
                                                'netmask': '255.255.255.0',
                                                'remote_addr': 1,
                                                'local_addr': 10
                                                },
                                    'outstation': {
                                                'sample_period': 10,
                                                'unsolicited' : True,
                                                'event_buffer' : 50,
                                                'solicited_confirm_timeout' : 5000,
                                                'unsolicited_confirm_timeout' : 5000,
                                                'infinite_unsolicited_retries': False,
                                                'unsolicited_retry_num' : 5000,
                                                'select_timeout' : 5000,
                                                'max_tx_fragment_size': 2048,
                                                'max_controls_per_request': 1
                                                },
                                    'database' : {
                                                'binary_in': [[0, 'class1', 'group1var2', 'group2var2']],
                                                'double_bit_binary_in' : [[0, 'class1', 'group3var2', 'group4var1']],
                                                'analog_in': [[0, 'class2', 'group30var1', 'group32var7', 5],
                                                              [1, 'class2', 'group30var5', 'group32var5', 0.01]
                                                              ],
                                                'binary_out': [[0, 'class2', 'group10var2', 'group11var2', 0]],
                                                'analog_out': [[0, 'class2', 'group40var3', 'group42var5', 0.5, 0.5]],
                                                'octet_string': [[0, 'class1', 'group110var0', 'group111var0', 'Typhoon HIL']]
                                                },
                                }

                        Basic configuration needs to have defined link, outstation and database keys.

                        Link settings are used for connection setup. All keys are necessary.
                        DNP3 channels are automatically created from IP address and port settings.
                        Multiple outstations can work on the same channel if they have different local
                        addresses.
                        Multiple outstations cannot have identical port and local address.

                        Outstation settings are used for defining behavior of the outstation, for example
                        unsolicited responses, event buffer, and various timeouts and number of requests.
                        All keys are necessary.

                        Database settings configures database size, indexes, and static and event object
                        variations for each index.
                        Input vector indexes for each type has to match with the defined indexes.
                        There are 6 types of database entries (binary input, double bit binary input.
                        analog input, binary output, analog output and octet string output).
                        Each type is a list which contains defines for each index of that type.
                        Configuration for each index is another list which can contain various number
                        of elements, depending on the signal type.
                        First element is DNP3 index (integer).
                        Second element is DNP3 class which can be Class0, Class1, Class2 or Class3 (string).
                        Third element is static variation, and fourth element is event variation.
                        Please refer to DNP3 technical manuals for explanation of each group and
                        variation (string).
                        Fifth element of octet string output signals is a character string.
                        Fifth element of analog input and analog output signals is a deadband
                        value (positive float).
                        Fifth element of the binary output signal is its initial value (integer).
                        Sixth element of the analog output signal is its initial value (float).

                        If entry for specific database type is not needed, use empty list [].
                                "

                        configuration {
                            description = "DNP3 configuration from Model initialization"
                            label = "DNP3 configuration"
                            type = string
                            widget = edit
                            default_value = "config1"
                            no_evaluate
                        }

                        defines {
                            label = "defines"
                            description = "Dictionary containing all defines used in configuration .h file"
                            type = string
                            widget = edit
                            default_value = ""
                            nonvisible
                            no_evaluate
                        }


                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = string
                            default_value = 100e-6
                        }

                        config_source{
                            label = "Configuration source"
                            description = "Integer value, 0 from model init, 1 from file, 2 from graphical dialog"
                            widget = edit
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        config_path{
                            label = "Configuration path"
                            description = "Path to configuration file"
                            widget = edit
                            type = string
                            default_value = ""
                            nonvisible
                            no_evaluate
                        }

                        _supported_platforms {
                            label = "Supported platforms"
                            description = "Supported platforms"
                            widget=edit
                            type = string
                            default_value = "['hil']"
                            nonvisible
                            vector
                        }

                        CODE init
                            from typhoon.import_path.handlers.dnp3 import component_init

                            component_init(mdl, item_handle)
                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.dnp3_dialog import DNP3Dialog

                            dialog = DNP3Dialog(current_diagram.scene.parent().main_window, mdl, item_handle, component)
                            dialog.exec_()
                        ENDCODE

                        CODE pre_validate
                            from typhoon.import_path.handlers.dnp3 import component_pre_validate

                            component_pre_validate(mdl, item_handle)
                        ENDCODE

                        CODE post_resolve
                            from typhoon.import_path.handlers.dnp3 import component_pre_compile

                            component_pre_compile(mdl, item_handle)
                        ENDCODE
                    }

                }

                [
                    size = 184, 184
                ]

            }

            component Category "Serial" {
                visible = "real_time"

                component comm_serial_setup  "Serial Setup"    { }

                component Subsystem "Serial Send"  {

                    layout = dynamic
                    require = "hw_uart_bus"

                    mask {
                        icon = "image('serial/serial_send.svg')"
                        help_file = "serial.html#topic_qvl_tvk_3bb__fig_ys4_grc_kfb"

                        description = "Transmits data over Serial port."

                        hil_id {
                            description = "ID of the device on which this component will be executed"
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        number_of_inputs{
                            label = "Number of variables"
                            description = "Number of variables to send over ETH."
                            type = uint
                            widget = edit
                            min_value = 1
                            max_value = 350
                            default_value = 1
                            nonvisible
                        }

                        endianness {
                            label = "Endianness"
                            description = "Order of the bytes in the word."
                            type = string
                            widget = combo
                            combo_values = "Little Endian", "Big Endian"
                            default_value = "Little Endian"
                            group = "Data:2"
                            nonvisible
                        }

                        sending_period {
                            description = "Delay between messages in milliseconds. Value is 0 if no delay needed. Permitted values are from 0 to 1000000."
                            label = "Sending period"
                            widget = edit
                            type = string
                            default_value = "0"
                            unit = "ms"
                            no_evaluate
                            group = "General:1"
                        }

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = inherit
                            group = "General:1"
                        }

                        start_of_frame {
                            description = "Used to define data before the payload "
                            label = "Start of frame"
                            widget = edit
                            type = string
                            default_value = "[0xFF, 0xFF]"
                            group = "Data:2"
                        }

                        end_of_frame {
                            description = "Used to define data after the payload "
                            label = "End of frame"
                            widget = edit
                            type = string
                            default_value = "[]"
                            group = "Data:2"
                        }

                        enable_data_escape {
                            label = "Enable data escape "
                            description = "Checkbox that triggers Data escaping."
                            type = bool
                            widget = checkbox
                            default_value = False
                            group = "Data:2"

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "enable_data_escape", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "enable_data_escape", new_value)

                            ENDCODE
                        }

                        enable_data_escape_start_end_frame {
                            label = "Enable data escape in SOF/EOF"
                            description = "Checkbox that triggers Data escaping in start or end of frame."
                            type = bool
                            widget = checkbox
                            default_value = False
                            group = "Data:2"

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "enable_data_escape_start_end_frame", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "enable_data_escape_start_end_frame", new_value)

                            ENDCODE
                        }

                        data_to_escape {
                            description = "Each element is a byte that should be escaped"
                            label = "Data to escape"
                            widget = edit
                            type = string
                            default_value = "[]"
                            group = "Data:2"
                        }

                        configuration {
                            description = "Used to define the payload "
                            label = "Message Configuration"
                            widget = edit
                            type = string
                            default_value = ""
                            group = "Data:2"

                            CODE property_value_changed
                                from typhoon.import_path.handlers.serial_send import create_internal_components

                                execution_rate = mdl.get_property_value(mdl.prop(container_handle, "execution_rate"))
                                conf = mdl.get_property_value(mdl.prop(container_handle, "configuration"))
                                conf = eval(conf)
                                signal_names_dict = mdl.get_property_disp_value(mdl.prop(container_handle, "signal_names_dict"))

                                create_internal_components(mdl, container_handle, conf, signal_names_dict)

                            ENDCODE
                        }

                        signal_names_dict {
                            label = "Signal names dict"
                            description = "Used to handle old Signal names and Ports"
                            widget = edit
                            type = string
                            default_value = ""
                            group = "Data:2"
                            nonvisible

                        }

                        generate_configuration {
                            description = "Generate configuration through GUI"
                            label = ""
                            widget = button
                            type = string
                            default_value = "Generate configuration"
                            group = "Data:2"

                            CODE button_clicked
                                from typhoon.apps.schematic_editor.dialogs.serial_send_dialog import generate_configuration

                                conf = mdl.get_property_disp_value(mdl.prop(container_handle, "configuration"))

                                if conf == "":
                                    conf = "[]"
                                conf, signal_names_dict = generate_configuration(mdl, container_handle, conf)

                                if conf:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "configuration"), str(conf))
                                if signal_names_dict:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "signal_names_dict"), str(signal_names_dict))

                            ENDCODE
                        }


                        _supported_platforms {
                            label = "Supported platforms"
                            description = "Supported platforms"
                            widget=edit
                            type = string
                            default_value = "['hil']"
                            nonvisible
                            vector
                        }

                        CODE init
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                            from typhoon.apps.schematic_editor.dialogs.serial_send_dialog import default_dict
                            from typhoon.import_path.handlers.serial_send import create_internal_components, parse_frame_string

                            def dialog_dynamics(mdl, mask_handle, prop_name, new_value):
                                if prop_name == "enable_data_escape":
                                    data_to_escape = mdl.prop(mask_handle, "data_to_escape")
                                    enable_data_escape_start_end_frame = mdl.prop(mask_handle, "enable_data_escape_start_end_frame")

                                    if new_value:
                                        mdl.enable_property(data_to_escape)
                                        mdl.enable_property(enable_data_escape_start_end_frame)
                                    else:
                                        mdl.disable_property(data_to_escape)
                                        mdl.disable_property(enable_data_escape_start_end_frame)
                                        mdl.set_property_value(mdl.prop(item_handle, "enable_data_escape_start_end_frame"),False)

                            conf = mdl.get_property_value(mdl.prop(item_handle, "configuration"))
                            endianess = mdl.get_property_value(mdl.prop(item_handle, "endianness"))

                            if not conf:
                                """
                                This part of the code handles backward compatibility
                                """
                                conf = [ default_dict ]
                                conf[0]["endianess"] = endianess

                            mdl.set_property_value(mdl.prop(item_handle, "configuration"), str(conf))

                            create_internal_components(mdl, item_handle, conf)

                            def validate_delay(mdl, item_handle):
                                msg = "OK"
                                delay = mdl.get_property_value(mdl.prop(item_handle, "sending_period"))

                                # If no value typed into text box
                                if delay == "":
                                        return "Please type Delay between messages value component"

                                # Check if there are no num characters
                                for ch in delay:
                                    if ch > '9' or ch < '0':
                                        return "Delay between messages must contain only non-negative, whole numbers"

                                if int(delay) > 1000000:
                                    return "Delay between messages value component must not be greater than 1000000"

                                return msg

                        ENDCODE

                        CODE pre_compile
                            from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                            msg = validate_delay(mdl, item_handle)
                            if msg != "OK":
                                mdl.error(
                                    msg,
                                    kind=ERROR_PROPERTY_VALUE_INVALID,
                                    context=mdl.prop(item_handle, "sending_period")
                                )

                        ENDCODE
                    }

                }
                [
                    size = 112, 80
                ]

                component Subsystem "Serial Receive" {

                    layout = dynamic
                    require = "hw_uart_bus"

                    component "core/SP input" "Receive st"  {
                        execution_rate="execution_rate"
                    }
                    [
                        position = 7928, 8200
                    ]

                    port st {
                        position = top:1
                        kind = sp
                        label = "status"
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 7828, 8200
                    ]

                    connect st "Receive st.out"

                    mask {
                        icon = "image('serial/serial_receive.svg')"
                        help_file = "serial.html#topic_qvl_tvk_3bb__fig_jpn_pdc_kfb"

                        description = "Receives data over Serial port."

                        hil_id {
                            description = "ID of the device on which this component will be executed"
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = inherit
                        }

                        start_of_frame {
                            description = "Used to define data before the payload "
                            label = "Start of frame"
                            widget = edit
                            type = string
                            default_value = "[0xFF, 0xFF]"
                            group = "Data:2"
                        }

                        end_of_frame {
                            description = "Used to define data after the payload "
                            label = "End of frame"
                            widget = edit
                            type = string
                            default_value = "[]"
                            group = "Data:2"
                        }

                        enable_data_escape {
                            label = "Enable data escape"
                            description = "Checkbox that triggers Data escaping."
                            type = bool
                            widget = checkbox
                            default_value = False
                            group = "Data:2"

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "enable_data_escape", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "enable_data_escape", new_value)

                            ENDCODE
                        }

                        enable_data_escape_start_end_frame {
                            label = "Enable data escape in SOF/EOF"
                            description = "Checkbox that triggers Data escaping in start or end of frame."
                            type = bool
                            widget = checkbox
                            default_value = False
                            group = "Data:2"

                            CODE property_value_edited

                                dialog_dynamics(mdl, container_handle, "enable_data_escape_start_end_frame", new_value)

                            ENDCODE

                            CODE property_value_changed

                                dialog_dynamics(mdl, container_handle, "enable_data_escape_start_end_frame", new_value)

                            ENDCODE
                        }

                        data_to_escape {
                            description = "Each element is a byte that should be escaped"
                            label = "Data to escape"
                            widget = edit
                            type = string
                            default_value = "[]"
                            group = "Data:2"
                        }

                        number_of_inputs{
                            label = "Number of input variables"
                            description = "Number of input variables from the remote source."
                            type = uint
                            widget = edit
                            min_value = 1
                            max_value = 350
                            default_value = 1
                            nonvisible
                            group = "Data:2"
                        }

                        endianness {
                            label = "Endianness"
                            description = "Order of the bytes in the word."
                            type = string
                            widget = combo
                            combo_values = "Little Endian", "Big Endian"
                            default_value = "Little Endian"
                            group = "Data:2"
                            nonvisible
                        }

                        input_type {
                            label = "Input variable data type"
                            description = "Input variable data type."
                            widget = combo
                            combo_values = "real", "int", "uint"
                            default_value = "real"
                            type = string
                            nonvisible
                            group = "Data:2"
                        }

                        configuration {
                            description = "Used to define the payload "
                            label = "Message Configuration"
                            widget = edit
                            type = string
                            default_value = ""
                            group = "Data:2"

                            CODE property_value_changed
                                from typhoon.import_path.handlers.serial_receive import create_internal_components

                                execution_rate = mdl.get_property_value(mdl.prop(container_handle, "execution_rate"))
                                conf = mdl.get_property_value(mdl.prop(container_handle, "configuration"))
                                conf = eval(conf)
                                signal_names_dict = mdl.get_property_disp_value(mdl.prop(container_handle, "signal_names_dict"))

                                create_internal_components(mdl, container_handle, conf, execution_rate, signal_names_dict)

                            ENDCODE
                        }

                        signal_names_dict {
                            label = "Signal names dict"
                            description = "Used to handle old Signal names and Ports"
                            widget = edit
                            type = string
                            default_value = ""
                            group = "Data:2"
                            nonvisible

                        }

                        generate_configuration {
                            description = "Generate configuration through GUI"
                            label = ""
                            widget = button
                            type = string
                            default_value = "Generate configuration"
                            group = "Data:2"

                            CODE button_clicked
                                from typhoon.apps.schematic_editor.dialogs.serial_receive_dialog import generate_configuration

                                conf = mdl.get_property_disp_value(mdl.prop(container_handle, "configuration"))
                                execution_rate = mdl.get_property_value(mdl.prop(container_handle, "execution_rate"))

                                if conf == "":
                                    conf = "[]"
                                conf, signal_names_dict = generate_configuration(mdl, container_handle, conf)

                                if conf:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "configuration"), str(conf))
                                if signal_names_dict:
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "signal_names_dict"), str(signal_names_dict))

                            ENDCODE
                        }

                        _supported_platforms {
                            label = "Supported platforms"
                            description = "Supported platforms"
                            widget=edit
                            type = string
                            default_value = "['hil']"
                            nonvisible
                            vector
                        }

                        CODE init
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                            from typhoon.apps.schematic_editor.dialogs.serial_receive_dialog import default_dict
                            from typhoon.import_path.handlers.serial_receive import create_internal_components, parse_frame_string

                            execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))

                            def dialog_dynamics(mdl, mask_handle, prop_name, new_value):
                                if prop_name == "enable_data_escape":
                                    data_to_escape = mdl.prop(mask_handle, "data_to_escape")
                                    enable_data_escape_start_end_frame = mdl.prop(mask_handle, "enable_data_escape_start_end_frame")

                                    if new_value:
                                        mdl.enable_property(data_to_escape)
                                        mdl.enable_property(enable_data_escape_start_end_frame)
                                    else:
                                        mdl.disable_property(data_to_escape)
                                        mdl.disable_property(enable_data_escape_start_end_frame)
                                        mdl.set_property_value(mdl.prop(item_handle, "enable_data_escape_start_end_frame"),False)

                            conf = mdl.get_property_value(mdl.prop(item_handle, "configuration"))
                            endianess = mdl.get_property_value(mdl.prop(item_handle, "endianness"))
                            input_type = mdl.get_property_value(mdl.prop(item_handle, "input_type"))
                            number_of_inputs = mdl.get_property_value(mdl.prop(item_handle, "number_of_inputs"))

                            if not conf:
                                """
                                This part of the code handles backward compatibility
                                """
                                conf = [ default_dict ]
                                conf[0]["dimension"] = str(number_of_inputs)
                                conf[0]["endianess"] = endianess
                                conf[0]["data_type"] = input_type

                            mdl.set_property_value(mdl.prop(item_handle, "configuration"), str(conf))

                            create_internal_components(mdl, item_handle, conf, execution_rate)

                            def validate_frame(mdl, item_handle, frame):
                                msg = "OK"
                                
                                if not parse_frame_string(frame):
                                    msg = "Request name can include only '0 - 9', 'a - z', 'A - Z' characters \n"

                                return msg

                        ENDCODE

                        CODE pre_compile
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                            comp_handle = mdl.get_sub_level_handle(item_handle)

                            st = mdl.get_item("Receive st", parent=comp_handle, item_type=ITEM_COMPONENT)
                            mdl.set_terminal_sp_type(mdl.term(st, "out"), "int")

                        ENDCODE

                    }

                }
                [
                    size = 112, 80
                ]

            }

            component Category "C37_118" {
                visible = "real_time"

                component Subsystem "PMU Send" {
                    layout = dynamic
                    require = "sw_c37118"

                    port FREQ {
                        position = left:2
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8000, 8100
                    ]

                    port DFREQ {
                        position = left:3
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8000, 8200
                    ]

                    port phasors {
                        position = left:4
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8000, 8300
                    ]

                    port analogs {
                        position = left:5
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8000, 8400
                    ]

                    port digitals {
                        position = left:6
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                            readonly = true
                        }
                    }
                    [
                        position = 8000, 8500
                    ]

                    component "core/Data Type Conversion" "freq_data_conversion"  {
                        execution_rate = "inherit"
                    }
                    [
                        position = 8100, 8100
                    ]

                    component "core/Data Type Conversion" "dfreq_data_conversion"  {
                        execution_rate = "inherit"
                    }
                    [
                        position = 8100, 8200
                    ]

                    component "core/Data Type Conversion" "phasor_data_conversion"  {
                        execution_rate = "inherit"
                    }
                    [
                        position = 8100, 8300
                    ]

                    component "core/Data Type Conversion" "analog_data_conversion"  {
                        execution_rate = "inherit"
                    }
                    [
                        position = 8100, 8400
                    ]

                    component "core/Data Type Conversion" "digital_data_conversion"  {
                        output_type = "uint"
                        execution_rate = "inherit"
                    }
                    [
                        position = 8100, 8500
                    ]

                    component "core/SP output" "freq_out"  {
                        execution_rate = "inherit"
                    }
                    [
                        position = 8300, 8100
                    ]

                    component "core/SP output" "dfreq_out"  {
                        execution_rate = "inherit"
                    }
                    [
                        position = 8300, 8200
                    ]

                    component "core/SP output" "phasor_out"  {
                        write_method = "Custom function"
                        execution_rate = "inherit"
                    }
                    [
                        position = 8300, 8300
                    ]

                    component "core/SP output" "analog_out"  {
                        execution_rate = "inherit"
                    }
                    [
                        position = 8300, 8400
                    ]

                    component "core/SP output" "digital_out"  {
                        output_type = "int"
                        execution_rate = "inherit"
                    }
                    [
                        position = 8300, 8500
                    ]

                    connect "FREQ" "freq_data_conversion.in"
                    connect "DFREQ" "dfreq_data_conversion.in"
                    connect "phasors" "phasor_data_conversion.in"
                    connect "analogs" "analog_data_conversion.in"
                    connect "digitals" "digital_data_conversion.in"

                    connect "freq_data_conversion.out" "freq_out.in"
                    connect "dfreq_data_conversion.out" "dfreq_out.in"
                    connect "phasor_data_conversion.out" "phasor_out.in"
                    connect "analog_data_conversion.out" "analog_out.in"
                    connect "digital_data_conversion.out" "digital_out.in"

                    mask {
                        icon = "image('c37118/PMU_Send.svg')"
                        help_file = "c37_118_protocol.html#c37_118_protocol__section_krv_5b5_dkb"

                        description = ""

                        hil_id {
                            description = "ID of the device on which this component will be executed"
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        stream_source {
                            description = "Chose if the component will generate new data stream or the data will be a part of the existing message."
                            label = "Stream source"
                            widget = combo
                            type = string
                            combo_values = "New data stream", "Append to existing data stream"
                            default_value = "New data stream"
                            group = "General:1"

                            CODE property_value_edited
                                dialog_dynamics(mdl, container_handle, "stream_source", new_value)
                            ENDCODE

                            CODE property_value_changed
                                dialog_dynamics(mdl, container_handle, "stream_source", new_value)
                            ENDCODE
                        }

                        pmu_index {
                            description = "Index value will determine the order in which PMU station data is sorted in the message"
                            label = "PMU index"
                            widget = combo
                            type = string
                            combo_values = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"
                            default_value = "1"
                            group = "General:1"
                        }

                        stream_source_id {
                            description = "Stream source ID number"
                            label = "Stream source ID"
                            type = int
                            widget = edit
                            default_value = 1000
                            min_value = 1
                            max_value = 65534
                            group = "General:1"
                        }

                        time_base {
                            description = "Resolution of Fraction of Second time stamp"
                            label = "Time base"
                            type = int
                            widget = edit
                            default_value = 1000000
                            min_value = 1
                            max_value = 16777216
                            group = "General:1"
                        }

                        data_rate {
                            description = "Rate of data transmission"
                            label = "Data rate"
                            type = int
                            widget = edit
                            default_value = 10
                            min_value = 1
                            max_value = 32767
                            group = "General:1"
                        }

                        data_rate_type {
                            description = "Rate of data transmisson type"
                            label = ""
                            widget = combo
                            type = string
                            combo_values = "frames per second", "seconds per frame"
                            default_value = "frames per second"
                            keepline
                            group = "General:1"
                        }

                        header_data {
                            description = "Header frame data"
                            label = "Header data"
                            type = string
                            widget = edit
                            default_value = "'This is a PMU Station 1'"
                            group = "General:1"
                        }

                        choose_stream_source {
                            description = "Chose to which data stream to append PMU station data"
                            label = "Choose existing stream"
                            widget = combo
                            type = string
                            combo_values = dynamic
                            default_value = ""
                            group = "General:1"
                        }

                        enable_cfg3 {
                            description = "Enable support for Configuration Frame 3"
                            label = "Enable Configuration Frame 3"
                            widget = checkbox
                            type = bool
                            default_value = True
                            group = "General:1"
                            nonvisible
                        }

                        protocol {
                            description = "Choose between TCP or UDP protocol"
                            label = "Protocol type"
                            widget = combo
                            type = string
                            combo_values = "TCP", "UDP"
                            default_value = "TCP"
                            group = "Network:2"

                            CODE property_value_edited
                                dialog_dynamics(mdl, container_handle, "protocol", new_value)
                            ENDCODE

                            CODE property_value_changed
                                dialog_dynamics(mdl, container_handle, "protocol", new_value)
                            ENDCODE
                        }

                        ip_addr {
                            label = "IP address"
                            description = "Stream IP address"
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.210"
                            group = "Network:2"
                        }

                        netmask {
                            label = "Netmask"
                            description = "Netmask"
                            widget = edit
                            type = ip_address
                            default_value = "255.255.255.0"
                            group = "Network:2"
                        }

                        port {
                            label = "Port"
                            description = "Port number"
                            widget = edit
                            type = int
                            default_value = 4712
                            min_value = 1
                            max_value = 65535
                            group = "Network:2"
                        }

                        gateway {
                            label = "Gateway"
                            description = "Gateway"
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.210"
                            group = "Network:2"
                        }

                        gateway_enable {
                            label = "Use gateway"
                            widget = checkbox
                            type = bool
                            default_value = False
                            group = "Network:2"
                            keepline

                            CODE property_value_edited
                                if new_value:
                                    mdl.enable_property(mdl.prop(container_handle, "gateway"))
                                else:
                                    mdl.disable_property(mdl.prop(container_handle, "gateway"))
                            ENDCODE

                            CODE property_value_changed
                                if new_value:
                                    mdl.enable_property(mdl.prop(container_handle, "gateway"))
                                else:
                                    mdl.disable_property(mdl.prop(container_handle, "gateway"))
                            ENDCODE
                        }

                        udp_operation_mode {
                            description = "Choose between Commanded or Spontaneous operation mode"
                            label = "Operation mode"
                            widget = combo
                            type = string
                            combo_values = "Spontaneous", "Commanded"
                            default_value = "Spontaneous"
                            group = "Network:2"

                            CODE property_value_edited
                                dialog_dynamics(mdl, container_handle, "protocol", new_value)
                            ENDCODE

                            CODE property_value_changed
                                dialog_dynamics(mdl, container_handle, "protocol", new_value)
                            ENDCODE
                        }

                        udp_communication_type {
                            description = "Choose between Unicast or Broadcast communication type"
                            label = "Communication type"
                            widget = combo
                            type = string
                            combo_values = "Unicast", "Broadcast"
                            default_value = "Unicast"
                            group = "Network:2"

                            CODE property_value_edited
                                dialog_dynamics(mdl, container_handle, "protocol", new_value)
                            ENDCODE

                            CODE property_value_changed
                                dialog_dynamics(mdl, container_handle, "protocol", new_value)
                            ENDCODE
                        }

                        local_port {
                            label = "Local port"
                            description = "Local port number"
                            widget = edit
                            type = int
                            default_value = 4713
                            min_value = 1
                            max_value = 65535
                            group = "Network:2"
                        }

                        remote_port {
                            label = "Remote port"
                            description = "Remote port number"
                            widget = edit
                            type = int
                            default_value = 4713
                            min_value = 1
                            max_value = 65535
                            group = "Network:2"
                        }

                        dest_ip_addr {
                            label = "Destination IP address"
                            description = "Destination IP address"
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.220"
                            group = "Network:2"
                        }

                        pmu_station_name {
                            description = "PMU station name"
                            label = "PMU station name"
                            type = string
                            widget = edit
                            default_value = "'PMU Station 1'"
                            group = "PMU Station CFG-2:3"
                        }

                        pmu_station_id {
                            description = "PMU station ID number"
                            label = "PMU station ID"
                            type = int
                            widget = edit
                            default_value = 1
                            min_value = 1
                            max_value = 65534
                            group = "PMU Station CFG-2:3"
                        }

                        f_nom {
                            description = "Nominal frequency value"
                            label = "Nominal frequency"
                            widget = combo
                            type = string
                            combo_values = "50 Hz", "60 Hz"
                            default_value = "50 Hz"
                            group = "PMU Station CFG-2:3"
                        }

                        cfg_cnt {
                            description = "Configuration change count"
                            label = "Configuration count"
                            type = int
                            widget = edit
                            default_value = 0
                            min_value = 0
                            max_value = 65535
                            group = "PMU Station CFG-2:3"
                        }

                        pmu_station_name_cfg3 {
                            description = "PMU station name"
                            label = "PMU station name"
                            type = string
                            widget = edit
                            default_value = "'Typhoon HIL PMU Station 1'"
                            group = "PMU Station CFG-3:4"
                        }

                        pmu_station_global_id_cfg3 {
                            description = "PMU station global ID number"
                            label = "PMU station global ID"
                            type = string
                            widget = edit
                            default_value = "0x547970686F6F6E2048494C20504D55"
                            group = "PMU Station CFG-3:4"
                        }

                        pmu_coordinates_cfg3 {
                            description = "PMU Station coordinates (WGS84 datum) as a list. ([latitude, longitude, elevation])"
                            label = "PMU Station coordinates"
                            widget = edit
                            type = string
                            default_value = "[42.3748525,-71.0893704, 0]"
                            unit = "[°, °, m]"
                            group = "PMU Station CFG-3:4"
                        }

                        service_class_cfg3 {
                            description = "Service class"
                            label = "Service class"
                            widget = combo
                            type = string
                            combo_values = "M - Measurement", "P - Performance"
                            default_value = "M - Measurement"
                            group = "PMU Station CFG-3:4"
                        }

                        window_cfg3 {
                            description = "Measurment window length"
                            label = "Window"
                            widget = edit
                            type = int
                            default_value = 0
                            min_value = 0
                            max_value = 4294967295
                            unit = "us"
                            group = "PMU Station CFG-3:4"
                        }

                        group_delay_cfg3 {
                            description = "Measurment group delay"
                            label = "Group delay"
                            widget = edit
                            type = int
                            default_value = 0
                            min_value = 0
                            max_value = 4294967295
                            unit = "us"
                            group = "PMU Station CFG-3:4"
                        }

                        generate_data {
                            description = "Dialog that helps the user generate data values"
                            label = ""
                            widget = button
                            type = string
                            default_value = "Generate values"
                            group = "Data CFG-2:5"

                            CODE button_clicked
                                from typhoon.import_path.handlers.pmu_send import generate_data_values

                                generate_data_values(mdl, container_handle)
                            ENDCODE
                        }

                        stat {
                            description = "Value of STAT flags"
                            label = "STAT value"
                            type = string
                            widget = edit
                            default_value = '0b0000000001000000'
                            group = "Data CFG-2:5"
                        }

                        stat_type {
                            description = "Define STAT value trough variable or use fixed value"
                            label = "STAT type"
                            widget = combo
                            type = string
                            combo_values = "Fixed", "Variable"
                            default_value = "Fixed"
                            group = "Data CFG-2:5"
                            keepline

                            CODE property_value_edited
                                dialog_dynamics(mdl, container_handle, "stat_type", new_value)
                            ENDCODE

                            CODE property_value_changed
                                from typhoon.api.schematic_editor.const import ITEM_PORT, ITEM_COMPONENT
                                from typhoon.api.schematic_editor.exception import SchApiException

                                dialog_dynamics(mdl, container_handle, "stat_type", new_value)

                                comp_handle = mdl.get_sub_level_handle(container_handle)

                                if new_value == "Fixed":
                                    # Remove terminal
                                    stat_port = mdl.get_item("STAT", parent=comp_handle, item_type=ITEM_PORT)
                                    if stat_port:
                                        mdl.delete_item(stat_port)

                                    stat_data_conversion = mdl.get_item("stat_data_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    if stat_data_conversion:
                                        mdl.delete_item(stat_data_conversion)

                                    stat_out = mdl.get_item("stat_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    if stat_out:
                                        mdl.delete_item(stat_out)

                                else:
                                    try:
                                        stat_port = mdl.create_port(
                                            name="STAT",
                                            parent=comp_handle,
                                            kind="sp",
                                            direction="in",
                                            terminal_position=("left", 1),
                                            position=(8000, 8000)
                                        )

                                        stat_data_conversion = mdl.create_component(
                                            "core/Data Type Conversion",
                                            name="stat_data_conversion",
                                            parent=comp_handle,
                                            position=(8100, 8000)
                                        )

                                        mdl.set_property_value(mdl.prop(stat_data_conversion, "output_type"), "int")

                                        stat_out = mdl.create_component(
                                            "core/SP output",
                                            name="stat_out",
                                            parent=comp_handle,
                                            position=(8300, 8000)
                                        )

                                        mdl.create_connection(stat_port, mdl.term(stat_data_conversion, "in"))
                                        mdl.create_connection(mdl.term(stat_data_conversion, "out"), mdl.term(stat_out, "in"))
                                    except SchApiException:
                                        pass
                            ENDCODE
                        }

                        freq_dfreq_type {
                            description = "Data type for FREQ/DREQ data"
                            label = "FREQ/DFREQ type"
                            widget = combo
                            type = string
                            combo_values = "int", "float"
                            default_value = "int"
                            group = "Data CFG-2:5"
                        }

                        phasor_data_type {
                            description = "Data type for Phasor data"
                            label = "Phasor data type"
                            widget = combo
                            type = string
                            combo_values = "int", "float"
                            default_value = "int"
                            group = "Data CFG-2:5"

                            CODE property_value_edited
                                dialog_dynamics(mdl, container_handle, "phasor_data_type", new_value)
                            ENDCODE

                            CODE property_value_changed
                                dialog_dynamics(mdl, container_handle, "phasor_data_type", new_value)
                            ENDCODE
                        }

                        phasor_repr {
                            description = "Phasor data representation"
                            label = "Phasor representation"
                            widget = combo
                            type = string
                            combo_values = "real and imaginary (rectangular)", "magnitude and angle (polar)"
                            default_value = "real and imaginary (rectangular)"
                            group = "Data CFG-2:5"
                        }

                        phasor_names {
                            description = "List of phasor signal names"
                            label = "Phasor signal names"
                            type = string
                            widget = edit
                            default_value = "['Phasor1', 'Phasor2']"
                            group = "Data CFG-2:5"
                        }

                        phasor_signal_types {
                            description = "List of phasor signal types"
                            label = "Phasor signal types"
                            type = string
                            widget = edit
                            default_value = "['voltage', 'current']"
                            group = "Data CFG-2:5"
                        }

                        phasor_scales {
                            description = "List of phasor scale factor values"
                            label = "Phasor scale values"
                            type = string
                            widget = edit
                            default_value = "[915527, 45776]"
                            group = "Data CFG-2:5"
                        }

                        analog_data_type {
                            description = "Data type for Analog data"
                            label = "Analog data type"
                            widget = combo
                            type = string
                            combo_values = "int", "float"
                            default_value = "int"
                            group = "Data CFG-2:5"

                            CODE property_value_edited
                                dialog_dynamics(mdl, container_handle, "analog_data_type", new_value)
                            ENDCODE

                            CODE property_value_changed
                                dialog_dynamics(mdl, container_handle, "analog_data_type", new_value)
                            ENDCODE
                        }

                        analog_names {
                            description = "List of analog signal names"
                            label = "Analog signal names"
                            type = string
                            widget = edit
                            default_value = "['Analog1', 'Analog2', 'Analog3', 'Analog4']"
                            group = "Data CFG-2:5"
                        }

                        analog_signal_types {
                            description = "List of analog signal types"
                            label = "Analog signal types"
                            type = string
                            widget = edit
                            default_value = "['single point', 'rms', 'peak', 65]"
                            group = "Data CFG-2:5"
                        }

                        analog_scales {
                            description = "List of analog scale factor values"
                            label = "Analog scale values"
                            type = string
                            widget = edit
                            default_value = "[100, 100, 100, 100]"
                            group = "Data CFG-2:5"
                        }

                        digital_names {
                            description = "List of digital signal names"
                            label = "Digital signal names"
                            type = string
                            widget = edit
                            default_value = "['D0', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'D10', 'D11', 'D12', 'D13', 'D14', 'D15']"
                            group = "Data CFG-2:5"
                        }

                        digital_normal_states {
                            description = "List of digital signal normal states"
                            label = "Digital signal normal state"
                            type = string
                            widget = edit
                            default_value = "[0x0000]"
                            group = "Data CFG-2:5"
                        }

                        digital_valid_bits {
                            description = "List of digital signal valid bits"
                            label = "Digital signal valid bits"
                            type = string
                            widget = edit
                            default_value = "[0xFFFF]"
                            group = "Data CFG-2:5"
                        }

                        generate_data_cfg3 {
                            description = "Dialog that helps the user generate data values"
                            label = ""
                            widget = button
                            type = string
                            default_value = "Generate values"
                            group = "Data CFG-3:6"

                            CODE button_clicked
                                from typhoon.import_path.handlers.pmu_send import generate_data_values

                                generate_data_values(mdl, container_handle)
                            ENDCODE
                        }

                        phasor_names_cfg3 {
                            description = "List of phasor signal names"
                            label = "Phasor signal names"
                            type = string
                            widget = edit
                            default_value = "['Phasor1', 'Phasor2']"
                            group = "Data CFG-3:6"
                        }
                        
                        phasor_modifications_cfg3 {
                            description = "Modification flags for phasor values"
                            label = "Phasor modification flags"
                            type = string
                            widget = edit
                            default_value = "[0x0, 0x0]"
                            group = "Data CFG-3:6"
                        }
                        
                        phasor_signal_types_cfg3 {
                            description = "List of phasor signal types"
                            label = "Phasor signal types"
                            type = string
                            widget = edit
                            default_value = "['voltage', 'current']"
                            group = "Data CFG-3:6"
                        }
                        
                        phasor_components_cfg3 {
                            description = "Phasor component values"
                            label = "Phasor components"
                            type = string
                            widget = edit
                            default_value = "['positive sequence', 'negative sequence']"
                            group = "Data CFG-3:6"
                        }
                        
                        phasor_user_types_cfg3 {
                            description = "Phasor User defined types"
                            label = "Phasor user defined types"
                            type = string
                            widget = edit
                            default_value = "[0x0, 0x0]"
                            group = "Data CFG-3:6"
                        }
                        
                        phasor_scales_cfg3 {
                            description = "List of phasor scale factor values"
                            label = "Phasor scale values"
                            type = string
                            widget = edit
                            default_value = "[1.0, 1.0]"
                            group = "Data CFG-3:6"
                        }
                        
                        phasor_offsets_cfg3 {
                            description = "List of phasor angle offset values"
                            label = "Phasor offset values"
                            type = string
                            widget = edit
                            default_value = "[0.0, 0.0]"
                            group = "Data CFG-3:6"
                        }
                        
                        analog_names_cfg3 {
                            description = "List of analog signal names"
                            label = "Analog signal names"
                            type = string
                            widget = edit
                            default_value = "['Analog1', 'Analog2', 'Analog3', 'Analog4']"
                            group = "Data CFG-3:6"
                        }
                        
                        analog_scales_cfg3 {
                            description = "List of analog scale factor values"
                            label = "Analog scale values"
                            type = string
                            widget = edit
                            default_value = "[1.0, 1.0, 1.0, 1.0]"
                            group = "Data CFG-3:6"
                        }
                        
                        analog_offsets_cfg3 {
                            description = "List of analog offset values"
                            label = "Analog offset values"
                            type = string
                            widget = edit
                            default_value = "[0.0, 0.0, 0.0, 0.0]"
                            group = "Data CFG-3:6"
                        }

                        CODE post_resolve
                            from typhoon.import_path.handlers.pmu_send import validate_values, create_c_code
                            from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID, ITEM_COMPONENT, ERROR_GENERAL

                            res = validate_values(mdl, item_handle)
                            if res:
                                prop_name, msg = res
                                mdl.error(
                                    msg,
                                    kind=ERROR_PROPERTY_VALUE_INVALID,
                                    context=mdl.prop(item_handle, prop_name)
                                )
                                return

                            # check dimensions
                            comp_handle = mdl.get_sub_level_handle(item_handle)

                            create_c_code(mdl, item_handle, comp_handle)

                            freq_out = mdl.get_item("freq_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                            if mdl.get_terminal_dimension(mdl.term(freq_out, "in"))[0] != 1:
                                mdl.error(
                                    "FREQ signal must have dimension 1. (dimension {} detected)".format(mdl.get_terminal_dimension(mdl.term(freq_out, "in"))[0]),
                                    kind= ERROR_GENERAL,
                                    context=comp_handle,
                                )
                                return

                            dfreq_out = mdl.get_item("dfreq_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                            if mdl.get_terminal_dimension(mdl.term(dfreq_out, "in"))[0] != 1:
                                mdl.error(
                                    "DFREQ signal must have dimension 1. (dimension {} detected)".format(mdl.get_terminal_dimension(mdl.term(dfreq_out, "in"))[0]),
                                    kind= ERROR_GENERAL,
                                    context=comp_handle,
                                )
                                return

                            phasor_out = mdl.get_item("phasor_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                            phasor_names = mdl.get_property_value(mdl.prop(item_handle, "phasor_names"))
                            if phasor_names and len(eval(phasor_names)) > 0:
                                if mdl.get_terminal_dimension(mdl.term(phasor_out, "in"))[0] != 2*len(eval(phasor_names)):
                                    mdl.error(
                                        "Phasors signal must have dimension {}. (dimension {} detected)".format(2*len(eval(phasor_names)),
                                                                                                                mdl.get_terminal_dimension(mdl.term(phasor_out, "in"))[0]),
                                        kind= ERROR_GENERAL,
                                        context=comp_handle,
                                    )
                                    return

                            analog_out = mdl.get_item("analog_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                            analog_names = mdl.get_property_value(mdl.prop(item_handle, "analog_names"))
                            if analog_names and len(eval(analog_names)) > 0:
                                if mdl.get_terminal_dimension(mdl.term(analog_out, "in"))[0] != len(eval(analog_names)):
                                    mdl.error(
                                        "Analog signal must have dimension {}. (dimension {} detected)".format(len(eval(analog_names)),
                                                                                                            mdl.get_terminal_dimension(mdl.term(analog_out, "in"))[0]),
                                        kind= ERROR_GENERAL,
                                        context=comp_handle,
                                    )
                                    return

                            digital_out = mdl.get_item("digital_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                            digital_names = mdl.get_property_value(mdl.prop(item_handle, "digital_names"))
                            if digital_names and len(eval(digital_names)) > 0:
                                if mdl.get_terminal_dimension(mdl.term(digital_out, "in"))[0] != (len(eval(digital_names)) / 16):
                                    mdl.error(
                                        "Digital signal must have dimension {}. (dimension {} detected)".format(len(eval(digital_names)) / 16,
                                                                                                                mdl.get_terminal_dimension(mdl.term(digital_out, "in"))[0]),
                                        kind= ERROR_GENERAL,
                                        context=comp_handle,
                                    )
                                    return
                        ENDCODE

                        CODE init
                            def dialog_dynamics(mdl, item_handle, prop_name, new_value):
                                pmu_index = mdl.prop(item_handle, "pmu_index")
                                stream_source_id = mdl.prop(item_handle, "stream_source_id")
                                choose_stream_source = mdl.prop(item_handle, "choose_stream_source")
                                time_base = mdl.prop(item_handle, "time_base")
                                data_rate = mdl.prop(item_handle, "data_rate")
                                data_rate_type = mdl.prop(item_handle, "data_rate_type")
                                protocol = mdl.prop(item_handle, "protocol")
                                udp_operation_mode = mdl.prop(item_handle, "udp_operation_mode")
                                udp_communication_type = mdl.prop(item_handle, "udp_communication_type")
                                ip_addr = mdl.prop(item_handle, "ip_addr")
                                dest_ip_addr = mdl.prop(item_handle, "dest_ip_addr")
                                netmask = mdl.prop(item_handle, "netmask")
                                port = mdl.prop(item_handle, "port")
                                local_port = mdl.prop(item_handle, "local_port")
                                remote_port = mdl.prop(item_handle, "remote_port")
                                gateway_enable = mdl.prop(item_handle, "gateway_enable")
                                header_data = mdl.prop(item_handle, "header_data")
                                phasor_scales = mdl.prop(item_handle, "phasor_scales")
                                analog_scales = mdl.prop(item_handle, "analog_scales")
                                stat = mdl.prop(item_handle, "stat")

                                if prop_name == "stream_source":
                                    if new_value == "New data stream":
                                        mdl.show_property(stream_source_id)
                                        mdl.hide_property(choose_stream_source)
                                        mdl.hide_property(time_base)
                                        mdl.show_property(data_rate)
                                        mdl.show_property(data_rate_type)
                                        mdl.show_property(header_data)

                                        mdl.enable_property(protocol)
                                        mdl.enable_property(ip_addr)
                                        mdl.enable_property(netmask)
                                        mdl.enable_property(port)
                                        mdl.enable_property(gateway_enable)
                                        mdl.enable_property(dest_ip_addr)
                                        mdl.enable_property(local_port)
                                        mdl.enable_property(remote_port)
                                        mdl.enable_property(udp_operation_mode)
                                        mdl.enable_property(udp_communication_type)

                                        mdl.set_property_combo_values(pmu_index, ["1"])
                                        mdl.disable_property(pmu_index)
                                    else:
                                        mdl.hide_property(stream_source_id)
                                        mdl.show_property(choose_stream_source)
                                        mdl.hide_property(time_base)
                                        mdl.hide_property(data_rate)
                                        mdl.hide_property(data_rate_type)
                                        mdl.hide_property(header_data)

                                        mdl.disable_property(protocol)
                                        mdl.disable_property(ip_addr)
                                        mdl.disable_property(netmask)
                                        mdl.disable_property(port)
                                        mdl.disable_property(gateway_enable)
                                        mdl.disable_property(dest_ip_addr)
                                        mdl.disable_property(local_port)
                                        mdl.disable_property(remote_port)
                                        mdl.disable_property(udp_operation_mode)
                                        mdl.disable_property(udp_communication_type)

                                        from typhoon.import_path.handlers.pmu_send import get_stream_id_values

                                        stream_id_values = get_stream_id_values(mdl, item_handle)

                                        mdl.set_property_combo_values(choose_stream_source, stream_id_values)
                                        mdl.set_property_combo_values(pmu_index, [str(val) for val in range(2,21)])
                                        mdl.enable_property(pmu_index)

                                elif prop_name == "protocol":
                                    protocol_val = mdl.get_property_disp_value(protocol)
                                    operation_mode = mdl.get_property_disp_value(udp_operation_mode)
                                    communication_type = mdl.get_property_disp_value(udp_communication_type)

                                    if protocol_val == "TCP":
                                        mdl.show_property(port)
                                        mdl.hide_property(udp_operation_mode)
                                        mdl.hide_property(udp_communication_type)
                                        mdl.hide_property(dest_ip_addr)
                                        mdl.hide_property(local_port)
                                        mdl.hide_property(remote_port)
                                    else:
                                        mdl.show_property(udp_operation_mode)
                                        mdl.show_property(udp_communication_type)
                                        mdl.hide_property(port)

                                        if operation_mode == "Spontaneous":
                                            if communication_type == "Unicast":
                                                mdl.show_property(dest_ip_addr)
                                                mdl.show_property(remote_port)
                                                mdl.hide_property(local_port)
                                            elif communication_type == "Broadcast":
                                                mdl.hide_property(dest_ip_addr)
                                                mdl.show_property(remote_port)
                                                mdl.hide_property(local_port)

                                        elif operation_mode == "Commanded":
                                            if communication_type == "Unicast":
                                                mdl.hide_property(dest_ip_addr)
                                                mdl.hide_property(remote_port)
                                                mdl.show_property(local_port)
                                            elif communication_type == "Broadcast":
                                                mdl.hide_property(dest_ip_addr)
                                                mdl.show_property(remote_port)
                                                mdl.show_property(local_port)

                                elif prop_name == "stat_type":
                                    if new_value == "Fixed":
                                        mdl.enable_property(stat)
                                    else:
                                        mdl.disable_property(stat)

                                elif prop_name == "phasor_data_type":
                                    if new_value == "int":
                                        mdl.enable_property(phasor_scales)
                                    else:
                                        mdl.disable_property(phasor_scales)

                                elif prop_name == "analog_data_type":
                                    if new_value == "int":
                                        mdl.enable_property(analog_scales)
                                    else:
                                        mdl.disable_property(analog_scales)
                        ENDCODE
                    }

                }
                [
                    size = 112, 128
                ]

                component Subsystem "PMU Receive" {
                    layout = dynamic
                    require = "sw_c37118"

                    port cmd {
                        position = top:1
                        kind = sp
                        direction = out
                        sp_type {
                            supported = int, uint, real, inherit
                            default = inherit
                        }
                    }
                    [
                        position = 8000, 7600
                    ]

                    port rdy {
                        position = top:2
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = real
                        }
                    }
                    [
                        position = 8400, 7700
                    ]

                    port STAT {
                        position = right:1
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = int
                        }
                    }
                    [
                        position = 8400, 8000
                    ]

                    port FREQ {
                        position = right:2
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = real
                        }
                    }
                    [
                        position = 8400, 8100
                    ]

                    port DFREQ {
                        position = right:3
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = real
                        }
                    }
                    [
                        position = 8400, 8200
                    ]

                    port phasors {
                        position = right:4
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = real
                        }
                    }
                    [
                        position = 8400, 8300
                    ]

                    port analogs {
                        position = right:5
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = real
                        }
                    }
                    [
                        position = 8400, 8400
                    ]

                    port digitals {
                        position = right:6
                        kind = sp
                        direction = in
                        sp_type {
                            supported = int, uint, real, inherit
                            default = int
                        }
                    }
                    [
                        position = 8400, 8500
                    ]

                    component "core/Data Type Conversion" "cmd_data_conversion" {
                        output_type = "int"
                    }
                    [
                        position = 8300, 7600
                    ]

                    component "core/SP output" "cmd_out"  {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8400, 7600
                    ]

                    component "core/SP input" "rdy_in"  {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8000, 7700
                    ]

                    component "core/SP input" "stat_in"  {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8000, 8000
                    ]

                    component "core/SP input" "freq_in"  {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8000, 8100
                    ]

                    component "core/SP input" "dfreq_in"  {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8000, 8200
                    ]

                    component "core/SP input" "phasor_in"  {
                        read_method = "Custom function"
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8000, 8300
                    ]

                    component "core/SP input" "analog_in"  {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8000, 8400
                    ]

                    component "core/SP input" "digital_in"  {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 8000, 8500
                    ]

                    connect "cmd" "cmd_data_conversion.in"

                    connect "cmd_data_conversion.out" "cmd_out.in"
                    connect "rdy_in.out" "rdy"
                    connect "stat_in.out" "STAT"
                    connect "freq_in.out" "FREQ"
                    connect "dfreq_in.out" "DFREQ"
                    connect "phasor_in.out" "phasors"
                    connect "analog_in.out" "analogs"
                    connect "digital_in.out" "digitals"

                    mask {
                        icon = "image('c37118/PMU_Receive.svg')"
                        help_file = "c37_118_protocol.html#c37_118_protocol__section_dsh_vb5_dkb"

                        description = ""

                        hil_id {
                            description = "ID of the device on which this component will be executed"
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        auto_start {
                            label = "Auto start"
                            widget = checkbox
                            type = bool
                            default_value = True
                            group = "Network:1"
                            keepline

                            CODE property_value_edited
                                dialog_dynamics(mdl, container_handle, "auto_start", new_value)
                            ENDCODE

                            CODE property_value_changed
                                dialog_dynamics(mdl, container_handle, "auto_start", new_value)
                            ENDCODE
                        }

                        preferred_configuration {
                            label = "Preferred configuration"
                            description = "Choose which configuration is used on auto start"
                            widget = combo
                            type = string
                            combo_values = "Configuration Frame 2", "Configuration Frame 3"
                            default_value = "Configuration Frame 2"
                            group = "Network:1"
                        }

                        protocol {
                            description = "Choose between TCP or UDP protocol"
                            label = "Protocol type"
                            widget = combo
                            type = string
                            combo_values = "TCP", "UDP"
                            default_value = "TCP"
                            group = "Network:1"

                            CODE property_value_edited
                                dialog_dynamics(mdl, container_handle, "protocol", new_value)
                            ENDCODE

                            CODE property_value_changed
                                dialog_dynamics(mdl, container_handle, "protocol", new_value)
                            ENDCODE
                        }

                        ip_addr {
                            label = "IP address"
                            description = "Stream IP address"
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.210"
                            group = "Network:1"
                        }

                        netmask {
                            label = "Netmask"
                            description = "Netmask"
                            widget = edit
                            type = ip_address
                            default_value = "255.255.255.0"
                            group = "Network:1"
                        }

                        port {
                            label = "Port"
                            description = "Port number"
                            widget = edit
                            type = int
                            default_value = 4712
                            min_value = 1
                            max_value = 65535
                            group = "Network:1"
                        }

                        gateway {
                            label = "Gateway"
                            description = "Gateway"
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.210"
                            group = "Network:1"
                        }

                        gateway_enable {
                            label = "Use gateway"
                            widget = checkbox
                            type = bool
                            default_value = False
                            group = "Network:1"
                            keepline

                            CODE property_value_edited
                                if new_value:
                                    mdl.enable_property(mdl.prop(container_handle, "gateway"))
                                else:
                                    mdl.disable_property(mdl.prop(container_handle, "gateway"))
                            ENDCODE

                            CODE property_value_changed
                                if new_value:
                                    mdl.enable_property(mdl.prop(container_handle, "gateway"))
                                else:
                                    mdl.disable_property(mdl.prop(container_handle, "gateway"))
                            ENDCODE
                        }

                        dest_ip_addr {
                            label = "Destination IP address"
                            description = "Destination IP address"
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.220"
                            group = "Network:1"
                        }

                        local_port {
                            label = "Local port"
                            description = "Local (receive) port number"
                            widget = edit
                            type = int
                            default_value = 4713
                            min_value = 1
                            max_value = 65535
                            group = "Network:1"
                        }

                        remote_port {
                            label = "Remote port"
                            description = "Remote port number"
                            widget = edit
                            type = int
                            default_value = 4713
                            min_value = 1
                            max_value = 65535
                            group = "Network:1"
                        }

                        stream_source_id {
                            description = "Stream source ID number"
                            label = "Stream source ID"
                            type = int
                            widget = edit
                            default_value = 1000
                            min_value = 1
                            max_value = 65534
                            group = "Data:2"
                        }

                        pmu_num {
                            description = "Number of PMU data in received message"
                            label = "Number of PMU"
                            type = int
                            widget = edit
                            default_value = 1
                            min_value = 1
                            max_value = 100
                            group = "Data:2"
                        }

                        phasor_num {
                            description = "Number of phasor signals per PMU"
                            label = "Number of Phasors"
                            type = int[]
                            widget = edit
                            default_value = "[1]"
                            min_value = 0
                            max_value = 32767
                            group = "Data:2"
                        }

                        analog_num {
                            description = "Number of analog signals per PMU"
                            label = "Number of Analogs"
                            type = int[]
                            widget = edit
                            default_value = "[1]"
                            min_value = 0
                            max_value = 32767
                            group = "Data:2"
                        }

                        digital_num {
                            description = "Number of digital words per PMU"
                            label = "Number of Digital words"
                            type = int[]
                            widget = edit
                            default_value = "[1]"
                            min_value = 0
                            max_value = 32767
                            group = "Data:2"
                        }

                        extract_time_data {
                            description = "Extract time data from the PMU"
                            label = "Extract Time data"
                            type = bool
                            widget = checkbox
                            default_value = False
                            group = "Data:2"

                            CODE property_value_changed
                                from typhoon.api.schematic_editor.const import ITEM_COMPONENT, ITEM_PORT

                                comp_handle = mdl.get_sub_level_handle(container_handle)

                                if new_value:
                                    SOC_in = mdl.create_component(
                                        "core/SP input",
                                        parent=comp_handle,
                                        name="SOC_in",
                                        position=(8000, 8600)
                                    )

                                    SOC = mdl.create_port(
                                        name="SOC",
                                        parent=comp_handle,
                                        kind="sp",
                                        direction="out",
                                        terminal_position=("rigth", 7),
                                        position=(8400, 8600)
                                    )

                                    mdl.create_connection(mdl.term(SOC_in, "out"), SOC)

                                    FRACSEC_in = mdl.create_component(
                                        "core/SP input",
                                        parent=comp_handle,
                                        name="FRACSEC_in",
                                        position=(8000, 8700)
                                    )

                                    FRACSEC = mdl.create_port(
                                        name="FRACSEC",
                                        parent=comp_handle,
                                        kind="sp",
                                        direction="out",
                                        terminal_position=("rigth", 7),
                                        position=(8400, 8700)
                                    )

                                    mdl.create_connection(mdl.term(FRACSEC_in, "out"), FRACSEC)

                                    time_quality_in = mdl.create_component(
                                        "core/SP input",
                                        parent=comp_handle,
                                        name="time_quality_in",
                                        position=(8000, 8800)
                                    )

                                    time_quality = mdl.create_port(
                                        name="time_quality",
                                        parent=comp_handle,
                                        kind="sp",
                                        direction="out",
                                        terminal_position=("rigth", 7),
                                        position=(8400, 8800)
                                    )

                                    mdl.create_connection(mdl.term(time_quality_in, "out"), time_quality)

                                else:
                                    SOC_in = mdl.get_item("SOC_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    if SOC_in:
                                        mdl.delete_item(SOC_in)

                                    SOC = mdl.get_item("SOC", parent=comp_handle, item_type=ITEM_PORT)
                                    if SOC:
                                        mdl.delete_item(SOC)

                                    FRACSEC_in = mdl.get_item("FRACSEC_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    if FRACSEC_in:
                                        mdl.delete_item(FRACSEC_in)

                                    FRACSEC = mdl.get_item("FRACSEC", parent=comp_handle, item_type=ITEM_PORT)
                                    if FRACSEC:
                                        mdl.delete_item(FRACSEC)

                                    time_quality_in = mdl.get_item("time_quality_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    if time_quality_in:
                                        mdl.delete_item(time_quality_in)

                                    time_quality = mdl.get_item("time_quality", parent=comp_handle, item_type=ITEM_PORT)
                                    if time_quality:
                                        mdl.delete_item(time_quality)

                            ENDCODE
                        }

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = "100e-6"
                        }

                        CODE pre_compile
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                            pmu_num = mdl.get_property_value(mdl.prop(item_handle, "pmu_num"))
                            phasor_num = mdl.get_property_value(mdl.prop(item_handle, "phasor_num"))
                            analog_num = mdl.get_property_value(mdl.prop(item_handle, "analog_num"))
                            digital_num = mdl.get_property_value(mdl.prop(item_handle, "digital_num"))

                            comp_handle = mdl.get_sub_level_handle(item_handle)

                            stat_in = mdl.get_item("stat_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                            freq_in = mdl.get_item("freq_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                            dfreq_in = mdl.get_item("dfreq_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                            phasor_in = mdl.get_item("phasor_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                            analog_in = mdl.get_item("analog_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                            digital_in = mdl.get_item("digital_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                            SOC_in = mdl.get_item("SOC_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                            time_quality_in = mdl.get_item("time_quality_in", parent=comp_handle, item_type=ITEM_COMPONENT)

                            mdl.set_property_value(mdl.prop(stat_in, "dimension"), pmu_num)
                            mdl.set_property_value(mdl.prop(freq_in, "dimension"), pmu_num)
                            mdl.set_property_value(mdl.prop(dfreq_in, "dimension"), pmu_num)
                            mdl.set_property_value(mdl.prop(phasor_in, "dimension"), sum(phasor_num)*2)
                            mdl.set_property_value(mdl.prop(analog_in, "dimension"), sum(analog_num))
                            mdl.set_property_value(mdl.prop(digital_in, "dimension"), sum(digital_num))

                            mdl.set_terminal_sp_type(mdl.term(stat_in, "out"), "int")
                            mdl.set_terminal_sp_type(mdl.term(digital_in, "out"), "int")

                            if mdl.get_property_value(mdl.prop(item_handle, "extract_time_data")):
                                mdl.set_terminal_sp_type(mdl.term(SOC_in, "out"), "int")
                                mdl.set_terminal_sp_type(mdl.term(time_quality_in, "out"), "int")
                        ENDCODE

                        CODE post_resolve
                            from typhoon.import_path.handlers.pmu_receive import create_c_code

                            comp_handle = mdl.get_sub_level_handle(item_handle)

                            create_c_code(mdl, item_handle, comp_handle)
                        ENDCODE

                        CODE init
                            def dialog_dynamics(mdl, item_handle, prop_name, new_value):
                                protocol = mdl.prop(item_handle, "protocol")
                                ip_addr = mdl.prop(item_handle, "ip_addr")
                                netmask = mdl.prop(item_handle, "netmask")
                                port = mdl.prop(item_handle, "port")
                                local_port = mdl.prop(item_handle, "local_port")
                                remote_port = mdl.prop(item_handle, "remote_port")
                                gateway_enable = mdl.prop(item_handle, "gateway_enable")
                                auto_start = mdl.prop(item_handle, "auto_start")
                                preferred_configuration = mdl.prop(item_handle, "preferred_configuration")

                                if prop_name == "protocol":
                                    protocol_val = mdl.get_property_disp_value(protocol)

                                    if protocol_val == "TCP":
                                        mdl.show_property(port)
                                        mdl.hide_property(local_port)
                                        mdl.hide_property(remote_port)
                                    else:
                                        mdl.hide_property(port)
                                        mdl.show_property(local_port)
                                        mdl.show_property(remote_port)

                                if prop_name == "auto_start":
                                    value = mdl.get_property_disp_value(auto_start)
                                    if value:
                                        mdl.show_property(preferred_configuration)
                                    else:
                                        mdl.hide_property(preferred_configuration)
                        ENDCODE
                    }

                }
                [
                    size = 112, 128
                ]

            }

            component Category "PROFINET" {
                visible = "real_time"
                component Subsystem "IO Device" {

                    layout = dynamic
                    require = "sw_profinet"

                    mask {
                        icon = "image('profinet_io_device.svg')"
                        help_file = "profinet_io_device.html"

                        description = ""

                        hil_id {
                            description = "ID of the device on which this component will be executed"
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        ip_address {
                            description = "Server IP address"
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.100"
                            nonvisible
                        }

                        netmask {
                            description = "Netmask"
                            widget = edit
                            type = ip_address
                            default_value = "255.255.255.0"
                            nonvisible
                        }

                        gateway {
                            description = "Gateway"
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.1"
                            nonvisible
                        }

                        gateway_enable {
                            description = ""
                            widget = checkbox
                            type = bool
                            default_value = False
                            nonvisible
                        }

                        daps {
                            description = ""
                            type = string
                            default_value = "[]"
                            nonvisible
                            no_evaluate
                        }

                        modules {
                            description = ""
                            type = string
                            default_value = "[]"
                            nonvisible
                            no_evaluate
                        }

                        chosen_modules {
                            description = ""
                            type = string
                            default_value = "[]"
                            nonvisible
                            no_evaluate
                        }

                        chose_dap {
                            description = ""
                            type = string
                            default_value = ""
                            nonvisible
                            no_evaluate
                        }

                        chose_dap_full_info {
                            description = ""
                            type = string
                            default_value = ""
                            nonvisible
                            no_evaluate
                        }

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = 100e-6
                        }
                        file_name {
                            description = ""
                            type = string
                            default_value = ""
                            nonvisible
                            no_evaluate
                        }

                        vendor_id {
                            description = ""
                            type = string
                            default_value = ""
                            nonvisible
                            no_evaluate
                        }

                        device_id {
                            description = ""
                            type = string
                            default_value = ""
                            nonvisible
                            no_evaluate
                        }

                        CODE init
                            from typhoon.import_path.handlers.io_device import create_internal_components

                            comp_handle = mdl.get_sub_level_handle(item_handle)

                            component_modules = eval(mdl.get_property_value(mdl.prop(item_handle, "chosen_modules")))
                            if isinstance(component_modules, dict):
                                component_modules = [component_modules]

                            create_internal_components(mdl, comp_handle, component_modules)
                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.io_device_dialog import IODeviceDialog

                            dialog = IODeviceDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                            dialog.exec_()
                        ENDCODE

                        CODE post_resolve
                            from typhoon.import_path.handlers.io_device import component_post_resolve

                            component_post_resolve(mdl, item_handle)
                        ENDCODE 

                    }
                }
                [
                    size = 184, 184
                ]

            }


            component Category "IEC 60870" {
                visible = "real_time"
                component Subsystem "IEC 60870 Server" {

                    layout = dynamic
                    require = "sw_iec60870"

                    mask {
                        icon = "image('iec60870/Server.svg')"
                        help_file = "iec_60870_server.html#iec_60870_server__section_og4_c53_btb"

                        description = ""

                        hil_id {
                            description = "ID of the device on which this component will be executed"
                            type = int
                            default_value = 0
                            nonvisible
                        }

                        ip_address {
                            description = "Server IP address"
                            widget = edit
                            type = ip_address
                            default_value = "192.168.0.100"
                            nonvisible
                        }

                        port {
                            description = "Port"
                            widget = edit
                            type = int
                            default_value = "2404"
                            nonvisible
                        }

                        netmask {
                            description = "Netmask"
                            widget = edit
                            type = ip_address
                            default_value = "255.255.255.0"
                            nonvisible
                        }

                        execution_rate {
                            label = "Execution rate"
                            previous_names = "timer_interval"
                            description = "Signal processing execution rate"
                            widget = edit
                            type = real
                            default_value = 100e-6
                        }

                        asdu_input {
                            description = ""
                            type = string
                            default_value = "[]"
                            nonvisible
                            no_evaluate
                        }

                        asdu_output {
                            description = ""
                            type = string
                            default_value = "[]"
                            nonvisible
                            no_evaluate
                        }

                        CODE init
                            from typhoon.import_path.handlers.iec_60870 import create_internal_components

                            comp_handle = mdl.get_sub_level_handle(item_handle)

                            asdu_input = eval(mdl.get_property_value(mdl.prop(item_handle, "asdu_input")))
                            asdu_output = eval(mdl.get_property_value(mdl.prop(item_handle, "asdu_output")))

                            if isinstance(asdu_input, dict):
                                asdu_input = [asdu_input]

                            if isinstance(asdu_output, dict):
                                asdu_output = [asdu_output]

                            create_internal_components(mdl, comp_handle, asdu_input, asdu_output)
                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.iec_60870_dialog import IEC60870ServerDialog

                            dialog = IEC60870ServerDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                            dialog.exec_()
                        ENDCODE

                    }
                }
                [
                    size = 112, 128
                ]

            }

            component Category "EV Charging" {
                visible = "real_time"
                component Category "ISO 15118" {

                    component Subsystem "ISO 15118 EVCC" {

                        layout = dynamic
                        require = "sw_iso15118"

                        // Inputs

                        // PP
                        component "core/Data Type Conversion" "pp_data_conversion" {
                            output_type = "int"
                        }
                        [ position = 8200, 8000]

                        component "core/Limit" "pp_limit" {
                            upper_limit = 2
                            lower_limit = -1
                        }
                        [ position = 8400, 8000]

                        component "core/SP output" "pp_in" {
                            dimension = "1"
                        }
                        [ position = 8600, 8000 ]

                        // CP
                        component "core/Data Type Conversion" "cp_data_conversion" {
                            output_type = "int"
                        }
                        [ position = 8200, 8100]

                        component "core/Limit" "cp_limit" {
                            upper_limit = 2
                            lower_limit = -1
                        }
                        [ position = 8400, 8100]

                        component "core/SP output" "cp_in" {
                            dimension = "1"
                        }
                        [ position = 8600, 8100 ]

                        // EV charge complete
                        component "core/Data Type Conversion" "charge_complete_data_conversion" {
                            output_type = "int"
                        }
                        [ position = 8200, 8700]

                        component "core/Limit" "charge_complete_limit" {
                            upper_limit = 1
                            lower_limit = 0
                        }
                        [ position = 8400, 8700]

                        component "core/SP output" "charge_complete_in" {
                            dimension = "1"
                        }
                        [ position = 8600, 8700 ]

                        port PP {
                            position = left:1
                            direction = out
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 8000, 8000 ]

                        port CP {
                            position = left:2
                            direction = out
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 8000, 8100 ]

                    
                        port charge_complete {
                            position = left:8
                            direction = out
                            kind = sp
                            label = "EVChargeComplete"
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 8000, 8700 ]

                        connect PP "pp_data_conversion.in"
                        connect "pp_data_conversion.out" "pp_limit.in"
                        connect "pp_limit.out" "pp_in.in"

                        connect CP "cp_data_conversion.in"
                        connect "cp_data_conversion.out" "cp_limit.in"
                        connect "cp_limit.out" "cp_in.in"

                        connect charge_complete "charge_complete_data_conversion.in"
                        connect "charge_complete_data_conversion.out" "charge_complete_limit.in"
                        connect "charge_complete_limit.out" "charge_complete_in.in"

                        // Outputs
                        component "core/SP input" "session_active_out" {
                            dimension = "1"
                            execution_rate = "execution_rate"
                        }
                        [ position = 8800, 7800 ]

                        component "core/SP input" "received_message_out" {
                            dimension = "1"
                            execution_rate = "execution_rate"
                        }
                        [ position = 8800, 7900 ]

                        component "core/SP input" "response_code_out" {
                            dimension = "1"
                            execution_rate = "execution_rate"
                        }
                        [ position = 8800, 8000 ]

                        port session_active {
                            position = top:1
                            direction = in
                            kind = sp
                            label = "SessionActive"
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 9000, 7700 ]

                        port received_message {
                            position = right:1
                            direction = in
                            kind = sp
                            label="EVSEReceivedMessage"
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 9000, 7900 ]

                        port response_code {
                            position = right:2
                            direction = in
                            kind = sp
                            label="EVSEResponseCode"
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 9000, 8000 ]


                        connect "session_active_out.out" session_active
                        connect "received_message_out.out" received_message
                        connect "response_code_out.out" response_code
                        // connect "evse_status_out.out" evse_status
                        // connect "max_current_limit_out.out" max_current_limit
                        // connect "max_voltage_limit_out.out" max_voltage_limit
                        // connect "max_power_limit_out.out" max_power_limit
                        // connect "min_current_limit_out.out" min_current_limit
                        // connect "min_voltage_limit_out.out" min_voltage_limit
                        // connect "peak_current_ripple_out.out" peak_current_ripple
                        // connect "current_regulation_tollerance_out.out" current_regulation_tollerance
                        // connect "energy_to_be_delivered_out.out" energy_to_be_delivered
                        // connect "present_current_out.out" present_current
                        // connect "present_voltage_out.out" present_voltage
                        // connect "current_limit_reached_out.out" current_limit_reached
                        // connect "voltage_limit_reached_out.out" voltage_limit_reached
                        // connect "power_limit_reached_out.out" power_limit_reached

                        mask {
                            icon = "image('iso15118/EVCC.svg')"
                            help_file = "iso15118_protocol.html#iso15118_protocol__section_jps_r2k_ctb"

                            description = ""

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            connection_type {
                                label = "Connection type"
                                description = "Establish trusted (TCP) or secured (TLS) communication with the server"
                                widget = combo
                                type = string
                                combo_values = "Trusted connection", "Secured connection"
                                default_value = "Trusted connection"
                            }

                            path_type {
                                label = "Path type"
                                widget = edit
                                type = string
                                default_value = "Absolute"
                                nonvisible
                                no_evaluate
                            }

                            folder_path_pr {
                                label = "Folder with certificates path"
                                type = string
                                default_value = ""
                                nonvisible
                                 
                            }

                            folder_path_label {
                                description = ""
                                type = string
                                default_value = "Imported folder path: "
                            }

                            imported_certificates {
                                description = "Imported certificates: "
                                widget = edit
                                type = string
                                default_value = '{"v2g_root_pem_path": "", "v2g_root_der_path": ""}'
                                nonvisible
                            }

                            medium_type {
                                label = "Medium type"
                                description = "Select between Ethernet or PLC medium"
                                widget = combo
                                type = string
                                combo_values = "Ethernet", "PLC"
                                default_value = "Ethernet"

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    from typhoon.api.schematic_editor.exception import SchApiException

                                    comp_handle = mdl.get_sub_level_handle(container_handle)

                                    if new_value == "Ethernet":
                                        slac_state_out = mdl.get_item("slac_state_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if slac_state_out:
                                            mdl.delete_item(slac_state_out)

                                        slac_state_termination = mdl.get_item("slac_state_termination", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if slac_state_termination:
                                            mdl.delete_item(slac_state_termination)
                                    else:
                                        try:
                                            slac_state_out = mdl.create_component(
                                                "core/SP input",
                                                name="slac_state_out",
                                                parent=comp_handle,
                                                position=(8200, 7700)
                                            )

                                            mdl.set_property_value(mdl.prop(slac_state_out, "dimension"), 1)
                                            mdl.set_property_value(mdl.prop(slac_state_out, "execution_rate"), "execution_rate")

                                            slac_state_termination = mdl.create_component(
                                                "core/Termination",
                                                name="slac_state_termination",
                                                parent=comp_handle,
                                                position=(8300, 7700)
                                            )

                                            mdl.create_connection(mdl.term(slac_state_out, "out"), mdl.term(slac_state_termination, "in"))
                                        except SchApiException:
                                            pass
                                ENDCODE
                            }

                            supported_protocols {
                                label = "Supported protocols"
                                description = "List of supported protocols"
                                widget = edit
                                type = string
                                default_value = '[{"protocol_namespace": "uru:iso:15118:2:2013:MsgDef", "version_number_major": 2, "version_number_minor": 0, "schema_id": 10, "priority": 1}]'
                                nonvisible
                            }

                            service_category {
                                label = "Service category"
                                description = "List of supported service categories"
                                widget = combo
                                type = string
                                combo_values = "EV Charging"
                                default_value = "EV Charging"
                            }

                            payment_options {
                                label = "Payment options"
                                description = "List of supported payment methods"
                                widget = combo
                                type = string
                                combo_values = "External Payment", "Contract"
                                default_value = "External Payment"
                            }

                            free_service {
                                label = "Free service"
                                description = "Accept only free services"
                                widget = checkbox
                                type = bool
                                default_value = True
                                nonvisible
                            }

                            energy_transfer_mode {
                                label = "Requested energy transfer mode"
                                description = ""
                                widget = combo
                                type = string
                                combo_values = "AC three phase core", "AC single phase core", "DC core", "DC extended", "DC combo core", "DC unique"
                                default_value = "DC core"

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_PORT, ITEM_COMPONENT
                                    from typhoon.api.schematic_editor.exception import SchApiException

                                    comp_handle = mdl.get_sub_level_handle(container_handle) 


                                    # time_to_full = mdl.get_property_value(mdl.prop(container_handle, "include_time_to_full_soc"))
                                    # time_to_bulk = mdl.get_property_value(mdl.prop(container_handle, "include_time_to_bulk_soc"))

                                    if new_value.startswith("DC"):
                                        try:
                                            ready_port = mdl.create_port(
                                                name="ready",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVReady",
                                                direction="in",
                                                terminal_position=("left", 3),
                                                position=(8000, 8200)
                                            )
                                            
                                            ready_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="ready_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8200)
                                            )

                                            mdl.set_property_value(mdl.prop(ready_conversion, "output_type"), "int")

                                            ready_limit = mdl.create_component(
                                                "core/Limit",
                                                name="ready_limit",
                                                parent=comp_handle,
                                                position=(8400, 8200)
                                            )

                                            mdl.set_property_value(mdl.prop(ready_limit, "upper_limit"), 1)
                                            mdl.set_property_value(mdl.prop(ready_limit, "lower_limit"), 0)

                                            ready_in = mdl.create_component(
                                                "core/SP output",
                                                name="ready_in",
                                                parent=comp_handle,
                                                position=(8600, 8200)
                                            )

                                            mdl.create_connection(ready_port, mdl.term(ready_conversion, "in"))
                                            mdl.create_connection(mdl.term(ready_conversion, "out"), mdl.term(ready_limit, "in"))
                                            mdl.create_connection(mdl.term(ready_limit, "out"), mdl.term(ready_in, "in"))         

                                            error_code_port = mdl.create_port(
                                                name="error_code",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVErrorCode",
                                                direction="in",
                                                terminal_position=("left", 4),
                                                position=(8000, 8300)
                                            )
                                            
                                            error_code_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="error_code_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8300)
                                            )

                                            mdl.set_property_value(mdl.prop(error_code_conversion, "output_type"), "int")

                                            error_code_limit = mdl.create_component(
                                                "core/Limit",
                                                name="error_code_limit",
                                                parent=comp_handle,
                                                position=(8400, 8300)
                                            )

                                            mdl.set_property_value(mdl.prop(error_code_limit, "upper_limit"), 11)
                                            mdl.set_property_value(mdl.prop(error_code_limit, "lower_limit"), 0)

                                            error_code_in = mdl.create_component(
                                                "core/SP output",
                                                name="error_code_in",
                                                parent=comp_handle,
                                                position=(8600, 8300)
                                            )

                                            mdl.create_connection(error_code_port, mdl.term(error_code_conversion, "in"))
                                            mdl.create_connection(mdl.term(error_code_conversion, "out"), mdl.term(error_code_limit, "in"))
                                            mdl.create_connection(mdl.term(error_code_limit, "out"), mdl.term(error_code_in, "in"))
                                            

                                            soc_port = mdl.create_port(
                                                name="SoC",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSoC",
                                                direction="in",
                                                terminal_position=("left", 5),
                                                position=(8000, 8400)
                                            )
                                            
                                            soc_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="soc_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8400)
                                            )

                                            mdl.set_property_value(mdl.prop(soc_conversion, "output_type"), "int")

                                            soc_limit = mdl.create_component(
                                                "core/Limit",
                                                name="soc_limit",
                                                parent=comp_handle,
                                                position=(8400, 8400)
                                            )

                                            mdl.set_property_value(mdl.prop(soc_limit, "upper_limit"), 100)
                                            mdl.set_property_value(mdl.prop(soc_limit, "lower_limit"), 0)

                                            soc_in = mdl.create_component(
                                                "core/SP output",
                                                name="soc_in",
                                                parent=comp_handle,
                                                position=(8600, 8400)
                                            )

                                            mdl.create_connection(soc_port, mdl.term(soc_conversion, "in"))
                                            mdl.create_connection(mdl.term(soc_conversion, "out"), mdl.term(soc_limit, "in"))
                                            mdl.create_connection(mdl.term(soc_limit, "out"), mdl.term(soc_in, "in"))
                                            
                                            target_voltage_port = mdl.create_port(
                                                name="target_voltage",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVTargetVoltage",
                                                direction="in",
                                                terminal_position=("left", 6),
                                                position=(8000, 8500)
                                            )
                                            
                                            target_voltage_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="target_voltage_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8500)
                                            )

                                            mdl.set_property_value(mdl.prop(target_voltage_conversion, "output_type"), "int")

                                            target_voltage_limit = mdl.create_component(
                                                "core/Limit",
                                                name="target_voltage_limit",
                                                parent=comp_handle,
                                                position=(8400, 8500)
                                            )

                                            target_voltage_in = mdl.create_component(
                                                "core/SP output",
                                                name="target_voltage_in",
                                                parent=comp_handle,
                                                position=(8600, 8500)
                                            )

                                            mdl.create_connection(target_voltage_port, mdl.term(target_voltage_conversion, "in"))
                                            mdl.create_connection(mdl.term(target_voltage_conversion, "out"), mdl.term(target_voltage_limit, "in"))
                                            mdl.create_connection(mdl.term(target_voltage_limit, "out"), mdl.term(target_voltage_in, "in"))

                                            target_current_port = mdl.create_port(
                                                name="target_current",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVTargetCurrent",
                                                direction="in",
                                                terminal_position=("left", 7),
                                                position=(8000, 8600)
                                            )
                                            
                                            target_current_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="target_current_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8600)
                                            )

                                            mdl.set_property_value(mdl.prop(target_current_conversion, "output_type"), "int")

                                            target_current_limit = mdl.create_component(
                                                "core/Limit",
                                                name="target_current_limit",
                                                parent=comp_handle,
                                                position=(8400, 8600)
                                            )

                                            target_current_in = mdl.create_component(
                                                "core/SP output",
                                                name="target_current_in",
                                                parent=comp_handle,
                                                position=(8600, 8600)
                                            )

                                            mdl.create_connection(target_current_port, mdl.term(target_current_conversion, "in"))
                                            mdl.create_connection(mdl.term(target_current_conversion, "out"), mdl.term(target_current_limit, "in"))
                                            mdl.create_connection(mdl.term(target_current_limit, "out"), mdl.term(target_current_in, "in"))
                                            
                                            evse_status_port = mdl.create_port(
                                                name="evse_status",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEStatusCode",
                                                direction="out",
                                                terminal_position=("right", 3),
                                                position=(9000, 8100)
                                            )
                                            
                                            evse_status_out = mdl.create_component(
                                                "core/SP input",
                                                name="evse_status_out",
                                                parent=comp_handle,
                                                position=(8800, 8100)
                                            )
                                            
                                            mdl.set_property_value(mdl.prop(evse_status_out, "execution_rate"), "execution_rate")

                                            evse_isolation_status_port = mdl.create_port(
                                                name="evse_isolation_status",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEIsolationStatus",
                                                direction="out",
                                                terminal_position=("right", 4),
                                                position=(9000, 8200)
                                            )
                                            
                                            evse_isolation_status_out = mdl.create_component(
                                                "core/SP input",
                                                name="evse_isolation_status_out",
                                                parent=comp_handle,
                                                position=(8800, 8200)
                                            )
                                            
                                            mdl.set_property_value(mdl.prop(evse_isolation_status_out, "execution_rate"), "execution_rate")

                                            max_current_limit_port = mdl.create_port(
                                                name="max_current_limit",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEMaximumCurrentLimit",
                                                direction="out",
                                                terminal_position=("right", 5),
                                                position=(9000, 8300)
                                            )
                                            
                                            max_current_limit_out = mdl.create_component(
                                                "core/SP input",
                                                name="max_current_limit_out",
                                                parent=comp_handle,
                                                position=(8800, 8300)
                                            )

                                            mdl.set_property_value(mdl.prop(max_current_limit_out, "execution_rate"), "execution_rate") 

                                            max_voltage_limit_port = mdl.create_port(
                                                name="max_voltage_limit",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEMaximumVoltageLimit",
                                                direction="out",
                                                terminal_position=("right", 6),
                                                position=(9000, 8400)
                                            )

                                            max_voltage_limit_out = mdl.create_component(
                                                "core/SP input",
                                                name="max_voltage_limit_out",
                                                parent=comp_handle,
                                                position=(8800, 8400)
                                            )

                                            mdl.set_property_value(mdl.prop(max_voltage_limit_out, "execution_rate"), "execution_rate")

                                            max_power_limit_port = mdl.create_port(
                                                name="max_power_limit",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEMaximumPowerLimit",
                                                direction="out",
                                                terminal_position=("right", 7),
                                                position=(9000, 8500)
                                            )
                                            max_power_limit_out = mdl.create_component(
                                                "core/SP input",
                                                name="max_power_limit_out",
                                                parent=comp_handle,
                                                position=(8800, 8500)
                                            )

                                            mdl.set_property_value(mdl.prop(max_power_limit_out, "execution_rate"), "execution_rate")

                                            min_current_limit_port = mdl.create_port(
                                                name="min_current_limit",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEMinimumCurrentLimit",
                                                direction="out",
                                                terminal_position=("right", 8),
                                                position=(9000, 8600)
                                            )
                                            min_current_limit_out = mdl.create_component(
                                                "core/SP input",
                                                name="min_current_limit_out",
                                                parent=comp_handle,
                                                position=(8800, 8600)
                                            )

                                            mdl.set_property_value(mdl.prop(min_current_limit_out, "execution_rate"), "execution_rate")

                                            min_voltage_limit_port = mdl.create_port(
                                                name="min_voltage_limit",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEMinimumVoltageLimit",
                                                direction="out",
                                                terminal_position=("right", 9),
                                                position=(9000, 8700)
                                            )
                                            min_voltage_limit_out = mdl.create_component(
                                                "core/SP input",
                                                name="min_voltage_limit_out",
                                                parent=comp_handle,
                                                position=(8800, 8700)
                                            )
                                            
                                            mdl.set_property_value(mdl.prop(min_voltage_limit_out, "execution_rate"), "execution_rate")

                                            peak_current_ripple_port = mdl.create_port(
                                                name="peak_current_ripple",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEPeakCurrentRipple",
                                                direction="out",
                                                terminal_position=("right", 10),
                                                position=(9000, 8800)
                                            )
                                            peak_current_ripple_out = mdl.create_component(
                                                "core/SP input",
                                                name="peak_current_ripple_out",
                                                parent=comp_handle,
                                                position=(8800, 8800)
                                            )

                                            mdl.set_property_value(mdl.prop(peak_current_ripple_out, "execution_rate"), "execution_rate")

                                            current_regulation_tollerance_port = mdl.create_port(
                                                name="current_regulation_tollerance",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSECurrentRegulationTolerance",
                                                direction="out",
                                                terminal_position=("right", 11),
                                                position=(9000, 8900)
                                            )
                                            current_regulation_tollerance_out = mdl.create_component(
                                                "core/SP input",
                                                name="current_regulation_tollerance_out",
                                                parent=comp_handle,
                                                position=(8800, 8900)
                                            )

                                            mdl.set_property_value(mdl.prop(current_regulation_tollerance_out, "execution_rate"), "execution_rate")

                                            energy_to_be_delivered_port = mdl.create_port(
                                                name="energy_to_be_delivered",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEEnergyToBeDelivered",
                                                direction="out",
                                                terminal_position=("right", 12),
                                                position=(9000, 9000)
                                            )
                                            energy_to_be_delivered_out = mdl.create_component(
                                                "core/SP input",
                                                name="energy_to_be_delivered_out",
                                                parent=comp_handle,
                                                position=(8800, 9000)
                                            )
                                            
                                            mdl.set_property_value(mdl.prop(energy_to_be_delivered_out, "execution_rate"), "execution_rate")

                                            present_current_port = mdl.create_port(
                                                name="present_current",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEPresentCurrent",
                                                direction="out",
                                                terminal_position=("right", 13),
                                                position=(9000, 9100)
                                            )
                                            present_current_out = mdl.create_component(
                                                "core/SP input",
                                                name="present_current_out",
                                                parent=comp_handle,
                                                position=(8800, 9100)
                                            )

                                            mdl.set_property_value(mdl.prop(present_current_out, "execution_rate"), "execution_rate")

                                            present_voltage_port = mdl.create_port(
                                                name="present_voltage",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEPresentVoltage",
                                                direction="out",
                                                terminal_position=("right", 14),
                                                position=(9000, 9200)
                                            )
                                            present_voltage_out = mdl.create_component(
                                                "core/SP input",
                                                name="present_voltage_out",
                                                parent=comp_handle,
                                                position=(8800, 9200)
                                            )

                                            mdl.set_property_value(mdl.prop(present_voltage_out, "execution_rate"), "execution_rate")

                                            current_limit_reached_port = mdl.create_port(
                                                name="current_limit_reached",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSECurrentLimitAchieved",
                                                direction="out",
                                                terminal_position=("right", 15),
                                                position=(9000, 9300)
                                            )
                                            current_limit_reached_out = mdl.create_component(
                                                "core/SP input",
                                                name="current_limit_reached_out",
                                                parent=comp_handle,
                                                position=(8800, 9300)
                                            )
                                            
                                            mdl.set_property_value(mdl.prop(current_limit_reached_out, "execution_rate"), "execution_rate")

                                            voltage_limit_reached_port = mdl.create_port(
                                                name="voltage_limit_reached",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEVoltageLimitAchieved",
                                                direction="out",
                                                terminal_position=("right", 16),
                                                position=(9000, 9400)
                                            )
                                            voltage_limit_reached_out = mdl.create_component(
                                                "core/SP input",
                                                name="voltage_limit_reached_out",
                                                parent=comp_handle,
                                                position=(8800, 9400)
                                            )

                                            mdl.set_property_value(mdl.prop(voltage_limit_reached_out, "execution_rate"), "execution_rate")

                                            power_limit_reached_port = mdl.create_port(
                                                name="power_limit_reached",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEPowerLimitAchieved",
                                                direction="out",
                                                terminal_position=("right", 17),
                                                position=(9000, 9500)
                                            )
                                            power_limit_reached_out = mdl.create_component(
                                                "core/SP input",
                                                name="power_limit_reached_out",
                                                parent=comp_handle,
                                                position=(8800, 9500)
                                            )

                                            mdl.set_property_value(mdl.prop(power_limit_reached_out, "execution_rate"), "execution_rate")

                                            mdl.create_connection(mdl.term(evse_status_out, "out"), evse_status_port)
                                            mdl.create_connection(mdl.term(evse_isolation_status_out, "out"), evse_isolation_status_port)
                                            mdl.create_connection(mdl.term(max_current_limit_out, "out"), max_current_limit_port)
                                            mdl.create_connection(mdl.term(max_voltage_limit_out, "out"), max_voltage_limit_port)
                                            mdl.create_connection(mdl.term(max_power_limit_out, "out"), max_power_limit_port)
                                            mdl.create_connection(mdl.term(min_current_limit_out, "out"), min_current_limit_port)
                                            mdl.create_connection(mdl.term(min_voltage_limit_out, "out"), min_voltage_limit_port)
                                            mdl.create_connection(mdl.term(peak_current_ripple_out, "out"), peak_current_ripple_port)
                                            mdl.create_connection(mdl.term(current_regulation_tollerance_out, "out"), current_regulation_tollerance_port)
                                            mdl.create_connection(mdl.term(energy_to_be_delivered_out, "out"), energy_to_be_delivered_port)
                                            mdl.create_connection(mdl.term(present_current_out, "out"), present_current_port)
                                            mdl.create_connection(mdl.term(present_voltage_out, "out"), present_voltage_port)
                                            mdl.create_connection(mdl.term(current_limit_reached_out, "out"), current_limit_reached_port)
                                            mdl.create_connection(mdl.term(voltage_limit_reached_out, "out"), voltage_limit_reached_port)
                                            mdl.create_connection(mdl.term(power_limit_reached_out, "out"), power_limit_reached_port)
                                            
                                        except SchApiException:
                                            pass
                                    else:
                                        error_code_port = mdl.get_item("error_code", parent=comp_handle, item_type=ITEM_PORT)
                                        if error_code_port:
                                            mdl.delete_item(error_code_port)

                                        error_code_conversion = mdl.get_item("error_code_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if error_code_conversion:
                                            mdl.delete_item(error_code_conversion)

                                        error_code_limit = mdl.get_item("error_code_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if error_code_limit:
                                            mdl.delete_item(error_code_limit)

                                        error_code_in = mdl.get_item("error_code_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if error_code_in:
                                            mdl.delete_item(error_code_in)
                                        
                                        ready_port = mdl.get_item("ready", parent=comp_handle, item_type=ITEM_PORT)
                                        if ready_port:
                                            mdl.delete_item(ready_port)

                                        ready_conversion = mdl.get_item("ready_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ready_conversion:
                                            mdl.delete_item(ready_conversion)

                                        ready_limit = mdl.get_item("ready_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ready_limit:
                                            mdl.delete_item(ready_limit)

                                        ready_in = mdl.get_item("ready_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ready_in:
                                            mdl.delete_item(ready_in)
                                        
                                        soc_port = mdl.get_item("SoC", parent=comp_handle, item_type=ITEM_PORT)
                                        if soc_port:
                                            mdl.delete_item(soc_port)

                                        soc_conversion = mdl.get_item("soc_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if soc_conversion:
                                            mdl.delete_item(soc_conversion)

                                        soc_limit = mdl.get_item("soc_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if soc_limit:
                                            mdl.delete_item(soc_limit)

                                        soc_in = mdl.get_item("soc_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if soc_in:
                                            mdl.delete_item(soc_in)
                                        
                                        target_voltage_port = mdl.get_item("target_voltage", parent=comp_handle, item_type=ITEM_PORT)
                                        if target_voltage_port:
                                            mdl.delete_item(target_voltage_port)

                                        target_voltage_conversion = mdl.get_item("target_voltage_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if target_voltage_conversion:
                                            mdl.delete_item(target_voltage_conversion)

                                        target_voltage_limit = mdl.get_item("target_voltage_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if target_voltage_limit:
                                            mdl.delete_item(target_voltage_limit)

                                        target_voltage_in = mdl.get_item("target_voltage_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if target_voltage_in:
                                            mdl.delete_item(target_voltage_in)
                                        
                                        target_current_port = mdl.get_item("target_current", parent=comp_handle, item_type=ITEM_PORT)
                                        if target_current_port:
                                            mdl.delete_item(target_current_port)

                                        target_current_conversion = mdl.get_item("target_current_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if target_current_conversion:
                                            mdl.delete_item(target_current_conversion)

                                        target_current_limit = mdl.get_item("target_current_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if target_current_limit:
                                            mdl.delete_item(target_current_limit)

                                        target_current_in = mdl.get_item("target_current_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if target_current_in:
                                            mdl.delete_item(target_current_in)
                                        
                                        # charge_complete_port = mdl.get_item("charge_complete", parent=comp_handle, item_type=ITEM_PORT)
                                        # if charge_complete_port:
                                        #     mdl.delete_item(charge_complete_port)

                                        # charge_complete_conversion = mdl.get_item("charge_complete_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        # if charge_complete_conversion:
                                        #     mdl.delete_item(charge_complete_conversion)

                                        # charge_complete_limit = mdl.get_item("charge_complete_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        # if charge_complete_limit:
                                        #     mdl.delete_item(charge_complete_limit)

                                        # charge_complete_in = mdl.get_item("charge_complete_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        # if charge_complete_in:
                                        #     mdl.delete_item(charge_complete_in)
                                        
                                        bulk_charge_complete_port = mdl.get_item("bulk_charge_complete", parent=comp_handle, item_type=ITEM_PORT)
                                        if bulk_charge_complete_port:
                                            mdl.delete_item(bulk_charge_complete_port)

                                        bulk_charge_complete_data_conversion = mdl.get_item("bulk_charge_complete_data_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if bulk_charge_complete_data_conversion:
                                            mdl.delete_item(bulk_charge_complete_data_conversion)

                                        bulk_charge_complete_limit = mdl.get_item("bulk_charge_complete_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if bulk_charge_complete_limit:
                                            mdl.delete_item(bulk_charge_complete_limit)

                                        bulk_charge_complete_in = mdl.get_item("bulk_charge_complete_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if bulk_charge_complete_in:
                                            mdl.delete_item(bulk_charge_complete_in)

                                        evse_status_port = mdl.get_item("evse_status", parent=comp_handle, item_type=ITEM_PORT)
                                        if evse_status_port:
                                            mdl.delete_item(evse_status_port)

                                        evse_status_out = mdl.get_item("evse_status_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_status_out:
                                            mdl.delete_item(evse_status_out)

                                        evse_isolation_status_port = mdl.get_item("evse_isolation_status", parent=comp_handle, item_type=ITEM_PORT)
                                        if evse_isolation_status_port:
                                            mdl.delete_item(evse_isolation_status_port)

                                        evse_isolation_status_out = mdl.get_item("evse_isolation_status_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_isolation_status_out:
                                            mdl.delete_item(evse_isolation_status_out)

                                        max_current_limit_port = mdl.get_item("max_current_limit", parent=comp_handle, item_type=ITEM_PORT)
                                        if max_current_limit_port:
                                            mdl.delete_item(max_current_limit_port)

                                        max_current_limit_out = mdl.get_item("max_current_limit_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if max_current_limit_out:
                                            mdl.delete_item(max_current_limit_out)
                                        
                                        max_voltage_limit_port = mdl.get_item("max_voltage_limit", parent=comp_handle, item_type=ITEM_PORT)
                                        if max_voltage_limit_port:
                                            mdl.delete_item(max_voltage_limit_port)

                                        max_voltage_limit_out = mdl.get_item("max_voltage_limit_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if max_voltage_limit_out:
                                            mdl.delete_item(max_voltage_limit_out)

                                        max_power_limit_port = mdl.get_item("max_power_limit", parent=comp_handle, item_type=ITEM_PORT)
                                        if max_power_limit_port:
                                            mdl.delete_item(max_power_limit_port)

                                        max_power_limit_out = mdl.get_item("max_power_limit_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if max_power_limit_out:
                                            mdl.delete_item(max_power_limit_out)
                                        
                                        min_current_limit_port = mdl.get_item("min_current_limit", parent=comp_handle, item_type=ITEM_PORT)
                                        if min_current_limit_port:
                                            mdl.delete_item(min_current_limit_port)

                                        min_current_limit_out = mdl.get_item("min_current_limit_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if min_current_limit_out:
                                            mdl.delete_item(min_current_limit_out)


                                        min_voltage_limit_port = mdl.get_item("min_voltage_limit", parent=comp_handle, item_type=ITEM_PORT)
                                        if min_voltage_limit_port:
                                            mdl.delete_item(min_voltage_limit_port)

                                        min_voltage_limit_out = mdl.get_item("min_voltage_limit_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if min_voltage_limit_out:
                                            mdl.delete_item(min_voltage_limit_out)

                                        peak_current_ripple_port = mdl.get_item("peak_current_ripple", parent=comp_handle, item_type=ITEM_PORT)
                                        if peak_current_ripple_port:
                                            mdl.delete_item(peak_current_ripple_port)

                                        peak_current_ripple_out = mdl.get_item("peak_current_ripple_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if peak_current_ripple_out:
                                            mdl.delete_item(peak_current_ripple_out)
                                        
                                        current_regulation_tollerance_port = mdl.get_item("current_regulation_tollerance", parent=comp_handle, item_type=ITEM_PORT)
                                        if current_regulation_tollerance_port:
                                            mdl.delete_item(current_regulation_tollerance_port)

                                        current_regulation_tollerance_out = mdl.get_item("current_regulation_tollerance_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if current_regulation_tollerance_out:
                                            mdl.delete_item(current_regulation_tollerance_out)

                                        energy_to_be_delivered_port = mdl.get_item("energy_to_be_delivered", parent=comp_handle, item_type=ITEM_PORT)
                                        if energy_to_be_delivered_port:
                                            mdl.delete_item(energy_to_be_delivered_port)

                                        energy_to_be_delivered_out = mdl.get_item("energy_to_be_delivered_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if energy_to_be_delivered_out:
                                            mdl.delete_item(energy_to_be_delivered_out)
                                        
                                        present_current_port = mdl.get_item("present_current", parent=comp_handle, item_type=ITEM_PORT)
                                        if present_current_port:
                                            mdl.delete_item(present_current_port)

                                        present_current_out = mdl.get_item("present_current_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if present_current_out:
                                            mdl.delete_item(present_current_out)

                                        
                                        present_voltage_port = mdl.get_item("present_voltage", parent=comp_handle, item_type=ITEM_PORT)
                                        if present_voltage_port:
                                            mdl.delete_item(present_voltage_port)

                                        present_voltage_out = mdl.get_item("present_voltage_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if present_voltage_out:
                                            mdl.delete_item(present_voltage_out)
                                        
                                        current_limit_reached_port = mdl.get_item("current_limit_reached", parent=comp_handle, item_type=ITEM_PORT)
                                        if current_limit_reached_port:
                                            mdl.delete_item(current_limit_reached_port)

                                        current_limit_reached_out = mdl.get_item("current_limit_reached_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if current_limit_reached_out:
                                            mdl.delete_item(current_limit_reached_out)

                                        voltage_limit_reached_port = mdl.get_item("voltage_limit_reached", parent=comp_handle, item_type=ITEM_PORT)
                                        if voltage_limit_reached_port:
                                            mdl.delete_item(voltage_limit_reached_port)

                                        voltage_limit_reached_out = mdl.get_item("voltage_limit_reached_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if voltage_limit_reached_out:
                                            mdl.delete_item(voltage_limit_reached_out)
                                        
                                        power_limit_reached_port = mdl.get_item("power_limit_reached", parent=comp_handle, item_type=ITEM_PORT)
                                        if power_limit_reached_port:
                                            mdl.delete_item(power_limit_reached_port)

                                        power_limit_reached_out = mdl.get_item("power_limit_reached_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if power_limit_reached_out:
                                            mdl.delete_item(power_limit_reached_out)
                                        
                                        time_to_bulk_soc_port = mdl.get_item("time_to_bulk_soc", parent=comp_handle, item_type=ITEM_PORT)
                                        if time_to_bulk_soc_port:
                                            mdl.delete_item(time_to_bulk_soc_port)

                                        time_to_bulk_soc_data_conversion = mdl.get_item("time_to_bulk_soc_data_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_bulk_soc_data_conversion:
                                            mdl.delete_item(time_to_bulk_soc_data_conversion)

                                        time_to_bulk_soc_limit = mdl.get_item("time_to_bulk_soc_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_bulk_soc_limit:
                                            mdl.delete_item(time_to_bulk_soc_limit)

                                        time_to_bulk_soc_in = mdl.get_item("time_to_bulk_soc_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_bulk_soc_in:
                                            mdl.delete_item(time_to_bulk_soc_in)
                                        
                                        time_to_full_soc_port = mdl.get_item("time_to_full_soc", parent=comp_handle, item_type=ITEM_PORT)
                                        if time_to_full_soc_port:
                                            mdl.delete_item(time_to_full_soc_port)

                                        time_to_full_soc_data_conversion = mdl.get_item("time_to_full_soc_data_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_full_soc_data_conversion:
                                            mdl.delete_item(time_to_full_soc_data_conversion)

                                        time_to_full_soc_limit = mdl.get_item("time_to_full_soc_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_full_soc_limit:
                                            mdl.delete_item(time_to_full_soc_limit)

                                        time_to_full_soc_in = mdl.get_item("time_to_full_soc_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_full_soc_in:
                                            mdl.delete_item(time_to_full_soc_in)

                                    if new_value.startswith("AC"):
                                        try:
                                            # charge_progress_port = mdl.create_port(
                                            #     name="charge_progress",
                                            #     parent=comp_handle,
                                            #     kind="sp",
                                            #     label="ChargeProgress",
                                            #     direction="in",
                                            #     terminal_position=("left", 3),
                                            #     position=(8000, 8200)
                                            # )
                                            
                                            # charge_progress_conversion = mdl.create_component(
                                            #     "core/Data Type Conversion",
                                            #     name="charge_progress_conversion",
                                            #     parent=comp_handle,
                                            #     position=(8200, 8200)
                                            # )

                                            # mdl.set_property_value(mdl.prop(charge_progress_conversion, "output_type"), "int")

                                            # charge_progress_limit = mdl.create_component(
                                            #     "core/Limit",
                                            #     name="charge_progress_limit",
                                            #     parent=comp_handle,
                                            #     position=(8400, 8200)
                                            # )

                                            # mdl.set_property_value(mdl.prop(charge_progress_limit, "upper_limit"), 2)
                                            # mdl.set_property_value(mdl.prop(charge_progress_limit, "lower_limit"), 0)

                                            # charge_progress_in = mdl.create_component(
                                            #     "core/SP output",
                                            #     name="charge_progress_in",
                                            #     parent=comp_handle,
                                            #     position=(8600, 8200)
                                            # )

                                            # mdl.create_connection(charge_progress_port, mdl.term(charge_progress_conversion, "in"))
                                            # mdl.create_connection(mdl.term(charge_progress_conversion, "out"), mdl.term(charge_progress_limit, "in"))
                                            # mdl.create_connection(mdl.term(charge_progress_limit, "out"), mdl.term(charge_progress_in, "in"))
                                            
                                            #AC_EVSEStatus 
                                            rcd_port = mdl.create_port(
                                                name="rcd",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="RCD",
                                                direction="out",
                                                terminal_position=("right", 18),
                                                position=(9000, 8100)
                                            )
                                            
                                            rcd_out = mdl.create_component(
                                                "core/SP input",
                                                name="rcd_out",
                                                parent=comp_handle,
                                                position=(8800, 8100)
                                            )

                                            mdl.set_property_value(mdl.prop(rcd_out, "execution_rate"), "execution_rate")

                                            notification_max_delay_port = mdl.create_port(
                                                name="notification_max_delay",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="NotificationMaxDelay",
                                                direction="out",
                                                terminal_position=("right", 19),
                                                position=(9000, 8200)
                                            )
                                            
                                            notification_max_delay_out = mdl.create_component(
                                                "core/SP input",
                                                name="notification_max_delay_out",
                                                parent=comp_handle,
                                                position=(8800, 8200)
                                            )

                                            mdl.set_property_value(mdl.prop(notification_max_delay_out, "execution_rate"), "execution_rate")

                                            evse_notification_port = mdl.create_port(
                                                name="evse_notification",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSENotification",
                                                direction="out",
                                                terminal_position=("right", 20),
                                                position=(9000, 8300)
                                            )

                                            evse_notification_out = mdl.create_component(
                                                "core/SP input",
                                                name="evse_notification_out",
                                                parent=comp_handle,
                                                position=(8800, 8300)
                                            )

                                            mdl.set_property_value(mdl.prop(evse_notification_out, "execution_rate"), "execution_rate")

                                            evse_nominal_voltage_port = mdl.create_port(
                                                name="evse_nominal_voltage",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSENominalVoltage",
                                                direction="out",
                                                terminal_position=("right", 21),
                                                position=(9000, 8400)
                                            )
                                            evse_nominal_voltage_out = mdl.create_component(
                                                "core/SP input",
                                                name="evse_nominal_voltage_out",
                                                parent=comp_handle,
                                                position=(8800, 8400)
                                            )

                                            mdl.set_property_value(mdl.prop(evse_nominal_voltage_out, "execution_rate"), "execution_rate")

                                            evse_max_current_port = mdl.create_port(
                                                name="evse_max_current",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEMaxCurrent",
                                                direction="out",
                                                terminal_position=("right", 22),
                                                position=(9000, 8500)
                                            )
                                            evse_max_current_out = mdl.create_component(
                                                "core/SP input",
                                                name="evse_max_current_out",
                                                parent=comp_handle,
                                                position=(8800, 8500)
                                            )

                                            mdl.set_property_value(mdl.prop(evse_max_current_out, "execution_rate"), "execution_rate")

                                            mdl.create_connection(mdl.term(evse_max_current_out, "out"),evse_max_current_port)
                                            mdl.create_connection(mdl.term(evse_nominal_voltage_out, "out"),evse_nominal_voltage_port)
                                            mdl.create_connection(mdl.term(evse_notification_out, "out"),evse_notification_port)
                                            mdl.create_connection(mdl.term(notification_max_delay_out, "out"),notification_max_delay_port)
                                            mdl.create_connection(mdl.term(rcd_out, "out"),rcd_port)

                                        except SchApiException:
                                            pass
                                    else:
                                        # charge_progress_port = mdl.get_item("charge_progress", parent=comp_handle, item_type=ITEM_PORT)
                                        # if charge_progress_port:
                                        #     mdl.delete_item(charge_progress_port)

                                        # charge_progress_conversion = mdl.get_item("charge_progress_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        # if charge_progress_conversion:
                                        #     mdl.delete_item(charge_progress_conversion)

                                        # charge_progress_limit = mdl.get_item("charge_progress_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        # if charge_progress_limit:
                                        #     mdl.delete_item(charge_progress_limit)

                                        # charge_progress_in = mdl.get_item("charge_progress_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        # if charge_progress_in:
                                        #     mdl.delete_item(charge_progress_in)
                                        
                                        evse_max_current_port = mdl.get_item("evse_max_current", parent=comp_handle, item_type=ITEM_PORT)
                                        if evse_max_current_port:
                                            mdl.delete_item(evse_max_current_port)

                                        evse_max_current_out = mdl.get_item("evse_max_current_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_max_current_out:
                                            mdl.delete_item(evse_max_current_out)

                                        evse_nominal_voltage_port = mdl.get_item("evse_nominal_voltage", parent=comp_handle, item_type=ITEM_PORT)
                                        if evse_nominal_voltage_port:
                                            mdl.delete_item(evse_nominal_voltage_port)

                                        evse_nominal_voltage_out = mdl.get_item("evse_nominal_voltage_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_nominal_voltage_out:
                                            mdl.delete_item(evse_nominal_voltage_out)
                                        
                                        evse_notification_port = mdl.get_item("evse_notification", parent=comp_handle, item_type=ITEM_PORT)
                                        if evse_notification_port:
                                            mdl.delete_item(evse_notification_port)

                                        evse_notification_out = mdl.get_item("evse_notification_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_notification_out:
                                            mdl.delete_item(evse_notification_out)

                                        notification_max_delay_port = mdl.get_item("notification_max_delay", parent=comp_handle, item_type=ITEM_PORT)
                                        if notification_max_delay_port:
                                            mdl.delete_item(notification_max_delay_port)

                                        notification_max_delay_out = mdl.get_item("notification_max_delay_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if notification_max_delay_out:
                                            mdl.delete_item(notification_max_delay_out)
                                        
                                        rcd_port = mdl.get_item("rcd", parent=comp_handle, item_type=ITEM_PORT)
                                        if rcd_port:
                                            mdl.delete_item(rcd_port)

                                        rcd_out = mdl.get_item("rcd_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if rcd_out:
                                            mdl.delete_item(rcd_out)


                                ENDCODE     
                            }

                            charge_parameters_dc {
                                label = "Charge parameters DC"
                                previous_names = "charge_parameters"
                                description = "EV charging parameters"
                                widget = edit
                                type = string
                                default_value = '{ "departure_time": {"value": 0, "include": True}, "maximum_current_limit": {"value": 10, "multiplier": 0}, "maximum_voltage_limit": {"value": 100, "multiplier": 0}, "maximum_power_limit": {"value": 1000, "multiplier": 0, "include": True}, "energy_capacity": {"value": 1000, "multiplier": 0, "include": False}, "energy_request": {"value": 1000, "multiplier": 0, "include": False}, "full_soc": {"value": 100, "include": True}, "bulk_soc": {"value": 80, "include": True}, "target_voltage": {"multiplier": 0}, "target_current": {"multiplier": 0}, "time_to_full_soc": {"multiplier": 0}, "time_to_bulk_soc": {"multiplier": 0}}'
                            }
                            
                            charge_parameters_ac {
                                label = "Charge parameters AC"
                                description = "EV charging parameters"
                                widget = edit
                                type = string
                                default_value = '{ "departure_time": {"value": 0, "include": True}, "eamount": {"value": 10, "multiplier": 0}, "max_voltage": {"value": 10,"multiplier": 0}, "max_current": {"value": 10,"multiplier": 0}, "min_current": {"value": 0,"multiplier": 0}}'
                            }

                            pre_charge_voltage_accuracy {
                                label = "Pre-charge voltage accuracy"
                                description = "Maximum voltage deviation between Battery voltage and present DC voltage to stop the Pre-charge process"
                                widget = edit
                                type = int
                                unit = "%"
                                default_value = 5
                                min_value = 0
                                max_value = 90
                            }

                            include_bulk_charge_complete {
                                label = "Include Bulk Charge Complete"
                                description = "Include Bulk Charge Complete data in Current Demand request messages"
                                widget = checkbox
                                type = bool
                                default_value = False

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_PORT, ITEM_COMPONENT
                                    from typhoon.api.schematic_editor.exception import SchApiException

                                    comp_handle = mdl.get_sub_level_handle(container_handle)

                                    en_mode = mdl.get_property_value(mdl.prop(container_handle, "energy_transfer_mode"))

                                    if en_mode.startswith("AC"):
                                        AC = "True"
                                        DC = "False"
                                    else:
                                        DC = "True"
                                        AC = "False"
                                    
                                    if DC and new_value:
                                        try:
                                            bulk_charge_complete_port = mdl.create_port(
                                                name="bulk_charge_complete",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVBulkChargeComplete",
                                                direction="in",
                                                terminal_position=("left", 9),
                                                position=(8000, 8800)
                                            )

                                            bulk_charge_complete_data_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="bulk_charge_complete_data_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8800)
                                            )

                                            mdl.set_property_value(mdl.prop(bulk_charge_complete_data_conversion, "output_type"), "int")

                                            bulk_charge_complete_limit = mdl.create_component(
                                                "core/Limit",
                                                name="bulk_charge_complete_limit",
                                                parent=comp_handle,
                                                position=(8400, 8800)
                                            )

                                            bulk_charge_complete_in = mdl.create_component(
                                                "core/SP output",
                                                name="bulk_charge_complete_in",
                                                parent=comp_handle,
                                                position=(8600, 8800)
                                            )

                                            mdl.create_connection(bulk_charge_complete_port, mdl.term(bulk_charge_complete_data_conversion, "in"))
                                            mdl.create_connection(mdl.term(bulk_charge_complete_data_conversion, "out"), mdl.term(bulk_charge_complete_limit, "in"))
                                            mdl.create_connection(mdl.term(bulk_charge_complete_limit, "out"), mdl.term(bulk_charge_complete_in, "in"))
                                        except SchApiException:
                                            pass
                                    else:
                                        bulk_charge_complete_port = mdl.get_item("bulk_charge_complete", parent=comp_handle, item_type=ITEM_PORT)
                                        if bulk_charge_complete_port:
                                            mdl.delete_item(bulk_charge_complete_port)

                                        bulk_charge_complete_data_conversion = mdl.get_item("bulk_charge_complete_data_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if bulk_charge_complete_data_conversion:
                                            mdl.delete_item(bulk_charge_complete_data_conversion)

                                        bulk_charge_complete_limit = mdl.get_item("bulk_charge_complete_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if bulk_charge_complete_limit:
                                            mdl.delete_item(bulk_charge_complete_limit)

                                        bulk_charge_complete_in = mdl.get_item("bulk_charge_complete_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if bulk_charge_complete_in:
                                            mdl.delete_item(bulk_charge_complete_in)
                                        
                                        # if mdl.get_property_value(mdl.prop(container_handle, "include_bulk_charge_complete")) == "True":
                                        #     mdl.set_property_value(mdl.prop(container_handle, "include_bulk_charge_complete"), "False")

                                ENDCODE
                            }

                            include_time_to_full_soc {
                                label = "Include Time to Full SoC"
                                description = "Include Remaining Time to Full SoC data in Current Demand request messages"
                                widget = checkbox
                                type = bool
                                default_value = False

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_PORT, ITEM_COMPONENT
                                    from typhoon.api.schematic_editor.exception import SchApiException

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    en_mode = mdl.get_property_value(mdl.prop(container_handle, "energy_transfer_mode"))

                                    if en_mode.startswith("AC"):
                                        AC = "True"
                                        DC = "False"
                                    else:
                                        DC = "True"
                                        AC = "False"

                                    if DC and new_value:
                                        try:
                                            time_to_full_soc_port = mdl.create_port(
                                                name="time_to_full_soc",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVTimeToFullSoC",
                                                direction="in",
                                                terminal_position=("left", 10),
                                                position=(8000, 8900)
                                            )

                                            time_to_full_soc_data_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="time_to_full_soc_data_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8900)
                                            )

                                            mdl.set_property_value(mdl.prop(time_to_full_soc_data_conversion, "output_type"), "int")

                                            time_to_full_soc_limit = mdl.create_component(
                                                "core/Limit",
                                                name="time_to_full_soc_limit",
                                                parent=comp_handle,
                                                position=(8400, 8900)
                                            )

                                            time_to_full_soc_in = mdl.create_component(
                                                "core/SP output",
                                                name="time_to_full_soc_in",
                                                parent=comp_handle,
                                                position=(8600, 8900)
                                            )

                                            mdl.create_connection(time_to_full_soc_port, mdl.term(time_to_full_soc_data_conversion, "in"))
                                            mdl.create_connection(mdl.term(time_to_full_soc_data_conversion, "out"), mdl.term(time_to_full_soc_limit, "in"))
                                            mdl.create_connection(mdl.term(time_to_full_soc_limit, "out"), mdl.term(time_to_full_soc_in, "in"))
                                        except SchApiException:
                                            pass
                                    else:
                                        time_to_full_soc_port = mdl.get_item("time_to_full_soc", parent=comp_handle, item_type=ITEM_PORT)
                                        if time_to_full_soc_port:
                                            mdl.delete_item(time_to_full_soc_port)

                                        time_to_full_soc_data_conversion = mdl.get_item("time_to_full_soc_data_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_full_soc_data_conversion:
                                            mdl.delete_item(time_to_full_soc_data_conversion)

                                        time_to_full_soc_limit = mdl.get_item("time_to_full_soc_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_full_soc_limit:
                                            mdl.delete_item(time_to_full_soc_limit)

                                        time_to_full_soc_in = mdl.get_item("time_to_full_soc_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_full_soc_in:
                                            mdl.delete_item(time_to_full_soc_in)

                                        # if mdl.get_property_value(mdl.prop(container_handle, "include_time_to_full_soc")) == "True":
                                        #     mdl.set_property_value(mdl.prop(container_handle, "include_time_to_full_soc"), "False")
                                ENDCODE
                            }

                            include_time_to_bulk_soc {
                                label = "Include Time to Bulk SoC"
                                description = "Include Remaining Time to Bulk SoC data in Current Demand request messages"
                                widget = checkbox
                                type = bool
                                default_value = False

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_PORT, ITEM_COMPONENT
                                    from typhoon.api.schematic_editor.exception import SchApiException

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    en_mode = mdl.get_property_value(mdl.prop(container_handle, "energy_transfer_mode"))

                                    if en_mode.startswith("AC"):
                                        AC = "True"
                                        DC = "False"
                                    else:
                                        DC = "True"
                                        AC = "False"
                                    if DC and new_value:
                                        try:
                                            time_to_bulk_soc_port = mdl.create_port(
                                                name="time_to_bulk_soc",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVTimeToBulkSoC",
                                                direction="in",
                                                terminal_position=("left", 11),
                                                position=(8000, 9000)
                                            )

                                            time_to_bulk_soc_data_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="time_to_bulk_soc_data_conversion",
                                                parent=comp_handle,
                                                position=(8200, 9000)
                                            )

                                            mdl.set_property_value(mdl.prop(time_to_bulk_soc_data_conversion, "output_type"), "int")

                                            time_to_bulk_soc_limit = mdl.create_component(
                                                "core/Limit",
                                                name="time_to_bulk_soc_limit",
                                                parent=comp_handle,
                                                position=(8400, 9000)
                                            )

                                            time_to_bulk_soc_in = mdl.create_component(
                                                "core/SP output",
                                                name="time_to_bulk_soc_in",
                                                parent=comp_handle,
                                                position=(8600, 9000)
                                            )

                                            mdl.create_connection(time_to_bulk_soc_port, mdl.term(time_to_bulk_soc_data_conversion, "in"))
                                            mdl.create_connection(mdl.term(time_to_bulk_soc_data_conversion, "out"), mdl.term(time_to_bulk_soc_limit, "in"))
                                            mdl.create_connection(mdl.term(time_to_bulk_soc_limit, "out"), mdl.term(time_to_bulk_soc_in, "in"))
                                        except SchApiException:
                                            pass
                                    else:
                                        time_to_bulk_soc_port = mdl.get_item("time_to_bulk_soc", parent=comp_handle, item_type=ITEM_PORT)
                                        if time_to_bulk_soc_port:
                                            mdl.delete_item(time_to_bulk_soc_port)

                                        time_to_bulk_soc_data_conversion = mdl.get_item("time_to_bulk_soc_data_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_bulk_soc_data_conversion:
                                            mdl.delete_item(time_to_bulk_soc_data_conversion)

                                        time_to_bulk_soc_limit = mdl.get_item("time_to_bulk_soc_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_bulk_soc_limit:
                                            mdl.delete_item(time_to_bulk_soc_limit)

                                        time_to_bulk_soc_in = mdl.get_item("time_to_bulk_soc_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if time_to_bulk_soc_in:
                                            mdl.delete_item(time_to_bulk_soc_in)

                                        # if mdl.get_property_value(mdl.prop(container_handle, "include_time_to_bulk_soc")) == "True":
                                        #     mdl.set_property_value(mdl.prop(container_handle, "include_time_to_bulk_soc"), "False")
                                ENDCODE
                            }

                            include_welding_detection_request {
                                label = "Include Welding Detection request"
                                description = "Include welding detection request in the charging protocol"
                                widget = checkbox
                                type = bool
                                default_value = True
                            }

                            timeout_values {
                                label = "Timeout values"
                                widget = edit
                                type = string
                                default_value = '{
                                    "sdp_response_timeout": 250,
                                    "supported_app_protocol": 2000,
                                    "session_setup": 2000,
                                    "service_discovery": 2000,
                                    "service_detail": 5000,
                                    "payment_service_selection": 2000,
                                    "payment_details": 5000,
                                    "authorization": 2000,
                                    "charge_parameter_discovery": 2000,
                                    "charging_status": 2000,
                                    "metering_receipt": 2000,
                                    "power_delivery": 5000,
                                    "cable_check": 2000,
                                    "pre_charge": 2000,
                                    "current_demand": 250,
                                    "welding_detection": 2000,
                                    "session_stop": 2000,
                                    "certificate_instalation": 5000,
                                    "certificate_update": 5000,
                                }'
                                nonvisible
                            }

                            log_level {
                                label = "Log level"
                                widget = combo
                                type = string
                                combo_values = "Off", "Debug", "Info", "Warning", "Error"
                                default_value = "Off"
                                nonvisible

                                CODE property_value_changed

                                    # Backward compatibility
                                    if new_value == "0":
                                        mdl.set_property_value(prop_handle, "Off")
                                    elif new_value == "1":
                                        mdl.set_property_value(prop_handle, "Info")
                                    elif new_value == "2":
                                        mdl.set_property_value(prop_handle, "Debug")

                                ENDCODE
                            }

                            log_output {
                                label = "Log output"
                                widget = edit
                                type = string
                                default_value = "Console"
                                nonvisible
                                no_evaluate
                            }

                            execution_rate {
                                label = "Execution rate"
                                previous_names = "timer_interval"
                                description = "Signal processing execution rate"
                                widget = edit
                                type = real
                                default_value = 100e-6
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }

                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.iso15118_evcc_dialog import ISO15118EVCCDialog

                            dialog = ISO15118EVCCDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                            dialog.exec_()
                        ENDCODE

                        CODE pre_compile
                            from typhoon.import_path.handlers.iso15118_evcc import component_pre_compile

                            component_pre_compile(mdl, item_handle)
                        ENDCODE

                        CODE post_resolve
                            from typhoon.import_path.handlers.iso15118_evcc import component_post_resolve

                            component_post_resolve(mdl, item_handle)
                        ENDCODE
                    }
                    [
                        size = 320, 342
                    ]

                    component Subsystem "ISO 15118 SECC" {

                        layout = dynamic
                        require = "sw_iso15118"

                        //Inputs                      
                        component "core/Data Type Conversion" "evse_notification_conversion" {
                            output_type = "int"
                        }
                        [ position = 8200, 8100]
            
                        component "core/Limit" "evse_notification_limit" {
                            upper_limit = 2
                            lower_limit = 0
                        }
                        [ position = 8400, 8100]
            
                        component "core/SP output" "evse_notification_in" {
                            dimension = "1"
                        }
                        [ position = 8600, 8100 ]

                        component "core/Data Type Conversion" "pp_conversion" {
                            output_type = "int"
                        }
                        [ position = 8200, 7900]

                        component "core/Limit" "pp_limit" {
                            upper_limit = 2
                            lower_limit = -1
                        }
                        [ position = 8400, 7900]

                        component "core/SP output" "pp_in" {
                            dimension = "1"
                        }
                        [ position = 8600, 7900 ]

                        // CP
                        component "core/Data Type Conversion" "cp_conversion" {
                            output_type = "int"
                        }
                        [ position = 8200, 8000]

                        component "core/Limit" "cp_limit" {
                            upper_limit = 3
                            lower_limit = -1
                        }
                        [ position = 8400, 8000]

                        component "core/SP output" "cp_in" {
                            dimension = "1"
                        }
                        [ position = 8600, 8000 ]

                        port PP {
                            position = left:1
                            direction = out
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 8000, 7900 ]

                        port CP {
                            position = left:2
                            direction = out
                            kind = sp
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 8000, 8000 ]

                        port evse_notification {
                            position = left:3
                            direction = out
                            kind = sp
                            label = "EVSENotification"
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 8000, 8100 ]

                        connect evse_notification "evse_notification_conversion.in"
                        connect "evse_notification_conversion.out" "evse_notification_limit.in"
                        connect "evse_notification_limit.out" "evse_notification_in.in"

                        connect PP "pp_conversion.in"
                        connect "pp_conversion.out" "pp_limit.in"
                        connect "pp_limit.out" "pp_in.in"

                        connect CP "cp_conversion.in"
                        connect "cp_conversion.out" "cp_limit.in"
                        connect "cp_limit.out" "cp_in.in"                      

                        //Outputs

                        component "core/SP input" "session_active_out" {
                            dimension = "1"
                            execution_rate = "execution_rate"
                        }
                        [ position = 8800, 7900 ]

                        component "core/SP input" "received_message_out" {
                            dimension = "1"
                            execution_rate = "execution_rate"
                        }
                        [ position = 8800, 8000 ]

                        component "core/SP input" "requested_energy_transfer_mode_out" {
                            dimension = "1"
                            execution_rate = "execution_rate"
                        }
                        [ position = 8800, 8100 ]
                        
                        component "core/SP input" "departure_time_out" {
                            dimension = "1"
                            execution_rate = "execution_rate"
                        }
                        [ position = 8800, 8200 ]
                
                        port session_active {
                            position = top:1
                            direction = in
                            kind = sp
                            label = "SessionActive"
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 9000, 7900 ]

                        port received_message {
                            position = right:1
                            direction = in
                            kind = sp
                            label="EVReceivedMessage"
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 9000, 8000 ]

                        
                        port requested_energy_transfer_mode {
                            position = right:2
                            direction = in
                            kind = sp
                            label="RequestedEnergyTransferMode"
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 9000, 8100 ]

                        port departure_time {
                            position = right:3
                            direction = in
                            kind = sp
                            label="DepartureTime"
                            sp_type {
                                supported = int, uint, real, inherit
                                default = inherit
                                readonly = true
                            }
                        }
                        [ position = 9000, 8200]
                       
                        connect "session_active_out.out" session_active
                        connect "received_message_out.out" received_message
                        connect "requested_energy_transfer_mode_out.out" requested_energy_transfer_mode
                        connect "departure_time_out.out" departure_time

                        mask {
                            icon = "image('iso15118/SECC.svg')"
                            help_file = "iso15118_protocol.html#iso15118_protocol__section_q1d_51b_b5b"

                            description = ""

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            /*supported_protocols {
                                label = "Supported protocols"
                                description = "List of supported protocols"
                                widget = edit
                                type = string
                                default_value = '[{"schema_id": 10}]'
                                nonvisible
                            }*/

                            medium_type {
                                label = "Medium type"
                                description = "Select between Ethernet or PLC medium"
                                widget = combo
                                type = string
                                combo_values = "Ethernet", "PLC"
                                default_value = "Ethernet"

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                                    from typhoon.api.schematic_editor.exception import SchApiException

                                    comp_handle = mdl.get_sub_level_handle(container_handle)

                                    if new_value == "Ethernet":
                                        slac_state_out = mdl.get_item("slac_state_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if slac_state_out:
                                            mdl.delete_item(slac_state_out)

                                        slac_state_termination = mdl.get_item("slac_state_termination", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if slac_state_termination:
                                            mdl.delete_item(slac_state_termination)
                                    else:
                                        try:
                                            slac_state_out = mdl.create_component(
                                                "core/SP input",
                                                name="slac_state_out",
                                                parent=comp_handle,
                                                position=(8200, 7700)
                                            )

                                            mdl.set_property_value(mdl.prop(slac_state_out, "dimension"), 1)
                                            mdl.set_property_value(mdl.prop(slac_state_out, "execution_rate"), "execution_rate")

                                            slac_state_termination = mdl.create_component(
                                                "core/Termination",
                                                name="slac_state_termination",
                                                parent=comp_handle,
                                                position=(8300, 7700)
                                            )

                                            mdl.create_connection(mdl.term(slac_state_out, "out"), mdl.term(slac_state_termination, "in"))
                                        except SchApiException:
                                            pass
                                ENDCODE
                            }

                            evse_id {
                                label = "EVSE id"
                                description = " Any ID that uniquely identifies the EVSE and the power outlet the vehicle is connected to."
                                widget = edit
                                type = string
                                default_value = '{"country_code" : "FR", "operator_id" : "A23", "power_outlet_id": "45B*78C" }'
                            }

                            include_isolation_status{
                                label = "Include isolation status:"
                                description = "Include isolation status in EVSE status"
                                widget = combo
                                type = string
                                combo_values = "False", "True"
                                default_value = "False"

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_PORT, ITEM_COMPONENT
                                    from typhoon.api.schematic_editor.exception import SchApiException

                                    comp_handle = mdl.get_sub_level_handle(container_handle)

                                    modes = eval(mdl.get_property_value(mdl.prop(container_handle, "supported_energy_transfer_modes")))

                                    AC_supported = any(mode.startswith("AC") for mode in modes)
                                    DC_supported = any(mode.startswith("DC") for mode in modes)

                                        
                                    if DC_supported and new_value == "True": 
                                        try:
                                            evse_isolation_status_port = mdl.create_port(
                                                name="evse_isolation_status",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEIsolationStatus",
                                                direction="in",
                                                terminal_position=("left", 19),
                                                position=(8000, 8900)
                                            )
                                            evse_isolation_status_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="evse_isolation_status_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8900)
                                            )
                                        
                                            mdl.set_property_value(mdl.prop(evse_isolation_status_conversion, "output_type"), "int")

                                            evse_isolation_status_limit = mdl.create_component(
                                                "core/Limit",
                                                name="evse_isolation_status_limit",
                                                parent=comp_handle,
                                                position=(8400, 8900)
                                            )

                                            mdl.set_property_value(mdl.prop(evse_isolation_status_limit, "upper_limit"), 5)
                                            mdl.set_property_value(mdl.prop(evse_isolation_status_limit, "lower_limit"), 0)

                                            evse_isolation_status_in = mdl.create_component(
                                                "core/SP output",
                                                name="evse_isolation_status_in",
                                                parent=comp_handle,
                                                position=(8600, 8900)
                                            )
                                            mdl.create_connection(evse_isolation_status_port, mdl.term(evse_isolation_status_conversion, "in"))
                                            mdl.create_connection(mdl.term(evse_isolation_status_conversion, "out"), mdl.term(evse_isolation_status_limit, "in"))
                                            mdl.create_connection(mdl.term(evse_isolation_status_limit, "out"), mdl.term(evse_isolation_status_in, "in"))
                                        except SchApiException:
                                            pass
                                    else:
                                        evse_isolation_status_port = mdl.get_item("evse_isolation_status", parent=comp_handle, item_type=ITEM_PORT)
                                        if evse_isolation_status_port:
                                            mdl.delete_item(evse_isolation_status_port)

                                        evse_isolation_status_conversion = mdl.get_item("evse_isolation_status_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_isolation_status_conversion:
                                            mdl.delete_item(evse_isolation_status_conversion)

                                        evse_isolation_status_limit = mdl.get_item("evse_isolation_status_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_isolation_status_limit:
                                            mdl.delete_item(evse_isolation_status_limit)

                                        evse_isolation_status_in = mdl.get_item("evse_isolation_status_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_isolation_status_in:
                                            mdl.delete_item(evse_isolation_status_in)
                                        
                                        # if mdl.get_property_value(mdl.prop(container_handle, "include_isolation_status")) == "True":
                                        #     mdl.set_property_value(mdl.prop(container_handle, "include_isolation_status"), "False")
                                
                                ENDCODE
                            }

                            supported_energy_transfer_modes {
                                label = "Supported energy transfer modes"
                                description = "List of supported energy transfer mode"
                                widget = edit
                                type = string
                                default_value = '["AC three phase core", "AC single phase core"]'

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_PORT, ITEM_COMPONENT
                                    from typhoon.api.schematic_editor.exception import SchApiException

                                    comp_handle = mdl.get_sub_level_handle(container_handle)

                                    modes = eval(new_value)

                                    AC_supported = any(mode.startswith("AC") for mode in modes)
                                    DC_supported = any(mode.startswith("DC") for mode in modes)

                                    if AC_supported:
                                        try:
                                            rcd_port = mdl.create_port(
                                                name="rcd",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="RCD",
                                                direction="in",
                                                terminal_position=("left", 4),
                                                position=(8000, 8200)
                                            )

                                            eamount_port = mdl.create_port(
                                                name="eamount",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EAmount",
                                                direction="out",
                                                terminal_position=("right", 4),
                                                position=(9000, 8300)
                                            )

                                            ev_max_voltage_port = mdl.create_port(
                                                name="ev_max_voltage",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVMaxVoltage",
                                                direction="out",
                                                terminal_position=("right", 5),
                                                position=(9000, 8400)
                                            )
                                                
                                            ev_max_current_port = mdl.create_port(
                                                name="ev_max_current",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVMaxCurrent",
                                                direction="out",
                                                terminal_position=("right", 6),
                                                position=(9000, 8500)
                                            )
                                                
                                            ev_min_current_port = mdl.create_port(
                                                name="ev_min_current",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVMinCurrent",
                                                direction="out",
                                                terminal_position=("right", 7),
                                                position=(9000, 8600)
                                            )

                                            rcd_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="rcd_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8200)
                                            )

                                            mdl.set_property_value(mdl.prop(rcd_conversion, "output_type"), "int")

                                            rcd_limit = mdl.create_component(
                                                "core/Limit",
                                                name="rcd_limit",
                                                parent=comp_handle,
                                                position=(8400, 8200)
                                            )

                                            mdl.set_property_value(mdl.prop(rcd_limit, "upper_limit"), 1)
                                            mdl.set_property_value(mdl.prop(rcd_limit, "lower_limit"), 0)

                                            rcd_in = mdl.create_component(
                                                "core/SP output",
                                                name="rcd_in",
                                                parent=comp_handle,
                                                position=(8600, 8200)
                                            )
                                                
                                            eamount_out = mdl.create_component(
                                                "core/SP input",
                                                name="eamount_out",
                                                parent=comp_handle,
                                                position=(8800, 8300)
                                            )

                                            mdl.set_property_value(mdl.prop(eamount_out, "execution_rate"), "execution_rate")

                                            ev_max_voltage_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_max_voltage_out",
                                                parent=comp_handle,
                                                position=(8800, 8400)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_max_voltage_out, "execution_rate"), "execution_rate")

                                            ev_max_current_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_max_current_out",
                                                parent=comp_handle,
                                                position=(8800, 8500)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_max_current_out, "execution_rate"), "execution_rate")

                                            ev_min_current_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_min_current_out",
                                                parent=comp_handle,
                                                position=(8800, 8600)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_min_current_out, "execution_rate"), "execution_rate")

                                            mdl.create_connection(rcd_port, mdl.term(rcd_conversion, "in"))
                                            mdl.create_connection(mdl.term(rcd_conversion, "out"), mdl.term(rcd_limit, "in"))
                                            mdl.create_connection(mdl.term(rcd_limit, "out"), mdl.term(rcd_in, "in"))

                                            mdl.create_connection(mdl.term(eamount_out, "out"),eamount_port)
                                            mdl.create_connection(mdl.term(ev_max_voltage_out, "out"),ev_max_voltage_port)
                                            mdl.create_connection(mdl.term(ev_max_current_out, "out"),ev_max_current_port)
                                            mdl.create_connection(mdl.term(ev_min_current_out, "out"),ev_min_current_port)
                                        except SchApiException:
                                            pass
                                    else:
                                        rcd_port = mdl.get_item("rcd", parent=comp_handle, item_type=ITEM_PORT)
                                        if rcd_port:
                                            mdl.delete_item(rcd_port)

                                        rcd_conversion = mdl.get_item("rcd_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if rcd_conversion:
                                            mdl.delete_item(rcd_conversion)

                                        rcd_limit = mdl.get_item("rcd_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if rcd_limit:
                                            mdl.delete_item(rcd_limit)

                                        rcd_in = mdl.get_item("rcd_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if rcd_in:
                                            mdl.delete_item(rcd_in)

                                        eamount_port = mdl.get_item("eamount", parent=comp_handle, item_type=ITEM_PORT)
                                        if eamount_port:
                                            mdl.delete_item(eamount_port)

                                        eamount_out = mdl.get_item("eamount_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if eamount_out:
                                            mdl.delete_item(eamount_out)

                                        ev_max_voltage_port = mdl.get_item("ev_max_voltage", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_max_voltage_port:
                                            mdl.delete_item(ev_max_voltage_port)

                                        ev_max_voltage_out = mdl.get_item("ev_max_voltage_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_max_voltage_out:
                                            mdl.delete_item(ev_max_voltage_out)
                                        
                                        ev_max_current_port = mdl.get_item("ev_max_current", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_max_current_port:
                                            mdl.delete_item(ev_max_current_port)

                                        ev_max_current_out = mdl.get_item("ev_max_current_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_max_current_out:
                                            mdl.delete_item(ev_max_current_out)

                                        ev_min_current_port = mdl.get_item("ev_min_current", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_min_current_port:
                                            mdl.delete_item(ev_min_current_port)

                                        ev_min_current_out = mdl.get_item("ev_min_current_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_min_current_out:
                                            mdl.delete_item(ev_min_current_out)
                                        

                                    if DC_supported:
                                        try: 
                                            ########################################## 
                                            if  mdl.get_property_value(mdl.prop(container_handle, "include_isolation_status")) == "True":
                                                try:
                                                    evse_isolation_status_port = mdl.create_port(
                                                        name="evse_isolation_status",
                                                        parent=comp_handle,
                                                        kind="sp",
                                                        label="EVSEIsolationStatus",
                                                        direction="in",
                                                        terminal_position=("left", 19),
                                                        position=(8000, 10000)
                                                    )
                                                    evse_isolation_status_conversion = mdl.create_component(
                                                        "core/Data Type Conversion",
                                                        name="evse_isolation_status_conversion",
                                                        parent=comp_handle,
                                                        position=(8200, 10000)
                                                    )
                                                
                                                    mdl.set_property_value(mdl.prop(evse_isolation_status_conversion, "output_type"), "int")

                                                    evse_isolation_status_limit = mdl.create_component(
                                                        "core/Limit",
                                                        name="evse_isolation_status_limit",
                                                        parent=comp_handle,
                                                        position=(8400, 10000)
                                                    )

                                                    mdl.set_property_value(mdl.prop(evse_isolation_status_limit, "upper_limit"), 5)
                                                    mdl.set_property_value(mdl.prop(evse_isolation_status_limit, "lower_limit"), 0)

                                                    evse_isolation_status_in = mdl.create_component(
                                                        "core/SP output",
                                                        name="evse_isolation_status_in",
                                                        parent=comp_handle,
                                                        position=(8600, 10000)
                                                    )
                                                    mdl.create_connection(evse_isolation_status_port, mdl.term(evse_isolation_status_conversion, "in"))
                                                    mdl.create_connection(mdl.term(evse_isolation_status_conversion, "out"), mdl.term(evse_isolation_status_limit, "in"))
                                                    mdl.create_connection(mdl.term(evse_isolation_status_limit, "out"), mdl.term(evse_isolation_status_in, "in"))
                                                except SchApiException:
                                                    pass
                                            else:
                                                evse_isolation_status_port = mdl.get_item("evse_isolation_status", parent=comp_handle, item_type=ITEM_PORT)
                                                if evse_isolation_status_port:
                                                    mdl.delete_item(evse_isolation_status_port)

                                                evse_isolation_status_conversion = mdl.get_item("evse_isolation_status_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                                if evse_isolation_status_conversion:
                                                    mdl.delete_item(evse_isolation_status_conversion)

                                                evse_isolation_status_limit = mdl.get_item("evse_isolation_status_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                                if evse_isolation_status_limit:
                                                    mdl.delete_item(evse_isolation_status_limit)

                                                evse_isolation_status_in = mdl.get_item("evse_isolation_status_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                                if evse_isolation_status_in:
                                                    mdl.delete_item(evse_isolation_status_in)
                                                    
                                            evse_status_code_port = mdl.create_port(
                                                name="evse_status_code",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEStatusCode",
                                                direction="in",
                                                terminal_position=("left", 5),
                                                position=(8000, 8300)
                                            )

                                            present_current_port = mdl.create_port(
                                                name="present_current",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEPresentCurrent",
                                                direction="in",
                                                terminal_position=("left", 7),
                                                position=(8000, 8400)
                                            )

                                            present_voltage_port = mdl.create_port(
                                                name="present_voltage",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEPresentVoltage",
                                                direction="in",
                                                terminal_position=("left", 6),
                                                position=(8000, 8500)
                                            )
                                            
                                            current_limit_achieved_port = mdl.create_port(
                                                name="current_limit_achieved",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSECurrentLimitAchieved",
                                                direction="in",
                                                terminal_position=("left", 8),
                                                position=(8000, 8600)
                                            )
                                            
                                            voltage_limit_achieved_port = mdl.create_port(
                                                name="voltage_limit_achieved",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEVoltageLimitAchieved",
                                                direction="in",
                                                terminal_position=("left", 9),
                                                position=(8000, 8700)
                                            )
                                            
                                            power_limit_achieved_port = mdl.create_port(
                                                name="power_limit_achieved",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVSEPowerLimitAchieved",
                                                direction="in",
                                                terminal_position=("left", 10),
                                                position=(8000, 8800)
                                            )
                                            
                                            ev_target_current_port = mdl.create_port(
                                                name="ev_target_current",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVTargetCurrent",
                                                direction="out",
                                                terminal_position=("right", 8),
                                                position=(9000, 8800)
                                            )
                                            
                                            ev_target_voltage_port = mdl.create_port(
                                                name="ev_target_voltage",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVTargetVoltage",
                                                direction="out",
                                                terminal_position=("right", 9),
                                                position=(9000, 8900)
                                            )

                                            ev_maximum_voltage_limit_port = mdl.create_port(
                                                name="ev_maximum_voltage_limit",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVMaximumVoltageLimit",
                                                direction="out",
                                                terminal_position=("right", 10),
                                                position=(9000, 9000)
                                            )

                                            ev_maximum_current_limit_port = mdl.create_port(
                                                name="ev_maximum_current_limit",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVMaximumCurrentLimit",
                                                direction="out",
                                                terminal_position=("right", 11),
                                                position=(9000, 9100)
                                            )

                                            ev_maximum_power_limit_port = mdl.create_port(
                                                name="ev_maximum_power_limit",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVMaximumPowerLimit",
                                                direction="out",
                                                terminal_position=("right", 12),
                                                position=(9000, 9200)
                                            )

                                            bulk_charging_complete_port = mdl.create_port(
                                                name="bulk_charging_complete",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="BulkChargingComplete",
                                                direction="out",
                                                terminal_position=("right", 13),
                                                position=(9000, 9300)
                                            )

                                            charging_complete_port = mdl.create_port(
                                                name="charging_complete",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="ChargingComplete",
                                                direction="out",
                                                terminal_position=("right", 14),
                                                position=(9000, 9400)
                                            )

                                            remaining_time_to_full_soc_port = mdl.create_port(
                                                name="remaining_time_to_full_soc",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="RemainingTimeToFullSoC",
                                                direction="out",
                                                terminal_position=("right", 15),
                                                position=(9000, 9500)
                                            )

                                            remaining_time_to_bulk_soc_port = mdl.create_port(
                                                name="remaining_time_to_bulk_soc",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="RemainingTimeToBulkSoC",
                                                direction="out",
                                                terminal_position=("right", 16),
                                                position=(9000, 9600)
                                            )

                                            ev_energy_capacity_port = mdl.create_port(
                                                name="ev_energy_capacity",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVEnergyCapacity",
                                                direction="out",
                                                terminal_position=("right", 17),
                                                position=(9000, 9700)
                                            )

                                            ev_energy_request_port = mdl.create_port(
                                                name="ev_energy_request",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVEnergyRequest",
                                                direction="out",
                                                terminal_position=("right", 18),
                                                position=(9000, 9800)
                                            )

                                            ev_full_soc_port = mdl.create_port(
                                                name="ev_full_soc_port",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVFullSoC",
                                                direction="out",
                                                terminal_position=("right", 19),
                                                position=(9000, 9900)
                                            )

                                            ev_bulk_soc_port = mdl.create_port(
                                                name="ev_bulk_soc_port",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVBulkSoc",
                                                direction="out",
                                                terminal_position=("right", 20),
                                                position=(9000, 10000)
                                            )
                                            
                                            ev_error_code_port = mdl.create_port(
                                                name="ev_error_code_port",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVErrorCode",
                                                direction="out",
                                                terminal_position=("right", 21),
                                                position=(9000, 10100)
                                            )

                                            ev_resssoc_port = mdl.create_port(
                                                name="ev_resssoc_port",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="EVRESSSOC",
                                                direction="out",
                                                terminal_position=("right", 22),
                                                position=(9000, 10200)
                                            )

                                            is_ev_ready_port = mdl.create_port(
                                                name="is_ev_ready_port",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="IsEVReady",
                                                direction="out",
                                                terminal_position=("right", 23),
                                                position=(9000, 8700)
                                            )

                                            evse_status_code_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="evse_status_code_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8300)
                                            )
                                            
                                            mdl.set_property_value(mdl.prop(evse_status_code_conversion, "output_type"), "int")

                                            evse_status_code_limit = mdl.create_component(
                                                "core/Limit",
                                                name="evse_status_code_limit",
                                                parent=comp_handle,
                                                position=(8400, 8300)
                                            )

                                            mdl.set_property_value(mdl.prop(evse_status_code_limit, "upper_limit"), 12)
                                            mdl.set_property_value(mdl.prop(evse_status_code_limit, "lower_limit"), 0)

                                            evse_status_code_in = mdl.create_component(
                                                "core/SP output",
                                                name="evse_status_code_in",
                                                parent=comp_handle,
                                                position=(8600, 8300)
                                            )
                                            
                                            present_current_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="present_current_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8400)
                                            )

                                            mdl.set_property_value(mdl.prop(present_current_conversion, "output_type"), "int")

                                            present_current_limit = mdl.create_component(
                                                "core/Limit",
                                                name="present_current_limit",
                                                parent=comp_handle,
                                                position=(8400, 8400)
                                            )
                                            
                                            present_current_in = mdl.create_component(
                                                "core/SP output",
                                                name="present_current_in",
                                                parent=comp_handle,
                                                position=(8600, 8400)
                                            )

                                            present_voltage_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="present_voltage_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8500)
                                            )

                                            mdl.set_property_value(mdl.prop(present_voltage_conversion, "output_type"), "int")

                                            present_voltage_limit = mdl.create_component(
                                                "core/Limit",
                                                name="present_voltage_limit",
                                                parent=comp_handle,
                                                position=(8400, 8500)
                                            )
                                            present_voltage_in = mdl.create_component(
                                                "core/SP output",
                                                name="present_voltage_in",
                                                parent=comp_handle,
                                                position=(8600, 8500)
                                            )

                                            current_limit_achieved_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="current_limit_achieved_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8600)
                                            )

                                            mdl.set_property_value(mdl.prop(current_limit_achieved_conversion, "output_type"), "int")

                                            current_limit_achieved_limit = mdl.create_component(
                                                "core/Limit",
                                                name="current_limit_achieved_limit",
                                                parent=comp_handle,
                                                position=(8400, 8600)
                                            )

                                            mdl.set_property_value(mdl.prop(current_limit_achieved_limit, "upper_limit"), 1)
                                            mdl.set_property_value(mdl.prop(current_limit_achieved_limit, "lower_limit"), 0)

                                            current_limit_achieved_in = mdl.create_component(
                                                "core/SP output",
                                                name="current_limit_achieved_in",
                                                parent=comp_handle,
                                                position=(8600, 8600)
                                            )

                                            voltage_limit_achieved_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="voltage_limit_achieved_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8700)
                                            )

                                            mdl.set_property_value(mdl.prop(voltage_limit_achieved_conversion, "output_type"), "int")
                                            
                                            voltage_limit_achieved_limit = mdl.create_component(
                                                "core/Limit",
                                                name="voltage_limit_achieved_limit",
                                                parent=comp_handle,
                                                position=(8400, 8700)
                                            )

                                            mdl.set_property_value(mdl.prop(voltage_limit_achieved_limit, "upper_limit"), 1)
                                            mdl.set_property_value(mdl.prop(voltage_limit_achieved_limit, "lower_limit"), 0)

                                            voltage_limit_achieved_in = mdl.create_component(
                                                "core/SP output",
                                                name="voltage_limit_achieved_in",
                                                parent=comp_handle,
                                                position=(8600, 8700)
                                            )

                                            power_limit_achieved_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="power_limit_achieved_conversion",
                                                parent=comp_handle,
                                                position=(8200, 8800)
                                            )

                                            mdl.set_property_value(mdl.prop(voltage_limit_achieved_conversion, "output_type"), "int")
                                            
                                            power_limit_achieved_limit = mdl.create_component(
                                                "core/Limit",
                                                name="power_limit_achieved_limit",
                                                parent=comp_handle,
                                                position=(8400, 8800)
                                            )

                                            mdl.set_property_value(mdl.prop(power_limit_achieved_limit, "upper_limit"), 1)
                                            mdl.set_property_value(mdl.prop(power_limit_achieved_limit, "lower_limit"), 0)

                                            power_limit_achieved_in = mdl.create_component(
                                                "core/SP output",
                                                name="power_limit_achieved_in",
                                                parent=comp_handle,
                                                position=(8600, 8800)
                                            )
                                            
                                            ev_target_current_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_target_current_out",
                                                parent=comp_handle,
                                                position=(8800, 8800)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_target_current_out, "execution_rate"), "execution_rate")

                                            ev_target_voltage_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_target_voltage_out",
                                                parent=comp_handle,
                                                position=(8800, 8900)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_target_voltage_out, "execution_rate"), "execution_rate")

                                            ev_maximum_voltage_limit_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_maximum_voltage_limit_out",
                                                parent=comp_handle,
                                                position=(8800, 9000)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_maximum_voltage_limit_out, "execution_rate"), "execution_rate")

                                            ev_maximum_current_limit_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_maximum_current_limit_out",
                                                parent=comp_handle,
                                                position=(8800, 9100)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_maximum_current_limit_out, "execution_rate"), "execution_rate")

                                            ev_maximum_power_limit_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_maximum_power_limit_out",
                                                parent=comp_handle,
                                                position=(8800, 9200)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_maximum_power_limit_out, "execution_rate"), "execution_rate")

                                            bulk_charging_complete_out = mdl.create_component(
                                                "core/SP input",
                                                name="bulk_charging_complete_out",
                                                parent=comp_handle,
                                                position=(8800, 9300)
                                            )

                                            mdl.set_property_value(mdl.prop(bulk_charging_complete_out, "execution_rate"), "execution_rate")

                                            charging_complete_out = mdl.create_component(
                                                "core/SP input",
                                                name="charging_complete_out",
                                                parent=comp_handle,
                                                position=(8800, 9400)
                                            )

                                            mdl.set_property_value(mdl.prop(charging_complete_out, "execution_rate"), "execution_rate")

                                            remaining_time_to_full_soc_out = mdl.create_component(
                                                "core/SP input",
                                                name="remaining_time_to_full_soc_out",
                                                parent=comp_handle,
                                                position=(8800, 9500)
                                            )

                                            mdl.set_property_value(mdl.prop(remaining_time_to_full_soc_out, "execution_rate"), "execution_rate")

                                            remaining_time_to_bulk_soc_out = mdl.create_component(
                                                "core/SP input",
                                                name="remaining_time_to_bulk_soc_out",
                                                parent=comp_handle,
                                                position=(8800, 9600)
                                            )

                                            mdl.set_property_value(mdl.prop(remaining_time_to_bulk_soc_out, "execution_rate"), "execution_rate")

                                            ev_energy_capacity_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_energy_capacity_out",
                                                parent=comp_handle,
                                                position=(8800, 9700)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_energy_capacity_out, "execution_rate"), "execution_rate")

                                            ev_energy_request_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_energy_request_out",
                                                parent=comp_handle,
                                                position=(8800, 9800)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_energy_request_out, "execution_rate"), "execution_rate")

                                            ev_full_soc_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_full_soc_out",
                                                parent=comp_handle,
                                                position=(8800, 9900)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_full_soc_out, "execution_rate"), "execution_rate")

                                            ev_bulk_soc_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_bulk_soc_out",
                                                parent=comp_handle,
                                                position=(8800, 10000)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_bulk_soc_out, "execution_rate"), "execution_rate")
                                            
                                            ev_error_code_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_error_code_out",
                                                parent=comp_handle,
                                                position=(8800, 10100)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_error_code_out, "execution_rate"), "execution_rate")

                                            ev_resssoc_out = mdl.create_component(
                                                "core/SP input",
                                                name="ev_resssoc_out",
                                                parent=comp_handle,
                                                position=(8800, 10200)
                                            )

                                            mdl.set_property_value(mdl.prop(ev_resssoc_out, "execution_rate"), "execution_rate")

                                            is_ev_ready_out = mdl.create_component(
                                                "core/SP input",
                                                name="is_ev_ready_out",
                                                parent=comp_handle,
                                                position=(8800, 8700)
                                            )

                                            mdl.set_property_value(mdl.prop(is_ev_ready_out, "execution_rate"), "execution_rate")
                                            
                                            mdl.create_connection(evse_status_code_port, mdl.term(evse_status_code_conversion, "in"))
                                            mdl.create_connection(mdl.term(evse_status_code_conversion, "out"), mdl.term(evse_status_code_limit, "in"))
                                            mdl.create_connection(mdl.term(evse_status_code_limit, "out"), mdl.term(evse_status_code_in, "in"))
                                            
                                            mdl.create_connection(present_current_port, mdl.term(present_current_conversion, "in"))
                                            mdl.create_connection(mdl.term(present_current_conversion, "out"), mdl.term(present_current_limit, "in"))
                                            mdl.create_connection(mdl.term(present_current_limit, "out"), mdl.term(present_current_in, "in"))
                                            
                                            mdl.create_connection(present_voltage_port, mdl.term(present_voltage_conversion, "in"))
                                            mdl.create_connection(mdl.term(present_voltage_conversion, "out"), mdl.term(present_voltage_limit, "in"))
                                            mdl.create_connection(mdl.term(present_voltage_limit, "out"), mdl.term(present_voltage_in, "in"))
                                            
                                            mdl.create_connection(current_limit_achieved_port, mdl.term(current_limit_achieved_conversion, "in"))
                                            mdl.create_connection(mdl.term(current_limit_achieved_conversion, "out"), mdl.term(current_limit_achieved_limit, "in"))
                                            mdl.create_connection(mdl.term(current_limit_achieved_limit, "out"), mdl.term(current_limit_achieved_in, "in"))

                                            mdl.create_connection(voltage_limit_achieved_port, mdl.term(voltage_limit_achieved_conversion, "in"))
                                            mdl.create_connection(mdl.term(voltage_limit_achieved_conversion, "out"), mdl.term(voltage_limit_achieved_limit, "in"))
                                            mdl.create_connection(mdl.term(voltage_limit_achieved_limit, "out"), mdl.term(voltage_limit_achieved_in, "in"))

                                            mdl.create_connection(power_limit_achieved_port, mdl.term(power_limit_achieved_conversion, "in"))
                                            mdl.create_connection(mdl.term(power_limit_achieved_conversion, "out"), mdl.term(power_limit_achieved_limit, "in"))
                                            mdl.create_connection(mdl.term(power_limit_achieved_limit, "out"), mdl.term(power_limit_achieved_in, "in"))
                                            
                                        
                                            mdl.create_connection(mdl.term(ev_target_current_out, "out"), ev_target_current_port)
                                            mdl.create_connection(mdl.term(ev_target_voltage_out, "out"), ev_target_voltage_port)
                                            mdl.create_connection(mdl.term(ev_maximum_voltage_limit_out, "out"), ev_maximum_voltage_limit_port)
                                            mdl.create_connection(mdl.term(ev_maximum_current_limit_out, "out"), ev_maximum_current_limit_port)
                                            mdl.create_connection(mdl.term(ev_maximum_power_limit_out, "out"), ev_maximum_power_limit_port)
                                            mdl.create_connection(mdl.term(bulk_charging_complete_out, "out"), bulk_charging_complete_port)
                                            mdl.create_connection(mdl.term(charging_complete_out, "out"), charging_complete_port)
                                            mdl.create_connection(mdl.term(remaining_time_to_full_soc_out, "out"), remaining_time_to_full_soc_port)
                                            mdl.create_connection(mdl.term(remaining_time_to_bulk_soc_out, "out"), remaining_time_to_bulk_soc_port)
                                            mdl.create_connection(mdl.term(ev_energy_capacity_out, "out"), ev_energy_capacity_port)
                                            mdl.create_connection(mdl.term(ev_energy_request_out, "out"), ev_energy_request_port)
                                            mdl.create_connection(mdl.term(ev_full_soc_out, "out"), ev_full_soc_port)
                                            mdl.create_connection(mdl.term(ev_bulk_soc_out, "out"), ev_bulk_soc_port)
                                            mdl.create_connection(mdl.term(is_ev_ready_out, "out"), is_ev_ready_port)
                                            mdl.create_connection(mdl.term(ev_resssoc_out, "out"), ev_resssoc_port)
                                            mdl.create_connection(mdl.term(ev_error_code_out, "out"), ev_error_code_port)

                                        except SchApiException:
                                            pass

                                    else:
                                        ev_error_code_port = mdl.get_item("ev_error_code_port", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_error_code_port:
                                            mdl.delete_item(ev_error_code_port)
                                        ev_error_code_out = mdl.get_item("ev_error_code_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_error_code_out:
                                            mdl.delete_item(ev_error_code_out)
                                        
                                        ev_resssoc_port = mdl.get_item("ev_resssoc_port", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_resssoc_port:
                                            mdl.delete_item(ev_resssoc_port)
                                        
                                        ev_resssoc_out = mdl.get_item("ev_resssoc_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_resssoc_out:
                                            mdl.delete_item(ev_resssoc_out)
                                        
                                        is_ev_ready_port = mdl.get_item("is_ev_ready_port", parent=comp_handle, item_type=ITEM_PORT)
                                        if is_ev_ready_port:
                                            mdl.delete_item(is_ev_ready_port)
                                        
                                        is_ev_ready_out = mdl.get_item("is_ev_ready_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if is_ev_ready_out:
                                            mdl.delete_item(is_ev_ready_out)


                                        evse_status_code_port = mdl.get_item("evse_status_code", parent=comp_handle, item_type=ITEM_PORT)
                                        if evse_status_code_port:
                                            mdl.delete_item(evse_status_code_port)

                                        evse_status_code_conversion = mdl.get_item("evse_status_code_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_status_code_conversion:
                                            mdl.delete_item(evse_status_code_conversion)

                                        evse_status_code_limit = mdl.get_item("evse_status_code_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_status_code_limit:
                                            mdl.delete_item(evse_status_code_limit)

                                        evse_status_code_in = mdl.get_item("evse_status_code_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_status_code_in:
                                            mdl.delete_item(evse_status_code_in)
                                        
                                        present_current_port = mdl.get_item("present_current", parent=comp_handle, item_type=ITEM_PORT)
                                        if present_current_port:
                                            mdl.delete_item(present_current_port)

                                        present_current_conversion = mdl.get_item("present_current_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if present_current_conversion:
                                            mdl.delete_item(present_current_conversion)

                                        present_current_limit = mdl.get_item("present_current_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if present_current_limit:
                                            mdl.delete_item(present_current_limit)

                                        present_current_in = mdl.get_item("present_current_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if present_current_in:
                                            mdl.delete_item(present_current_in)

                                        present_voltage_port = mdl.get_item("present_voltage", parent=comp_handle, item_type=ITEM_PORT)
                                        if present_voltage_port:
                                            mdl.delete_item(present_voltage_port)

                                        present_voltage_conversion = mdl.get_item("present_voltage_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if present_voltage_conversion:
                                            mdl.delete_item(present_voltage_conversion)

                                        present_voltage_limit = mdl.get_item("present_voltage_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if present_voltage_limit:
                                            mdl.delete_item(present_voltage_limit)

                                        present_voltage_in = mdl.get_item("present_voltage_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if present_voltage_in:
                                            mdl.delete_item(present_voltage_in)

                                        current_limit_achieved_port = mdl.get_item("current_limit_achieved", parent=comp_handle, item_type=ITEM_PORT)
                                        if current_limit_achieved_port:
                                            mdl.delete_item(current_limit_achieved_port)

                                        current_limit_achieved_conversion = mdl.get_item("current_limit_achieved_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if current_limit_achieved_conversion:
                                            mdl.delete_item(current_limit_achieved_conversion)

                                        current_limit_achieved_limit = mdl.get_item("current_limit_achieved_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if current_limit_achieved_limit:
                                            mdl.delete_item(current_limit_achieved_limit)

                                        current_limit_achieved_in = mdl.get_item("current_limit_achieved_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if current_limit_achieved_in:
                                            mdl.delete_item(current_limit_achieved_in)

                                        voltage_limit_achieved_port = mdl.get_item("voltage_limit_achieved", parent=comp_handle, item_type=ITEM_PORT)
                                        if voltage_limit_achieved_port:
                                            mdl.delete_item(voltage_limit_achieved_port)

                                        voltage_limit_achieved_conversion = mdl.get_item("voltage_limit_achieved_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if voltage_limit_achieved_conversion:
                                            mdl.delete_item(voltage_limit_achieved_conversion)

                                        voltage_limit_achieved_limit = mdl.get_item("voltage_limit_achieved_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if voltage_limit_achieved_limit:
                                            mdl.delete_item(voltage_limit_achieved_limit)

                                        voltage_limit_achieved_in = mdl.get_item("voltage_limit_achieved_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if voltage_limit_achieved_in:
                                            mdl.delete_item(voltage_limit_achieved_in)

                                        power_limit_achieved_port = mdl.get_item("power_limit_achieved", parent=comp_handle, item_type=ITEM_PORT)
                                        if power_limit_achieved_port:
                                            mdl.delete_item(power_limit_achieved_port)

                                        power_limit_achieved_conversion = mdl.get_item("power_limit_achieved_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if power_limit_achieved_conversion:
                                            mdl.delete_item(power_limit_achieved_conversion)

                                        power_limit_achieved_limit = mdl.get_item("power_limit_achieved_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if power_limit_achieved_limit:
                                            mdl.delete_item(power_limit_achieved_limit)

                                        power_limit_achieved_in = mdl.get_item("power_limit_achieved_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if power_limit_achieved_in:
                                            mdl.delete_item(power_limit_achieved_in)   


                                        ev_target_current_port = mdl.get_item("ev_target_current", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_target_current_port:
                                            mdl.delete_item(ev_target_current_port)

                                        ev_target_current_out = mdl.get_item("ev_target_current_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_target_current_out:
                                            mdl.delete_item(ev_target_current_out)
                                        
                                        ev_target_voltage_port = mdl.get_item("ev_target_voltage", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_target_voltage_port:
                                            mdl.delete_item(ev_target_voltage_port)

                                        ev_target_voltage_out = mdl.get_item("ev_target_voltage_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_target_voltage_out:
                                            mdl.delete_item(ev_target_voltage_out)

                                        ev_maximum_voltage_limit_port = mdl.get_item("ev_maximum_voltage_limit", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_maximum_voltage_limit_port:
                                            mdl.delete_item(ev_maximum_voltage_limit_port)

                                        ev_maximum_voltage_limit_out = mdl.get_item("ev_maximum_voltage_limit_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_maximum_voltage_limit_out:
                                            mdl.delete_item(ev_maximum_voltage_limit_out)
                                        
                                        ev_maximum_current_limit_port = mdl.get_item("ev_maximum_current_limit", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_maximum_current_limit_port:
                                            mdl.delete_item(ev_maximum_current_limit_port)
                                        
                                        ev_maximum_current_limit_out = mdl.get_item("ev_maximum_current_limit_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_maximum_current_limit_out:
                                            mdl.delete_item(ev_maximum_current_limit_out)
                                        
                                        ev_maximum_power_limit_port = mdl.get_item("ev_maximum_power_limit", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_maximum_power_limit_port:
                                            mdl.delete_item(ev_maximum_power_limit_port)

                                        ev_maximum_power_limit_out = mdl.get_item("ev_maximum_power_limit_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_maximum_power_limit_out:
                                            mdl.delete_item(ev_maximum_power_limit_out)

                                        bulk_charging_complete_port = mdl.get_item("bulk_charging_complete", parent=comp_handle, item_type=ITEM_PORT)
                                        if bulk_charging_complete_port:
                                            mdl.delete_item(bulk_charging_complete_port)
                                        
                                        bulk_charging_complete_out = mdl.get_item("bulk_charging_complete_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if bulk_charging_complete_out:
                                            mdl.delete_item(bulk_charging_complete_out)

                                        charging_complete_port = mdl.get_item("charging_complete", parent=comp_handle, item_type=ITEM_PORT)
                                        if charging_complete_port:
                                            mdl.delete_item(charging_complete_port)

                                        charging_complete_out = mdl.get_item("charging_complete_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if charging_complete_out:
                                            mdl.delete_item(charging_complete_out)

                                        remaining_time_to_full_soc_port = mdl.get_item("remaining_time_to_full_soc", parent=comp_handle, item_type=ITEM_PORT)
                                        if remaining_time_to_full_soc_port:
                                            mdl.delete_item(remaining_time_to_full_soc_port)

                                        remaining_time_to_full_soc_out = mdl.get_item("remaining_time_to_full_soc_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if remaining_time_to_full_soc_out:
                                            mdl.delete_item(remaining_time_to_full_soc_out)

                                        remaining_time_to_bulk_soc_port = mdl.get_item("remaining_time_to_bulk_soc", parent=comp_handle, item_type=ITEM_PORT)
                                        if remaining_time_to_bulk_soc_port:
                                            mdl.delete_item(remaining_time_to_bulk_soc_port)

                                        remaining_time_to_bulk_soc_out = mdl.get_item("remaining_time_to_bulk_soc_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if remaining_time_to_bulk_soc_out:
                                            mdl.delete_item(remaining_time_to_bulk_soc_out)

                                        ev_energy_request_port = mdl.get_item("ev_energy_request", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_energy_request_port:
                                            mdl.delete_item(ev_energy_request_port)
                                        
                                        ev_energy_request_out = mdl.get_item("ev_energy_request_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_energy_request_out:
                                            mdl.delete_item(ev_energy_request_out)
                                        
                                        ev_full_soc_port = mdl.get_item("ev_full_soc_port", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_full_soc_port:
                                            mdl.delete_item(ev_full_soc_port)

                                        ev_full_soc_out = mdl.get_item("ev_full_soc_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_full_soc_out:
                                            mdl.delete_item(ev_full_soc_out)
                                        
                                        ev_bulk_soc_port = mdl.get_item("ev_bulk_soc_port", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_bulk_soc_port:
                                            mdl.delete_item(ev_bulk_soc_port)

                                        ev_bulk_soc_out = mdl.get_item("ev_bulk_soc_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_bulk_soc_out:
                                            mdl.delete_item(ev_bulk_soc_out)
                                        
                                        ev_energy_capacity_port = mdl.get_item("ev_energy_capacity", parent=comp_handle, item_type=ITEM_PORT)
                                        if ev_energy_capacity_port:
                                            mdl.delete_item(ev_energy_capacity_port)
                                        
                                        ev_energy_capacity_out = mdl.get_item("ev_energy_capacity_out", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if ev_energy_capacity_out:
                                            mdl.delete_item(ev_energy_capacity_out)

                                        evse_isolation_status_port = mdl.get_item("evse_isolation_status", parent=comp_handle, item_type=ITEM_PORT)
                                        if evse_isolation_status_port:
                                            mdl.delete_item(evse_isolation_status_port)

                                        evse_isolation_status_conversion = mdl.get_item("evse_isolation_status_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_isolation_status_conversion:
                                            mdl.delete_item(evse_isolation_status_conversion)

                                        evse_isolation_status_limit = mdl.get_item("evse_isolation_status_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_isolation_status_limit:
                                            mdl.delete_item(evse_isolation_status_limit)

                                        evse_isolation_status_in = mdl.get_item("evse_isolation_status_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if evse_isolation_status_in:
                                            mdl.delete_item(evse_isolation_status_in)

                                        # if mdl.get_property_value(mdl.prop(container_handle, "include_isolation_status")) == "True":
                                        #     mdl.set_property_value(mdl.prop(container_handle, "include_isolation_status"), "False")

                                ENDCODE
                            }
                            
                            supported_payment_options {
                                label = "Payment options"
                                description = "List of supported payment methods"
                                widget = edit
                                type = string
                                combo_values = "External Payment", "Contract"
                                default_value = '["External Payment"]'
                            }
                            

                            path_type {
                                label = "Path type"
                                widget = edit
                                type = string
                                default_value = "Absolute"
                                nonvisible
                                no_evaluate
                            }

                            folder_path_pr
                            {
                                label = "Folder with certificates path"
                                type = string
                                default_value = ""
                                nonvisible
                                 
                            }

                            folder_path_label
                            {
                                description = "Imported folder path:"
                                type = string
                                default_value = "Imported folder path: "
                            }

                            imported_certificates_secc
                            {
                                description = "Imported certificates: "
                                widget = edit
                                type = string
                                default_value = '{}'
                                nonvisible
                            }
                            

                            free_service {
                                label = "Free service"
                                description = "Is charging a free service?"
                                widget = combo
                                type = string
                                combo_values = "True", "False"
                                default_value = "True"
                            }

                            /*environment_type {
                                label = "Environment type"
                                description = "Environment type"
                                widget = combo
                                type = string
                                combo_values = "Private", "Public"
                                default_value = "Private"
                                nonvisible
                            }*/

                            station_parameters {
                                label = "Station parameters"
                                description = "Station parameters"
                                widget = edit
                                type = string
                                default_value = '{"max_current" : {"value": 32, "multiplier": 0}, "nominal_voltage" : {"value": 230, "multiplier": 0}, "maximum_current_limit" : {"value": 32, "multiplier": 0}, "maximum_voltage_limit" : {"value": 230, "multiplier": 0}, "maximum_power_limit" : {"value": 20000, "multiplier": 0}, "minimum_current_limit" : {"value": 0, "multiplier": 0}, "minimum_voltage_limit" : {"value": 0, "multiplier": 0}, "current_regulation_tolerance" : {"value": 20, "multiplier": 0, "include": True}, "energy_to_be_delivered" : {"value": 100, "multiplier": 0, "include": True}, "peak_current_ripple" : {"value": 32, "multiplier": 0}, "present_current": {"multiplier": 0}, "present_voltage": {"multiplier": 0}}'
                            }

                            /*include_meter_info{
                                label = "Include MeterInfo"
                                description = "Include Meter Info data in Charging Status Response messages"
                                widget = checkbox
                                type = bool
                                default_value = False

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_PORT, ITEM_COMPONENT
                                    from typhoon.api.schematic_editor.exception import SchApiException

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    if new_value:
                                        try:
                                            meter_info_port = mdl.create_port(
                                            name="meter_info",
                                            parent=comp_handle,
                                            kind="sp",
                                            label="MeterInfo",
                                            direction="in",
                                            terminal_position=("left", 8),
                                            position=(8000, 8700)
                                            )

                                            meter_info_conversion = mdl.create_component(
                                            "core/Data Type Conversion",
                                            name="meter_info_conversion",
                                            parent=comp_handle,
                                            position=(8200, 8700) )
                                            mdl.set_property_value(mdl.prop(meter_info_conversion, "output_type"), "int")

                                            meter_info_limit = mdl.create_component(
                                                "core/Limit",
                                                name="meter_info_limit",
                                                parent=comp_handle,
                                                position=(8400, 8700)
                                            )

                                            meter_info_in = mdl.create_component(
                                                "core/SP output",
                                                name="meter_info_in",
                                                parent=comp_handle,
                                                position=(8600, 8700)
                                            )

                                            mdl.create_connection(meter_info_port, mdl.term(meter_info_conversion, "in"))
                                            mdl.create_connection(mdl.term(meter_info_conversion, "out"), mdl.term(meter_info_limit, "in"))
                                            mdl.create_connection(mdl.term(meter_info_limit, "out"), mdl.term(meter_info_in, "in"))

                                        except SchApiException:
                                            pass
                                    else:
                                        meter_info_port = mdl.get_item("meter_info", parent=comp_handle, item_type=ITEM_PORT)
                                        if meter_info_port:
                                            mdl.delete_item(meter_info_port)

                                        meter_info_conversion = mdl.get_item("meter_info_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if meter_info_conversion:
                                            mdl.delete_item(meter_info_conversion)

                                        meter_info_limit = mdl.get_item("meter_info_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if meter_info_limit:
                                            mdl.delete_item(meter_info_limit)

                                        meter_info_in = mdl.get_item("meter_info_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if meter_info_in:
                                            mdl.delete_item(meter_info_in)

                                ENDCODE
                            } */

                            include_metering_receipt_response {
                                label = "Receipt required"
                                description = "Receipt required"
                                widget = combo
                                type = string
                                combo_values = "False", "True"
                                default_value = "False"

                                CODE property_value_changed
                                    from typhoon.api.schematic_editor.const import ITEM_PORT, ITEM_COMPONENT
                                    from typhoon.api.schematic_editor.exception import SchApiException

                                    comp_handle = mdl.get_sub_level_handle(container_handle)

                                    if new_value == "True":
                                        try:
                                            meter_reading_port = mdl.create_port(
                                                name="meter_reading",
                                                parent=comp_handle,
                                                kind="sp",
                                                label="MeterReading",
                                                direction="in",
                                                terminal_position=("left", 20),
                                                position=(8000, 9100)
                                            )
                                            meter_reading_conversion = mdl.create_component(
                                                "core/Data Type Conversion",
                                                name="meter_reading_conversion",
                                                parent=comp_handle,
                                                position=(8200, 9100)
                                            )
                                        
                                            mdl.set_property_value(mdl.prop(meter_reading_conversion, "output_type"), "int")

                                            meter_reading_limit = mdl.create_component(
                                                "core/Limit",
                                                name="meter_reading_limit",
                                                parent=comp_handle,
                                                position=(8400, 9100)
                                            )

                                            # mdl.set_property_value(mdl.prop(meter_reading_limit, "upper_limit"), 9999999)
                                            # mdl.set_property_value(mdl.prop(meter_reading_limit, "lower_limit"), 0)

                                            meter_reading_in = mdl.create_component(
                                                "core/SP output",
                                                name="meter_reading_in",
                                                parent=comp_handle,
                                                position=(8600, 9100)
                                            )
                                            mdl.create_connection(meter_reading_port, mdl.term(meter_reading_conversion, "in"))
                                            mdl.create_connection(mdl.term(meter_reading_conversion, "out"), mdl.term(meter_reading_limit, "in"))
                                            mdl.create_connection(mdl.term(meter_reading_limit, "out"), mdl.term(meter_reading_in, "in"))
                                        except SchApiException:
                                            pass
                                    else:
                                        meter_reading_port = mdl.get_item("meter_reading", parent=comp_handle, item_type=ITEM_PORT)
                                        if meter_reading_port:
                                            mdl.delete_item(meter_reading_port)

                                        meter_reading_conversion = mdl.get_item("meter_reading_conversion", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if meter_reading_conversion:
                                            mdl.delete_item(meter_reading_conversion)

                                        meter_reading_limit = mdl.get_item("meter_reading_limit", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if meter_reading_limit:
                                            mdl.delete_item(meter_reading_limit)

                                        meter_reading_in = mdl.get_item("meter_reading_in", parent=comp_handle, item_type=ITEM_COMPONENT)
                                        if meter_reading_in:
                                            mdl.delete_item(meter_reading_in)
                                        
                            
                                ENDCODE    
                            }

                            
                            
                            notification_max_delay {
                                label = "Notification max delay"
                                previous_names = "notification_max_delay"
                                description = "Notification max delay"
                                widget = edit
                                type = int
                                unit = "s"
                                default_value = 1
                            }

                            log_level {
                                label = "Log level"
                                widget = combo
                                type = string
                                combo_values = "Off", "Debug", "Info", "Warning", "Error"
                                default_value = "Off"
                                nonvisible

                                CODE property_value_changed

                                    # Backward compatibility
                                    if new_value == "0":
                                        mdl.set_property_value(prop_handle, "Off")
                                    elif new_value == "1":
                                        mdl.set_property_value(prop_handle, "Info")
                                    elif new_value == "2":
                                        mdl.set_property_value(prop_handle, "Debug")

                                ENDCODE
                            }
            
                            log_output {
                                label = "Log output"
                                widget = edit
                                type = string
                                default_value = "Console"
                                nonvisible
                                no_evaluate
                            }

                            execution_rate {
                                label = "Execution rate"
                                previous_names = "timer_interval"
                                description = "Signal processing execution rate"
                                widget = edit
                                type = real
                                default_value = 100e-6
                            }

                            _supported_platforms {
                                label = "Supported platforms"
                                description = "Supported platforms"
                                widget=edit
                                type = string
                                default_value = "['hil']"
                                nonvisible
                                vector
                            }
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.iso15118_secc_dialog import ISO15118SECCDialog

                            dialog = ISO15118SECCDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                            dialog.exec_()
                        ENDCODE

                        CODE pre_compile
                            from typhoon.import_path.handlers.iso15118_secc import component_pre_compile
            
                            component_pre_compile(mdl, item_handle)
                        ENDCODE

                        CODE post_resolve
                            from typhoon.import_path.handlers.iso15118_secc import component_post_resolve
            
                            component_post_resolve(mdl, item_handle)
                        ENDCODE
                    }
                    [
                        size = 320, 342
                    ]
                }
            }

            component Category CIP {
                visible = "real_time"
                
                component Category EtherNET-IP {

                    component Subsystem "EtherNET-IP Server" {
                        layout = dynamic
                        require = ""
                        visible = "dev"

                        mask {
                            icon = "image('cip/EtherNETIP_server.svg')"
                            help_file = "ethernet-ip.html"
                            description = ""

                            hil_id {
                                description = "ID of the device on which this component will be executed"
                                type = int
                                default_value = 0
                                nonvisible
                            }

                            file_name {
                                description = "EDS file name"
                                type = string
                                default_value = "Import EDS file:"
                                no_evaluate
                                nonvisible
                            }

                            server_data {
                                description = "Store server data extracted from config file"
                                type = string
                                default_value = "{'Classes_list_items':[], 'Parameters_structure_list_items': [], 'Assembly_parameters_structure_list_items': [], 'Parameter_info_list': [], 'Assembly_info_list': [], 'Classes_structure_list': [], 'File_info_list': [], 'Device_info_list': []}"
                                no_evaluate
                                nonvisible

                                CODE property_value_changed
                                    from typhoon.import_path.handlers.ethernet_ip import create_terminals
                                    from typhoon.api.schematic_editor.const import ERROR_PROPERTY_VALUE_INVALID

                                    server_data = eval(new_value)
                                    list_items = server_data["Assembly_parameters_structure_list_items"]

                                    comp_handle = mdl.get_sub_level_handle(container_handle)
                                    create_terminals(mdl, comp_handle, mdl.get_property_value(mdl.prop(container_handle, "execution_rate")), list_items)
                                ENDCODE
                            }

                            port_names  {
                                description = "Store all port names"
                                type = string
                                default_value = "[]"
                                no_evaluate
                                nonvisible
                            }

                             execution_rate {
                                label = "Execution rate"
                                previous_names = "timer_interval"
                                description = "Signal processing execution rate"
                                widget = edit
                                type = real
                                default_value = 100e-6
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.ethernet_ip_dialog import EtherNETIPDialog

                                dialog = EtherNETIPDialog(current_diagram.scene.parent().main_window, component, mdl, item_handle)
                                dialog.exec_()
                            ENDCODE

                            CODE pre_compile
                                from typhoon.import_path.handlers.ethernet_ip import component_pre_compile

                                component_pre_compile(mdl, item_handle)
                            ENDCODE

                            CODE post_resolve
                                from typhoon.import_path.handlers.ethernet_ip import post_resolve

                                post_resolve(mdl, item_handle)

                            ENDCODE

                        }
                    }
                    [
                        size = 240, 144
                    ]
                }
            }

            component Category "ABB" {
                visible = "real_time"
                component Subsystem DDCS {
                    layout = dynamic
                    require = "sw_abb_ddcs"
                    component "core/C function" "C function1" {
                        execution_rate = "execution_rate"
                        input_terminals = "int in;"
                        input_terminals_dimensions = "inherit"
                        input_terminals_feedthrough = "True"
                        input_terminals_show_labels = "False"
                        output_fnc = "/*Begin code section*/
        out = (in&0xFF000000)>>24;
        out2 = (in&0x00FF0000)>>16;
        out3 = (in&0xFFFF);
        /*End code section*/"
                        output_terminals = "int out;int out2;int out3;"
                        output_terminals_dimensions = "inherit;inherit;inherit"
                        output_terminals_feedthrough = "True;True;True"
                        output_terminals_show_labels = "False;False;False"
                    }
                    [
                        position = 8000, 8048
                        hide_name = True
                        size = 48, 64
                    ]

                    component "core/C function" "C function5" {
                        execution_rate = "execution_rate"
                        input_terminals = "int in;"
                        input_terminals_dimensions = "inherit"
                        input_terminals_feedthrough = "True"
                        input_terminals_show_labels = "False"
                        output_fnc = "/*Begin code section*/
        out2 = (in&0xFFFF);  // please check order of in and in1
        out = (in&0xFFFF0000)>>16;  // please check order of in and in1
        /*End code section*/"
                        output_terminals = "int out;int out2;"
                        output_terminals_dimensions = "inherit;inherit"
                        output_terminals_feedthrough = "True;True"
                        output_terminals_show_labels = "False;False"
                    }
                    [
                        position = 8000, 8336
                        hide_name = True
                        size = 48, 48
                    ]

                    component "core/C function" DataMerge1 {
                        execution_rate = "execution_rate"
                        global_variables = "int send_d;int send_re;"
                        input_terminals = "int in1;int in2;int in3;"
                        input_terminals_dimensions = "inherit;inherit;inherit"
                        input_terminals_feedthrough = "True;True;True"
                        input_terminals_show_labels = "True;True;False"
                        output_fnc = "/*Begin code section*/
        out = (in3&0xFFFF) + ((in2&0xFF)<<16) + ((in1&0xFF)<<24);
        /*End code section*/"
                        output_terminals = "int out;"
                        output_terminals_dimensions = "inherit"
                        output_terminals_feedthrough = "True"
                        output_terminals_show_labels = "False"
                    }
                    [
                        position = 8392, 8080
                        size = 120, 88
                    ]

                    component "core/C function" DataMerge2 {
                        execution_rate = "execution_rate"
                        global_variables = "int send_d;int send_re;"
                        input_terminals = "int in1;int in2;"
                        input_terminals_dimensions = "inherit;inherit"
                        input_terminals_feedthrough = "True;True"
                        input_terminals_show_labels = "True;True"
                        output_fnc = "/*Begin code section*/
        out = (in2&0xFFFF)+ ((in1&0xFFFF)<<16);

        /*send_d = send;
        if ( send == 1 && send_d == 0)
            send_re = 1;
        else
            send_re = 0;*/
        /*End code section*/"
                        output_terminals = "int out;"
                        output_terminals_dimensions = "inherit"
                        output_terminals_feedthrough = "True"
                        output_terminals_show_labels = "False"
                    }
                    [
                        position = 8392, 8224
                        size = 128, 96
                    ]

                    component "core/C function" Merge5 {
                        execution_rate = "execution_rate"
                        input_terminals = "uint in1;uint in2;"
                        input_terminals_dimensions = "inherit;inherit"
                        input_terminals_feedthrough = "True;True"
                        input_terminals_show_labels = "False;False"
                        output_fnc = "/*Begin code section*/
        out = ((in1 & 0xFF) << 24) + ((in2 & 0xFF) << 16) + 0x0000;
        /*End code section*/"
                        output_terminals = "uint out;"
                        output_terminals_dimensions = "inherit"
                        output_terminals_feedthrough = "True"
                        output_terminals_show_labels = "False"
                    }
                    [
                        position = 7488, 8120
                        size = 72, 88
                    ]

                    component "core/C function" Merge6 {
                        execution_rate = "execution_rate"
                        input_terminals = "uint in1;uint in2;"
                        input_terminals_dimensions = "inherit;inherit"
                        input_terminals_feedthrough = "True;True"
                        input_terminals_show_labels = "False;False"
                        output_fnc = "/*Begin code section*/
        if (in1 == 1) {
            out = (0x20000000  + in2);
        }
        else {
            out = (0x00000000  + in2);
        }
        /*End code section*/"
                        output_terminals = "uint out;"
                        output_terminals_dimensions = "inherit"
                        output_terminals_feedthrough = "True"
                        output_terminals_show_labels = "False"
                    }
                    [
                        position = 7472, 8264
                        size = 56, 88
                    ]

                    component "core/Constant" Constant1 {
                        execution_rate = "execution_rate"
                        signal_type = "uint"
                        value = "address"
                    }
                    [
                        position = 7320, 8072
                    ]

                    component "core/Constant" Constant2 {
                        execution_rate = "execution_rate"
                        signal_type = "uint"
                        value = "dest_address"
                    }
                    [
                        position = 7320, 8152
                    ]

                    component "core/Constant" Constant3 {
                        execution_rate = "execution_rate"
                        signal_type = "uint"
                        value = "invert"
                    }
                    [
                        position = 7320, 8232
                    ]

                    component "core/Constant" Constant4 {
                        execution_rate = "execution_rate"
                        signal_type = "uint"
                        value = "delay"
                    }
                    [
                        position = 7320, 8312
                    ]

                    component "core/Advanced C function" "FPGA Read" {
                        arb_defs = "/*Begin code section*/

                int base_addr = 0;

                /*End code section*/"
                        execution_rate = "execution_rate"
                        input_terminals = ""
                        input_terminals_dimensions = ""
                        input_terminals_feedthrough = ""
                        input_terminals_show_labels = ""
                        output_fnc = "/*Begin code section*/

                out1 = HIL_InInt32(base_addr + 4);

                out2 = HIL_InInt32(base_addr + 5);

                /*End code section*/"
                        output_terminals = "uint out1;uint out2;"
                        output_terminals_dimensions = "1;1"
                        output_terminals_feedthrough = "True;True"
                        output_terminals_show_labels = "False;False"
                    }
                    [
                        position = 7864, 8184
                        size = 48, 48
                    ]

                    component "core/Advanced C function" "FPGA Write" {
                        arb_defs = "/*Begin code section*/

                int base_addr = 0;

                /*End code section*/"
                        execution_rate = "execution_rate"
                        input_terminals = "uint in1;uint in2;"
                        input_terminals_dimensions = "inherit;inherit"
                        input_terminals_feedthrough = "True;True"
                        input_terminals_show_labels = "False;False"
                        output_fnc = "/*Begin code section*/

                HIL_OutInt32(base_addr + 0, in1); // fnc, ds1

                HIL_OutInt32(base_addr + 1, in2); // ds2, ds3

                /*End code section*/"
                        output_terminals = ""
                        output_terminals_dimensions = ""
                        output_terminals_feedthrough = ""
                        output_terminals_show_labels = ""
                    }
                    [
                        position = 8584, 8160
                        size = 48, 80
                    ]

                    component "core/Advanced C function" Configuration {
                        arb_defs = "/*Begin code section*/

                int base_addr = 0;

                int gpio_baseaddr = 0;

                int rx_pin = 0;

                int tx_pin = 0;

                int rx_conf = 0;

                int tx_conf = 0;

                /*End code section*/"
                        init_fnc = "/*Begin code section*/

                HIL_OutInt32(gpio_baseaddr + rx_pin, rx_conf);

                HIL_OutInt32(gpio_baseaddr + tx_pin, tx_conf);

                HIL_OutInt32(base_addr + 6, in1);

                HIL_OutInt32(base_addr + 7, in2);

                /*End code section*/"
                        input_terminals = "uint in1;uint in2;"
                        input_terminals_dimensions = "inherit;inherit"
                        input_terminals_feedthrough = "True;True"
                        input_terminals_show_labels = "False;False"
                        output_fnc = "/*Begin code section*/

                //init

                /*End code section*/"
                        output_terminals = ""
                        output_terminals_dimensions = ""
                        output_terminals_feedthrough = ""
                        output_terminals_show_labels = ""
                    }
                    [
                        position = 7664, 8184
                        size = 48, 48
                    ]

                    port Rx_mifr {
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8104, 7952
                    ]

                    port Tx_data_word_2 {
                        position = left:4
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8264, 8192
                    ]

                    port Tx_mifr {
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8224, 8016
                    ]

                    port Rx_data_word_3 {
                        position = right:5
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8096, 8368
                    ]

                    port Tx_data_word_3 {
                        position = left:5
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8264, 8256
                    ]

                    port Rx_mafr {
                        position = right:2
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8112, 8048
                    ]

                    port Rx_data_word_2 {
                        position = right:4
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8096, 8288
                    ]

                    port Tx_mafr {
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8224, 8080
                    ]

                    port Rx_data_word_1 {
                        position = right:3
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8104, 8128
                    ]

                    port Tx_data_word_1 {
                        position = left:3
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8224, 8136
                    ]

                    connect DataMerge2.in2 Tx_data_word_3 as Connection523
                    connect "C function1.out" Rx_mifr as Connection519
                    connect "C function5.out2" Rx_data_word_3 as Connection522
                    connect DataMerge2.in1 Tx_data_word_2 as Connection520
                    connect "C function1.out2" Rx_mafr as Connection524
                    connect "C function5.out" Rx_data_word_2 as Connection525
                    connect Constant1.out Merge5.in1 as Connection542
                    connect Constant2.out Merge5.in2 as Connection543
                    connect Constant3.out Merge6.in1 as Connection544
                    connect Constant4.out Merge6.in2 as Connection545
                    connect "FPGA Read.out1" "C function1.in" as Connection546
                    connect "FPGA Read.out2" "C function5.in" as Connection547
                    connect DataMerge1.out "FPGA Write.in1" as Connection557
                    connect DataMerge2.out "FPGA Write.in2" as Connection558
                    connect Merge5.out Configuration.in1 as Connection582
                    connect Merge6.out Configuration.in2 as Connection583
                    connect "C function1.out3" Rx_data_word_1 as Connection584
                    connect Tx_mifr DataMerge1.in1 as Connection585
                    connect Tx_mafr DataMerge1.in2 as Connection586
                    connect Tx_data_word_1 DataMerge1.in3 as Connection587

                    mask {
                        description = "DDCS component enables communication between two DDCS nodes through GPIO port."

                        invert {
                            label = "Invert RX/TX signals"
                            widget = edit
                            type = generic
                            default_value = "1"
                        }

                        delay {
                            label = "Delay"
                            widget = edit
                            type = generic
                            default_value = "1000"
                        }

                        address {
                            label = "Node Address"
                            widget = edit
                            type = generic
                            default_value = "1"
                        }

                        dest_address {
                            label = "Target node address"
                            widget = edit
                            type = generic
                            default_value = "0"
                        }

                        module_num {
                            label = "Module number"
                            widget = edit
                            type = generic
                            default_value = "0"
                            nonvisible
                        }

                        mode {
                            label = "Mode"
                            widget = combo
                            combo_values = "Master", "Slave"
                            type = string
                            default_value = "Master"
                            no_evaluate
                        }

                        rx_gpio_pin {
                            label = "RX GPIO pin"
                            widget = combo
                            combo_values = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"
                            type = string
                            default_value = "1"
                            no_evaluate
                        }

                        tx_gpio_pin {
                            label = "TX GPIO pin"
                            widget = combo
                            combo_values = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"
                            type = string
                            default_value = "1"
                            no_evaluate
                        }

                        execution_rate {
                            label = "Execution rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                        }

                        CODE pre_compile
    
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                            from typhoon.conf.hw.mem_map import get_dd_reg_addr
                            import typhoon.conf.hw.constants as hwc
                            from typhoon.conf.hw.mem_map import get_dd_reg_addr, get_gpio_config_reg_val, get_cu_reg_addr

                            master_slave = mdl.get_property_value(mdl.prop(item_handle, "mode"))
                            module_num = int(mdl.get_property_value(mdl.prop(item_handle, "module_num")))

                            rx_pin = int(mdl.get_property_value(mdl.prop(item_handle, "rx_gpio_pin"))) - 1
                            tx_pin = int(mdl.get_property_value(mdl.prop(item_handle, "tx_gpio_pin"))) - 1

                            if master_slave == "Master":
                                ddcs_mode = 1
                                gpio_mode = hwc.GPIO_DDCS_MASTER_MODE
                            else:
                                ddcs_mode = 0
                                gpio_mode = hwc.GPIO_DDCS_SLAVE_MODE

                            base_addr = hex(get_dd_reg_addr(module_num, ddcs_mode))
                            gpio_baseaddr = hex(get_cu_reg_addr(hwc.GPIO_MODE))

                            comp_handle = mdl.get_sub_level_handle(item_handle)

                            fpga_read_advc = mdl.get_item(f"FPGA Read", parent=comp_handle, item_type=ITEM_COMPONENT)
                            arb_def_fpga_read = "/*Begin code section*/\n"
                            arb_def_fpga_read += f"int base_addr = {base_addr}; \n"
                            arb_def_fpga_read += "/*End code section*/\n"
                            mdl.set_property_value(mdl.prop(fpga_read_advc, "arb_defs"), arb_def_fpga_read)

                            fpga_write_advc = mdl.get_item(f"FPGA Write", parent=comp_handle, item_type=ITEM_COMPONENT)
                            arb_def_fpga_write = "/*Begin code section*/\n"
                            arb_def_fpga_write += f"int base_addr = {base_addr}; \n"
                            arb_def_fpga_write += "/*End code section*/\n"
                            mdl.set_property_value(mdl.prop(fpga_write_advc, "arb_defs"), arb_def_fpga_write)

                            fpga_conf_advc = mdl.get_item(f"Configuration", parent=comp_handle, item_type=ITEM_COMPONENT)
                            arb_def_conf = "/*Begin code section*/\n"
                            arb_def_conf += f"int base_addr = {base_addr}; \n"
                            arb_def_conf += f"int gpio_baseaddr = {gpio_baseaddr};\n"
                            arb_def_conf += f"int rx_pin = {rx_pin};\n"
                            arb_def_conf += f"int tx_pin = {tx_pin};\n"
                            arb_def_conf += f"int rx_conf = {get_gpio_config_reg_val(gpio_mode, True, module_num):#x};\n"
                            arb_def_conf += f"int tx_conf = {get_gpio_config_reg_val(gpio_mode, False, module_num):#x};\n"
                            arb_def_conf += "/*End code section*/\n"
                            mdl.set_property_value(mdl.prop(fpga_conf_advc, "arb_defs"), arb_def_conf)
                        
                        ENDCODE
                    }
                }
                [
                    size = 192, 240
                ]

                component Subsystem PowerLink {
                    require =  "sw_abb_powerlink"
                    layout = dynamic
                    previous_names = "Powerlink"
        
                    port rx_status_word {
                        position = top:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8200, 8200
                    ]
    
                    component "core/Advanced C function" RxStatus {
                        arb_defs = "/*Begin code section*/
                        int reg_addr = 0;
                        int status_tmp = 0;
                        /*End code section*/"
                        execution_rate = "execution_rate"
                        input_terminals = ""
                        input_terminals_dimensions = ""
                        input_terminals_feedthrough = ""
                        input_terminals_show_labels = ""
                        output_fnc = ""
                        output_terminals = "uint status;"
                        output_terminals_dimensions = "1"
                        output_terminals_feedthrough = "True"
                        output_terminals_show_labels = "False"
    
                    }
    
                    [
                        position = 7900, 8200
                    ]
    
                    connect "RxStatus.status" "rx_status_word"
    
                    port reset {
                        position = bottom:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 7900, 8300
                    ]
    
                    component "core/Advanced C function" Reset {
                        arb_defs = "/*Begin code section*/
                        int reg_addr_reset = 0;
                        /*End code section*/"
                        execution_rate = "execution_rate"
                        input_terminals = "uint reset;"
                        input_terminals_dimensions = "1"
                        input_terminals_feedthrough = "True"
                        input_terminals_show_labels = "False"
                        output_fnc = ""
                        output_terminals = ""
                        output_terminals_dimensions = ""
                        output_terminals_feedthrough = ""
                        output_terminals_show_labels = ""
                    }
    
                    [
                        position = 8200, 8300
                    ]
    
                    connect "Reset.reset" "reset"
        
                    mask {
                        description = "Powerlink component enables communication between two Powerlink nodes through GPIO port."
    
                        execution_rate {
                            label = "Execution rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                        }
    
                        mode {
                            label = "Mode"
                            widget = combo
                            type = string
                            combo_values = "Master", "Slave"
                            default_value = "Master"
                        }
    
                        rx_tmp {
                            label = ""
                            widget = edit
                            type = string
                            default_value = "{}"
                            nonvisible
                        }
    
                        tx_tmp {
                            label = ""
                            widget = edit
                            type = string
                            default_value = "{}"
                            nonvisible
                        }
                        
                        module_num{
                            label = "Module number"
                            widget = combo
                            type = string
                            combo_values = "1", "2", "3", "4"
                            default_value = "1"
    
                            CODE property_value_changed
                                from typhoon.import_path.handlers.powerlink import module_num_changed
    
                                module_num_changed(mdl, container_handle, new_value)
    
                            ENDCODE
    
                            CODE property_value_edited
                                from typhoon.import_path.handlers.powerlink import rx_tx_prop_set_visibility
    
                                module_num = int(new_value)
                                rx_tx_prop_set_visibility(mdl, container_handle, module_num)
    
                            ENDCODE
                        }
    
                        CODE init
                            from typhoon.import_path.handlers.powerlink import set_module_num_and_create_rx_tx_properties, rx_tx_prop_set_visibility
    
                            set_module_num_and_create_rx_tx_properties(mdl, item_handle)
    
                            module_num = int(mdl.get_property_value(mdl.prop(item_handle, "module_num")))
    
                            rx_tx_prop_set_visibility(mdl, item_handle, module_num)
    
                        ENDCODE
    
                        CODE on_dialog_close
    
                            from typhoon.import_path.handlers.powerlink import save_rx_tx_gpio_values
    
                            save_rx_tx_gpio_values(mdl, item_handle)
    
                        ENDCODE
    
                        CODE pre_compile
    
                            from typhoon.import_path.handlers.powerlink import create_adv_c_code
    
                            create_adv_c_code(mdl, item_handle)
    
                        ENDCODE
    
                    }
                }
                [
                    size = 250, 300
                ]

            }


        }

    }

}