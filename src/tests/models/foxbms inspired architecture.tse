version = 4.2

//
// Saved by sw version: 2023.2 DEV
//

model "foxbms inspired architecture" {
    configuration {
        hil_device = "HIL402"
        hil_configuration_id = 1
        simulation_method = exact
        simulation_time_step = 1e-6
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        reset_analog_outputs_on_sim_stop = True
        reset_digital_outputs_on_sim_stop = True
        vhil_adio_loopback = False
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "external memory"
        data_section = "external memory"
        sys_sp_rate_1 = 0.0005
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
        user_cpu_part_option = "default"
        matrix_based_reduction = True
        cpl_dynamics_analysis = False
        export_ss_to_pickle = False
        ground_scope_core = False
        dss_num_tol = 1e-15
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_directory = "H:/HIL/Projects/Matrix"
        cce_custom_type_int = ""
        cce_custom_type_uint = ""
        cce_custom_type_real = ""
        tunable_params = "component defined"
        sp_compiler_type = "C compiler"
        sig_stim = "off"
        export_resource_list = ""
        export_dependency_list = ""
        excluded_resource_list = ""
        export_out_file = ""
        export_lock_top_level = True
        export_encrypt_library = True
        export_encrypt_resources = True
    }

    component Subsystem Root {
        component "core/Single Pole Single Throw Contactor" "Cont 1 Plus" {
            ctrl_src = "Model"
            initial_state = "on"
        }
        [
            position = 1864, 1792
            rotation = right
            size = 64, 32
        ]

        component "core/Current Measurement" Imod {
            execution_rate = "exec_rate_fast"
            sig_output = "True"
        }
        [
            position = 2016, 1952
            rotation = right
            size = 64, 32
        ]

        component "core/Voltage Measurement" Vmod {
        }
        [
            position = 1800, 1952
            rotation = right
            size = 64, 32
        ]

        component "core/Resistor" "Precharge Resistor" {
            resistance = "100"
        }
        [
            position = 2016, 1720
            rotation = left
        ]

        component "core/Single Pole Single Throw Contactor" "Precharge Contactor" {
            ctrl_src = "Model"
            initial_state = "on"
        }
        [
            position = 2016, 1632
            rotation = right
            size = 64, 32
        ]

        component "core/Resistor" R2 {
            resistance = "100"
        }
        [
            position = 2016, 2072
            rotation = right
        ]

        component "core/Resistor" R5 {
            resistance = "1e5"
        }
        [
            position = 1936, 2216
            rotation = right
        ]

        component Subsystem BMS {
            layout = dynamic
            component Subsystem Safety {
                layout = dynamic
                component "core/Constant" "Max Temp1" {
                    execution_rate = "execution_fast"
                    value = "temp_max"
                }
                [
                    position = 6864, 8248
                ]

                component "core/Constant" "Max Voltage1" {
                    execution_rate = "execution_fast"
                    value = "volt_max"
                }
                [
                    position = 6864, 8192
                ]

                component "core/Constant" "Max Current1" {
                    execution_rate = "execution_fast"
                    value = "curr_max"
                }
                [
                    position = 6864, 8416
                ]

                component "core/Constant" "Min Temp1" {
                    execution_rate = "execution_fast"
                    value = "temp_min"
                }
                [
                    position = 6864, 8296
                ]

                component "core/Constant" "Min Voltage1" {
                    execution_rate = "execution_fast"
                    value = "volt_deep_discharge"
                }
                [
                    position = 6864, 8360
                ]

                component "core/Constant" "Min Current1" {
                    execution_rate = "execution_fast"
                    value = "curr_max"
                }
                [
                    position = 6864, 8472
                ]

                component "core/Gain" Gain2 {
                    gain = "-1"
                }
                [
                    position = 6944, 8472
                ]

                component "core/Constant" cell_count {
                    execution_rate = "execution_fast"
                    value = "string_number*cell_string_number"
                }
                [
                    position = 6864, 8528
                ]

                component "core/Probe" test_number {
                }
                [
                    position = 8248, 8320
                ]

                component "core/Constant" "Max Module Current" {
                    execution_rate = "exec_rate_fast"
                    value = "curr_mod_max"
                }
                [
                    position = 6864, 8600
                ]

                component "core/Advanced C function" Safety_Logic {
                    arb_defs = "/*Begin code section*/

/*End code section*/"
                    execution_rate = "execution_fast"
                    global_variables = "int i;"
                    init_fnc = "/*Begin code section*/
test_number = 0;
cell_number = 0;
/*End code section*/"
                    input_terminals = "inherit volts;inherit temps;inherit currs;inherit volt_max;inherit temp_max;inherit temp_min;inherit volt_min;inherit curr_max;inherit curr_min;inherit cell_count;inherit curr_mod_max;inherit Imod;inherit reset;"
                    input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                    input_terminals_feedthrough = "True;True;True;True;True;True;True;True;True;True;True;True;True"
                    input_terminals_show_labels = "True;True;True;True;True;True;True;True;True;True;True;True;True"
                    output_fnc = "/*Begin code section*/
/* check module current draw */
    if (Imod >= curr_mod_max) /* test 6 */
    {
        outputs[0] = 1;
        test_number = 6;
    }
    else
    {
        outputs[0]= 0;
    }

/* iterate over every cell */
for (i = 0; i < cell_count; ++i)
{
    /* maximum test values */
    if (volts[i] >= volt_max) /*test 0 */
    {
        outputs[1+i*6] = 1;
        test_number = 1;
        cell_number = i; 
    }
    else
    {
        outputs[1+i*6] = 0;
    }
    if (temps[i] >= temp_max) /* test 1 */
    {
        outputs[2+i*6] = 1;
        test_number = 2;
        cell_number = i;
    }
    else
    {
        outputs[2+i*6] = 0;
    }
    if (currs[i] >= curr_max) /* test 2 */
    {
        outputs[3+i*6] = 1;
        test_number = 3;
        cell_number = i;
    }
    else
    {
        outputs[3+i*6] = 0;
    }
    
    /* minimum test values */
    if (volts[i] <= volt_min) /* test 3 */
    {
        outputs[4+i*6] = 1;
        test_number = 4;
        cell_number = i;
    }
    else
    {
        outputs[4+i*6] = 0;
    }
    if (temps[i] <= temp_min) /* test 4 */
    {
        outputs[5+i*6] = 1;
        test_number = 5;
        cell_number = i;
    }
    else
    {
        outputs[5+i*6] = 0;
    }
    if (currs[i] <= curr_min) /* test 5 */
    {
        outputs[6+i*6] = 1;
        test_number = 6;
        cell_number = i;
    }
    else
    {
        outputs[6+i*6] = 0;
    }
}
/*End code section*/"
                    output_terminals = "real outputs;int test_number;int cell_number;"
                    output_terminals_dimensions = "70;1;1"
                    output_terminals_feedthrough = "True;True;True"
                    output_terminals_show_labels = "True;True;True"
                    update_fnc = "/*Begin code section*/
if (reset > 0)
{
    test_number = 0;
    cell_number = 0;
}
/*End code section*/"
                }
                [
                    position = 7880, 8360
                    size = 424, 616
                ]

                component "core/Probe" cell_number {
                }
                [
                    position = 8248, 8608
                ]

                port Diag {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8248, 8032
                ]

                port Volts {
                    label = "Voltages"
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6864, 8032
                ]

                port Temps {
                    label = "Temps"
                    position = left:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6864, 8088
                ]

                port Currs {
                    label = "Currs"
                    position = left:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6864, 8136
                ]

                port Imod {
                    label = "Imod"
                    position = right:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6864, 8656
                ]

                port reset {
                    position = right:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6864, 8744
                ]

                connect "Min Current1.out" Gain2.in as Connection212
                connect "Max Temp1.out" Safety_Logic.temp_max as Connection217
                [
                    breakpoints = 6896, 8248; 7607, 8248; 7608, 8248
                ]
                connect "Min Temp1.out" Safety_Logic.temp_min as Connection218
                connect "Min Voltage1.out" Safety_Logic.volt_min as Connection219
                [
                    breakpoints = 6896, 8360; 7488, 8360
                ]
                connect cell_number.in Safety_Logic.cell_number as Connection225
                connect Safety_Logic.test_number test_number.in as Connection226
                connect Safety_Logic.outputs Diag as Connection227
                connect Imod Safety_Logic.Imod as Connection228
                [
                    breakpoints = 7624, 8656; 7624, 8600
                ]
                connect "Max Module Current.out" Safety_Logic.curr_mod_max as Connection229
                [
                    breakpoints = 7600, 8600
                ]
                connect cell_count.out Safety_Logic.cell_count as Connection230
                [
                    breakpoints = 6896, 8528; 7584, 8528; 7584, 8528; 7648, 8528
                ]
                connect Gain2.out Safety_Logic.curr_min as Connection231
                [
                    breakpoints = 7560, 8472; 7560, 8472; 7648, 8472
                ]
                connect "Max Current1.out" Safety_Logic.curr_max as Connection232
                [
                    breakpoints = 7512, 8416; 7512, 8416; 7648, 8416
                ]
                connect Safety_Logic.volt_max "Max Voltage1.out" as Connection233
                [
                    breakpoints = 7648, 8192; 6896, 8192
                ]
                connect Safety_Logic.currs Currs as Connection234
                [
                    breakpoints = 7648, 8136; 6896, 8136
                ]
                connect Temps Safety_Logic.temps as Connection235
                connect Safety_Logic.volts Volts as Connection236
                [
                    breakpoints = 7648, 8032; 6896, 8032
                ]
                connect reset Safety_Logic.reset as Connection237

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Safety Module</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">======================</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Contains the Safety State Machine for the BMS</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Checks voltage, current, and temperature</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">requirements against user defined settings </p></body></html>"

                    safety_tests {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE init
                        safety_tests = cell_count * 6
                        
                        safe_block = mdl.get_sub_level_handle(item_handle)
                        safety_logic = mdl.get_item(name='Safety_Logic',parent=safe_block)
                        info(safety_logic)
                        
                        mdl.set_property_value(mdl.prop(safety_logic, "output_terminals_dimensions"),safety_tests)
                        info(mdl.prop(safety_logic, "output_terminals_dimensions"))
                    ENDCODE
                }
            }
            [
                position = 6904, 8168
                size = 136, 224
            ]

            component Subsystem DIAG {
                layout = dynamic
                component "core/Accumulator" Accumulator2 {
                    execution_rate = "exec_rate_fast"
                    init_value = "-1"
                    reset_type = "synchronous"
                    show_reset = "either"
                }
                [
                    position = 7568, 7536
                ]

                component "core/Comparator" Comparator2 {
                }
                [
                    position = 7688, 7544
                ]

                component "core/Constant" Constant {
                    execution_rate = "execution_fast"
                    value = "0"
                }
                [
                    position = 7640, 7656
                    rotation = left
                ]

                component "core/Sum" Sum2 {
                    signs = "1"
                }
                [
                    position = 7768, 7544
                ]

                component "core/SCADA Input" "Error Reset" {
                    execution_rate = "execution_fast"
                    format = "int"
                    signal_type = "int"
                    unit = ""
                }
                [
                    position = 7376, 7624
                ]

                component "core/Probe" reset {
                }
                [
                    position = 7304, 7568
                    rotation = down
                ]

                component "core/Relational operator" "Relational operator1" {
                }
                [
                    position = 7488, 7600
                    rotation = left
                ]

                component "core/Constant" Constant1 {
                    execution_rate = "execution_fast"
                    signal_type = "int"
                }
                [
                    position = 7496, 7744
                    rotation = left
                ]

                component "core/Bus Split" String_Split {
                }
                [
                    position = 7824, 7344
                ]

                component "core/Bus Join" String_Join {
                }
                [
                    position = 8192, 7336
                ]

                component "core/Probe" string_stat {
                }
                [
                    position = 8288, 7224
                ]

                component "core/Sum" String1 {
                    signs = "1"
                }
                [
                    position = 7904, 7296
                ]

                component "core/SCADA Input" String_ctrl_1 {
                    execution_rate = "execution_fast"
                    unit = ""
                }
                [
                    position = 7976, 7200
                ]

                component "core/Sum" string1_input {
                }
                [
                    position = 8064, 7272
                ]

                component "core/Sum" String2 {
                    signs = "1"
                }
                [
                    position = 7904, 7400
                ]

                component "core/SCADA Input" String_ctrl_2 {
                    execution_rate = "execution_fast"
                    unit = ""
                }
                [
                    position = 7976, 7344
                ]

                component "core/Sum" string2_input {
                }
                [
                    position = 8064, 7400
                ]

                port Safety {
                    label = "Safety"
                    position = left:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7392, 7528
                ]

                port BMS {
                    label = "BMS"
                    position = right:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7856, 7544
                ]

                port "Reset BMS" {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7432, 7736
                    rotation = right
                ]

                port String {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8272, 7336
                ]

                junction Junction5 sp
                [
                    position = 7488, 7568
                ]

                junction Junction6 sp
                [
                    position = 7432, 7624
                ]

                junction Junction7 sp
                [
                    position = 7720, 7544
                ]

                junction Junction8 sp
                [
                    position = 8240, 7336
                ]

                connect Constant.out Comparator2.in2 as Connection43
                connect Sum2.out BMS as Connection46
                connect Constant1.out "Relational operator1.in1" as Connection58
                connect "Relational operator1.out" Junction5 as Connection65
                connect Junction5 Accumulator2.reset as Connection66
                connect reset.in Junction5 as Connection67
                connect "Error Reset.out" Junction6 as Connection68
                connect Junction6 "Relational operator1.in" as Connection69
                [
                    position = 0, 0
                ]
                connect "Reset BMS" Junction6 as Connection70
                connect Accumulator2.in Safety as Connection76
                [
                    position = 0, 0
                ]
                connect Comparator2.out Junction7 as Connection77
                connect Junction7 Sum2.in as Connection78
                connect String_Split.in Junction7 as Connection79
                [
                    position = 0, 0
                ]
                connect String_Join.out Junction8 as Connection83
                connect Junction8 String as Connection84
                [
                    position = 0, 0
                ]
                connect string_stat.in Junction8 as Connection85
                connect Accumulator2.out Comparator2.in1 as Connection94
                [
                    breakpoints = 7632, 7536
                ]
                connect String_Split.out String1.in as Connection95
                connect String1.out string1_input.in1 as Connection96
                connect String_ctrl_1.out string1_input.in as Connection97
                connect String_Join.in string1_input.out as Connection98
                connect String_Split.out1 String2.in as Connection99
                connect String2.out string2_input.in1 as Connection100
                connect String_ctrl_2.out string2_input.in as Connection101
                connect String_Join.in1 string2_input.out as Connection102

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Diagnostics Module</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">=========================</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Reads the status of the safety module</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">and sends the information to the BMS.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Also contains user inputs to reset the BMS</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">or manually enable/disable strings</p></body></html>"

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE
                }
            }
            [
                position = 7152, 8264
                size = 112, 64
            ]

            component Subsystem BMS {
                layout = dynamic
                component "core/SCADA Output" BMS_Status {
                    unit = ""
                }
                [
                    position = 8152, 8256
                ]

                component "core/Constant" precharge {
                    execution_rate = "execution_fast"
                    value = "precharge_length"
                }
                [
                    position = 7352, 8112
                ]

                component "core/Advanced C function" BMS_State_Machine {
                    arb_defs = "/*Begin code section*/

/*End code section*/"
                    global_variables = "real precharge_time;real precharge_counter;int error_reset_counter;int error_reset_length;int i;int bal_cell_sum;real string_number;real string_sum;real string_loop;"
                    init_fnc = "/*Begin code section*/
BMS_State = 0; /* init */
string_number = sizeof(string) / sizeof (string[0]);
string_number = string_number/2;

/* The cont_status variable stores the state and substate information for each string. The first position is the state */
/* for the cont state machine, all trailing positions are the states for the battery strings */
for (i=0; i < string_number+1; ++i)
{
    cont_status[i] = 0; /* all open */
}
precharge_counter = 0;
error_reset_counter = 0;
error_reset_length = 10;
cell_count = 10;
bal_cell_sum = 0;
string_sum = 0;
string_loop = 0;
/*End code section*/"
                    input_terminals = "int Diag;int bal_state;int Precharge_length;inherit Error_Reset;inherit current;inherit string;inherit cell_count;"
                    input_terminals_dimensions = "inherit;1;inherit;inherit;1;inherit;1"
                    input_terminals_feedthrough = "True;True;True;True;True;True;True"
                    input_terminals_show_labels = "True;True;True;True;True;True;True"
                    output_fnc = "/*Begin code section*/
switch (BMS_State) {
    case 0: /* init */
        if (Diag == 0)
        {
            BMS_State = 1; /* precharge */
            cont_status[0] = 1; /* precharge */
        }
        else 
        {
            BMS_State = 5; /* error */
            cont_status[0] =3; /* error */
            for (i =0; i < string_number; ++i)
            {
                if (string[i] >= 1)
                {

                    cont_status[i+1] = 1; /* open string i */
                }
            }
        }
        break;
    case 1: /* \'precharge\'*/
        if (Diag == 0 && precharge_counter*execution_rate > Precharge_length)
        {
            BMS_State = 2; /* discharging */
            cont_status[0] = 2; /* Normal */
        }
        else if (Diag == 0)
        {
            BMS_State = 1; /* precharge */
            cont_status[0] = 1; /* precharge */
        }
        else
        {
            BMS_State = 5; /* error */
            cont_status[0] =3; /* error */
            for (i =0; i < string_number; ++i)
            {
                if (string[i] >= 1)
                {
                    cont_status[i+1] = 1; /* open string i */
                }
            }
        }
        break;
    case 2: /* discharging */
        if (Diag >= 1)
        {
            BMS_State = 5; /* error */
            cont_status[0] =3; /* error */
            for (i =0; i < string_number; ++i)
            {
                if (string[i] >= 1)
                {
                    cont_status[i+1] = 1; /* open string i */
                }
            }
        }
        if (Error_Reset ==1) /* SCADA User Override */
        {
            BMS_State = 6; /* error reset/user input */
        }
        /* check balancer status */
        if (bal_state == 1)
        {
            for(i =0; i <string_number;++i)
            {
                string_loop += string[i];
            }
            if (string_loop >= 1)
                {
                    string_loop = 0;
                    break;
                }
            else
                {
                    BMS_State = 3;
                }
            string_loop = 0;
        }
        if (current < 0)
        {
            BMS_State = 4; /* Charging */
        }
        if ( current == 0)
        {
            BMS_State = 7; /* disconnected */
        }
        break;
    case 3: /* balancing */
        if (Diag >= 1)
        {
            BMS_State = 5; /* error */
            cont_status[0] =3; /* error */
            for (i =0; i < string_number; ++i)
            {
                if (string[i] >= 1)
                {
                    cont_status[i+1] = 1; /* open string i */
                }
            }
        }
        /* check bal_status to return to normal or if batteries are discharging */
        if (bal_state == 0 /*|| current > 0 Disabling for passive*/)
        {
            BMS_State = 2;
        }
        for (i =0; i< string_number; ++i)
        {
            if (string[i] >=1)
            {
                BMS_State = 2;
            }
        }
        if (Error_Reset ==1) /* SCADA User Override */
        {
            BMS_State = 6; /* error reset/user input */
        }
        break;
    case 4: /* charging */
        if (Diag >= 1)
        {
            BMS_State = 5; /* error */
            cont_status[0] =3; /* error */
            for (i =0; i < string_number; ++i)
            {
                if (string[i] >= 1)
                {
                    cont_status[i+1] = 1; /* open string i */
                }
            }
        }
            if (Error_Reset ==1) /* SCADA User Override */
        {
            BMS_State = 6; /* error reset/user input */
        }
        /* check balancer status */
        if (bal_state == 1)
        {
            for(i =0; i <string_number;++i)
            {
                string_loop += string[i];
            }
            if (string_loop >= 1)
                {
                    string_loop = 0;
                    break;
                }
            else
                {
                    BMS_State = 3;
                }
            string_loop = 0;
        }
        if (current > 0)
        {
            BMS_State = 2; /* discharging */
        }
        if ( current == 0)
        {
            BMS_State = 7; /* disconnected */
        }
        break;
    case 5: /*error */
        if (Error_Reset == 1)
        {
            BMS_State = 6; /* error reset */
            cont_status[0] = 2; /* discharging */
            for (i =0; i < string_number; ++i)
            {
                    cont_status[i+1] = 0; /* close string i */
            }
        }
        for (i =0; i < string_number; ++i)
            {
                if (string[i] >= 1)
                {
                    cont_status[i+1] = 1; /* open string i */
                }
            }
        break;
    case 6: /* error reset */
            if (error_reset_counter < error_reset_length)
            { 
                ++error_reset_counter;
            }
            else
            { 
                BMS_State = 1; /* precharge */
            }
            for (i =0; i < string_number; ++i)
            {
                cont_status[i+1] = string[i]; /* open string i */
            }
    case 7: /* disconnected */
        if (Error_Reset == 1)
        {
            BMS_State = 6; /* error reset */
            cont_status[0] = 2; /* discharging */
            for (i =0; i < string_number; ++i)
            {
                    cont_status[i+1] = 0; /* close string i */
            }
        }

}
/*End code section*/"
                    output_terminals = "int cont_status;int BMS_State;"
                    output_terminals_dimensions = "3;1"
                    output_terminals_feedthrough = "True;True"
                    output_terminals_show_labels = "True;True"
                    update_fnc = "/*Begin code section*/
if (BMS_State == 1)
{
    precharge_counter++;
}
/*End code section*/"
                }
                [
                    position = 7776, 8168
                    size = 240, 216
                ]

                component "core/Sum" Sum1 {
                    signs = "+"
                }
                [
                    position = 7448, 8216
                ]

                component "core/Probe" cont_status {
                }
                [
                    position = 8152, 7952
                ]

                component "core/Constant" Cell_Count {
                    execution_rate = "execution_fast"
                    value = "string_number*cell_string_number"
                }
                [
                    position = 7352, 8400
                ]

                component "core/Bus Join" "Bus Join1" {
                }
                [
                    position = 7528, 8280
                ]

                component "core/Unit Delay" "Unit Delay1" {
                }
                [
                    position = 7960, 8080
                    hide_name = True
                ]

                component "core/Unit Delay" "Unit Delay2" {
                }
                [
                    position = 7960, 8256
                    hide_name = True
                ]

                port Diag {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7352, 8000
                ]

                port Cont {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8152, 8080
                ]

                port Bal {
                    label = "Bal"
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7352, 8056
                ]

                port Reset {
                    label = "Reset"
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7352, 8168
                ]

                port "BMS Out" {
                    label = "BMS Out"
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8152, 8176
                ]

                port Currs {
                    label = "Currents"
                    position = bottom:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7352, 8216
                ]

                port String_status {
                    label = "string"
                    position = left:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7352, 8272
                ]

                junction Junction2 sp
                [
                    position = 8040, 8256
                ]

                junction Junction3 sp
                [
                    position = 8048, 8080
                ]

                junction Junction4 sp
                [
                    position = 7432, 8272
                ]

                connect BMS_State_Machine.Precharge_length precharge.out as Connection46
                [
                    position = 0, 0
                    breakpoints = 7584, 8144; 7584, 8144; 7576, 8144; 7576, 8112
                ]
                connect BMS_Status.in Junction2 as Connection48
                [
                    position = 0, 0
                ]
                connect Junction2 "BMS Out" as Connection49
                [
                    position = 0, 0
                    breakpoints = 8040, 8256; 8040, 8176
                ]
                connect Currs Sum1.in as Connection54
                connect Sum1.out BMS_State_Machine.current as Connection55
                [
                    position = 0, 0
                    breakpoints = 7576, 8216; 7576, 8192; 7600, 8192; 7600, 8192; 7640, 8192
                ]
                connect Junction3 Cont as Connection59
                [
                    position = 0, 0
                ]
                connect cont_status.in Junction3 as Connection60
                connect Cell_Count.out BMS_State_Machine.cell_count as Connection61
                [
                    breakpoints = 7608, 8312; 7608, 8240
                ]
                connect Reset BMS_State_Machine.Error_Reset as Connection62
                [
                    position = 0, 0
                    breakpoints = 7544, 8168; 7592, 8168
                ]
                connect BMS_State_Machine.bal_state Bal as Connection63
                [
                    breakpoints = 7600, 8120; 7600, 8064; 7600, 8064
                ]
                connect BMS_State_Machine.Diag Diag as Connection64
                [
                    breakpoints = 7624, 8096; 7624, 8000
                ]
                connect String_status Junction4 as Connection66
                connect Junction4 "Bus Join1.in" as Connection67
                connect "Bus Join1.in1" Junction4 as Connection68
                connect "Bus Join1.out" BMS_State_Machine.string as Connection69
                [
                    breakpoints = 7576, 8280; 7592, 8280; 7592, 8216
                ]
                connect BMS_State_Machine.cont_status "Unit Delay1.in" as Connection70
                connect "Unit Delay1.out" Junction3 as Connection71
                connect BMS_State_Machine.BMS_State "Unit Delay2.in" as Connection72
                connect "Unit Delay2.out" Junction2 as Connection73

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">BMS Module</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">=====================</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Contains the main state machine for </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">running the BMS. Directs the CONT module </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">to go through a precharge cycle </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">upon startup, or to open contactors </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">when an error occurs</p></body></html>"

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE
                }
            }
            [
                position = 7440, 8256
                size = 112, 80
            ]

            component Subsystem CONT {
                layout = dynamic
                component "core/C function" Contactor_State_Machine {
                    global_variables = "real string_number;int i;"
                    init_fnc = "/*Begin code section*/
string_number = ((sizeof (cont_status) / sizeof (cont_status[0]))/2) -1;



for (i =0; i < string_number+1; ++i)
{
cont_status[i] = 0;
}
Cont_1_Plus = 0;
for (i =0; i < string_number; ++i)
{
Cont_Minus[i] = 0;
}
Precharge_Contactor = 0;
/*End code section*/"
                    input_terminals = "int cont_status;"
                    input_terminals_dimensions = "inherit"
                    input_terminals_feedthrough = "True"
                    input_terminals_show_labels = "True"
                    output_fnc = "/*Begin code section*/
switch (cont_status[0]) {
    case 0: /* all open */
        Cont_1_Plus = 0;
        for (i =0; i < string_number; ++i)
        {
            Cont_Minus[i] = 0;
        }
        Precharge_Contactor = 0;
    break;
    case 1: /* precharge */
        Cont_1_Plus = 0;
        for (i =0; i < string_number; ++i)
        {
            Cont_Minus[i] = 1;
        }
        Precharge_Contactor = 1;
    break;
    case 2: /* Normal */
        Cont_1_Plus = 1;
        for (i =0; i < string_number; ++i)
        {
            if(cont_status[i+1] == 1)
            {
            Cont_Minus[i] = 0;
            }
            else
            {
            Cont_Minus[i] = 1;
            }
        }
        Precharge_Contactor = 0;
    break;
    case 3: /* error */
        Cont_1_Plus = 1;
        for (i =0; i < string_number; ++i)
        {
            if(cont_status[i+1] == 1)
            {
            Cont_Minus[i] = 0;
            }
        }
        Precharge_Contactor = 0;
    break;
    }
/*End code section*/"
                    output_terminals = "real Cont_1_Plus;real Cont_Minus;inherit Precharge_Contactor;"
                    output_terminals_dimensions = "1;2;1"
                    output_terminals_feedthrough = "True;True;True"
                    output_terminals_show_labels = "True;True;True"
                }
                [
                    position = 7664, 8000
                    size = 240, 216
                ]

                component "core/Bus Split" Minus_Split {
                }
                [
                    position = 7944, 7992
                ]

                component "core/Probe" cont_minus_probe {
                }
                [
                    position = 7968, 7904
                ]

                component "core/Bus Join" "Bus Join1" {
                }
                [
                    position = 7480, 8000
                ]

                component "core/Bus Split" "Bus Split1" {
                }
                [
                    position = 7840, 8000
                ]

                component "core/Termination" Termination1 {
                }
                [
                    position = 7944, 8080
                ]

                port cont_status {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7336, 7992
                ]

                port Cont1plus {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8024, 7808
                ]

                port Precharge {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8024, 8168
                ]

                port Cont1minus {
                    position = right:2
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8016, 7968
                ]

                port Cont2minus {
                    position = right:3
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8016, 8032
                ]

                junction Junction2 sp
                [
                    position = 7392, 7992
                ]

                junction Junction3 sp
                [
                    position = 7888, 7992
                ]

                connect Contactor_State_Machine.Cont_1_Plus Cont1plus as Connection2
                [
                    breakpoints = 7856, 7912; 7856, 7808
                ]
                connect Contactor_State_Machine.Precharge_Contactor Precharge as Connection4
                [
                    position = 0, 0
                    breakpoints = 7840, 8168; 7984, 8168
                ]
                connect "Bus Join1.in" Junction2 as Connection18
                connect Junction2 cont_status as Connection19
                connect "Bus Join1.in1" Junction2 as Connection20
                connect "Bus Join1.out" Contactor_State_Machine.cont_status as Connection21
                connect Contactor_State_Machine.Cont_Minus "Bus Split1.in" as Connection27
                connect Termination1.in "Bus Split1.out1" as Connection31
                connect Minus_Split.in Junction3 as Connection42
                connect Junction3 "Bus Split1.out" as Connection43
                connect cont_minus_probe.in Junction3 as Connection44
                connect Minus_Split.out Cont1minus as Connection45
                connect Minus_Split.out1 Cont2minus as Connection46

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Contactor Module</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">====================</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Contains the contactor state machine</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">which is responsible for opening and closing the </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">contactors for the strings, as well as the </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">precharge and main contactors</p></body></html>"

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE
                }
            }
            [
                position = 7752, 8272
                size = 136, 152
            ]

            component Subsystem BAL {
                layout = dynamic
                component "core/Constant" "bal tolerance" {
                    execution_rate = "exec_rate_slow"
                    value = "bal_tol_mv"
                }
                [
                    position = 7200, 7928
                ]

                component "core/Gain" Gain1 {
                    gain = "1000"
                }
                [
                    position = 7304, 7864
                ]

                component "core/Delay" Delay1 {
                    del_length = "1"
                }
                [
                    position = 7304, 8048
                ]

                component "core/Probe" Bal_out {
                }
                [
                    position = 8280, 7688
                ]

                component "core/Constant" bal_timer {
                    execution_rate = "exec_rate_slow"
                    value = "bal_timer"
                }
                [
                    position = 7200, 8120
                ]

                component "core/Probe" cell_min {
                    execution_rate = "exec_rate_slow"
                }
                [
                    position = 8088, 8152
                ]

                component "core/Probe" Bal_state {
                    execution_rate = "exec_rate_slow"
                }
                [
                    position = 8088, 8088
                ]

                component "core/Constant" cell_count {
                    execution_rate = "exec_rate_slow"
                    value = "string_number*cell_string_number"
                }
                [
                    position = 7200, 8192
                ]

                component "core/Sum" Sum1 {
                    signs = "+"
                }
                [
                    position = 7304, 8272
                ]

                component "core/Rate Transition" "Rate Transition1" {
                    execution_rate = "execution_slow"
                }
                [
                    position = 7400, 7864
                    size = 32, 32
                ]

                component "core/Rate Transition" "Rate Transition3" {
                    execution_rate = "execution_slow"
                }
                [
                    position = 7400, 8272
                    size = 32, 32
                ]

                component "core/Rate Transition" "Rate Transition2" {
                    execution_rate = "execution_slow"
                }
                [
                    position = 7400, 8048
                    size = 32, 32
                ]

                component "core/Rate Transition" "Rate Transition4" {
                    execution_rate = "execution_fast"
                }
                [
                    position = 8152, 7744
                    size = 32, 32
                ]

                component "core/Rate Transition" "Rate Transition5" {
                    execution_rate = "execution_fast"
                }
                [
                    position = 7992, 8016
                    size = 32, 32
                ]

                component "core/Termination" Termination1 {
                }
                [
                    position = 8088, 8224
                ]

                component Subsystem Direct_Bal {
                    layout = dynamic
                    component "core/Product" Product1 {
                        signs = "**"
                    }
                    [
                        position = 7496, 8088
                        rotation = left
                    ]

                    component "core/Sum" Sum2 {
                        signs = "1"
                    }
                    [
                        position = 7776, 8256
                        rotation = right
                    ]

                    component "core/Product" Product2 {
                        signs = "/**"
                    }
                    [
                        position = 7536, 8248
                        rotation = down
                    ]

                    component "core/Constant" Constant2 {
                        execution_rate = "exec_rate_slow"
                    }
                    [
                        position = 7704, 8216
                        rotation = down
                    ]

                    component "core/Limit" Limit1 {
                        lower_limit = "1"
                    }
                    [
                        position = 7688, 8344
                        rotation = down
                    ]

                    component "core/Product" Product3 {
                    }
                    [
                        position = 7872, 8144
                        rotation = down
                    ]

                    component "core/Sum" Sum3 {
                        signs = "+"
                    }
                    [
                        position = 7992, 8008
                        rotation = down
                    ]

                    component "core/Limit" Limit2 {
                        lower_limit = "1"
                    }
                    [
                        position = 7912, 8008
                        rotation = down
                    ]

                    component "core/Product" Product4 {
                        signs = "/***"
                    }
                    [
                        position = 7688, 7944
                        rotation = down
                    ]

                    component "core/Product" Product5 {
                    }
                    [
                        position = 7584, 7952
                        rotation = down
                    ]

                    component "core/Sum" Sum4 {
                    }
                    [
                        position = 7440, 7960
                        rotation = down
                    ]

                    component "core/Rate Transition" "Rate Transition1" {
                        execution_rate = "exec_rate_slow"
                    }
                    [
                        position = 8056, 7944
                        rotation = down
                        size = 32, 32
                    ]

                    component "core/Constant" Constant3 {
                        execution_rate = "exec_rate_slow"
                        value = "-1"
                    }
                    [
                        position = 7904, 7904
                        rotation = down
                    ]

                    component "core/Logical operator" "Logical operator1" {
                        operator = "NOT"
                    }
                    [
                        position = 7984, 8136
                        rotation = down
                    ]

                    component "core/Signal switch" "Signal switch1" {
                        threshold = "0"
                    }
                    [
                        position = 7160, 7832
                        rotation = down
                    ]

                    component "core/Product" Product6 {
                    }
                    [
                        position = 7280, 7968
                        rotation = down
                    ]

                    component "core/Constant" Constant5 {
                        execution_rate = "exec_rate_slow"
                        value = "-1"
                    }
                    [
                        position = 7352, 7992
                        rotation = down
                        hide_name = True
                    ]

                    component "core/Limit" Limit3 {
                        lower_limit = "-bal_curr_max"
                        upper_limit = "bal_curr_max"
                    }
                    [
                        position = 8144, 7944
                        rotation = down
                    ]

                    port BAL {
                        label = "Bal_in"
                        position = left:auto
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8072, 8136
                        rotation = down
                    ]

                    port Bal_out {
                        position = right:auto
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 6960, 7832
                        rotation = down
                    ]

                    port Imod {
                        label = "Imod"
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8216, 7944
                        rotation = down
                    ]

                    port Bal_con {
                        label = "bal_con"
                        position = left:auto
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8072, 8248
                        rotation = down
                    ]

                    tag Goto1 {
                        value = "imod"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7936, 7800
                        rotation = down
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From1 {
                        value = "imod"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7648, 8248
                        rotation = down
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From2 {
                        value = "imod"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7008, 7912
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto2 {
                        value = "bal_con"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7968, 8304
                        rotation = right
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From3 {
                        value = "bal_con"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7824, 7872
                        rotation = down
                        hide_name = True
                        size = 60, 20
                    ]

                    junction Junction8 sp
                    [
                        position = 7776, 8144
                    ]

                    junction Junction11 sp
                    [
                        position = 8040, 8072
                    ]

                    junction Junction12 sp
                    [
                        position = 7992, 7944
                    ]

                    junction Junction13 sp
                    [
                        position = 8040, 8136
                    ]

                    junction Junction14 sp
                    [
                        position = 7400, 7960
                    ]

                    junction Junction15 sp
                    [
                        position = 7968, 8248
                    ]

                    comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Converts the string of cells to be balanced to an </p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">array of currents proportional to the module current</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">  </p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">The constants are necessary for the array algebra</p></body></html> ENDCOMMENT 
                    [
                        position = 7336, 7616
                    ]

                    connect Product1.in Product2.out as Connection65
                    connect Constant2.out Product2.in2 as Connection76
                    connect Sum2.out Limit1.in as Connection86
                    connect Sum2.in Junction8 as Connection91
                    connect Junction8 Product1.in1 as Connection92
                    connect Product3.out Junction8 as Connection93
                    connect Sum3.out Limit2.in as Connection106
                    connect Limit2.out Product4.in as Connection107
                    connect Product4.out Product5.in1 as Connection110
                    connect Sum3.in Junction11 as Connection111
                    connect Product5.in Junction11 as Connection113
                    [
                        breakpoints = 7632, 7960; 7632, 8072; 8040, 8072; 8040, 8064
                    ]
                    connect Product1.out Sum4.in as Connection115
                    connect Product5.out Sum4.in1 as Connection116
                    [
                        breakpoints = 7480, 7952
                    ]
                    connect From1 Product2.in1 as Connection124
                    connect Product2.in Limit1.out as Connection125
                    [
                        breakpoints = 7576, 8344
                    ]
                    connect Constant3.out Product4.in2 as Connection136
                    [
                        breakpoints = 7752, 7904; 7752, 7936
                    ]
                    connect "Rate Transition1.out" Junction12 as Connection127
                    connect Junction12 Product4.in1 as Connection128
                    connect Goto1 Junction12 as Connection129
                    connect Junction11 Junction13 as Connection139
                    [
                        breakpoints = 8040, 8072
                    ]
                    connect Junction13 BAL as Connection140
                    [
                        breakpoints = 8040, 8136
                    ]
                    connect Product3.in1 "Logical operator1.out" as Connection141
                    connect "Logical operator1.in" Junction13 as Connection142
                    connect Constant5.out Product6.in as Connection147
                    connect "Signal switch1.in1" Junction14 as Connection148
                    connect Junction14 Sum4.out as Connection149
                    connect Product6.in1 Junction14 as Connection150
                    connect Product6.out "Signal switch1.in" as Connection151
                    connect "Signal switch1.out" Bal_out as Connection152
                    connect From2 "Signal switch1.in2" as Connection153
                    connect Product3.in Junction15 as Connection154
                    [
                        breakpoints = 7928, 8152; 7928, 8248
                    ]
                    connect Junction15 Bal_con as Connection155
                    [
                        breakpoints = 7976, 8248
                    ]
                    connect Goto2 Junction15 as Connection156
                    connect From3 Product4.in3 as Connection157
                    connect "Rate Transition1.in" Limit3.out as Connection158
                    connect Limit3.in Imod as Connection159

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The Direct Balance Module calculates </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">the balancing current for the pack module,</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">assuming complete cell to cell charging </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">capabilities</p></body></html>"

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7928, 7600
                    size = 112, 80
                ]

                component "core/Signal switch" "Signal switch1" {
                    execution_rate = "exec_rate_slow"
                }
                [
                    position = 8056, 7744
                ]

                component "core/Constant" bal_circuit {
                    execution_rate = "exec_rate_slow"
                    signal_type = "int"
                    value = "0"
                }
                [
                    position = 8056, 7544
                    rotation = right
                ]

                component "core/Probe" passive_bal {
                }
                [
                    position = 7768, 7760
                    rotation = down
                ]

                component "core/Probe" direct_bal {
                }
                [
                    position = 8096, 7456
                ]

                component "core/Advanced C function" Balance_State_Machine {
                    arb_defs = "/*Begin code section*/

/*End code section*/"
                    execution_rate = "execution_slow"
                    global_variables = "int bal_counter;real bal_sum;int i;int k;real cell_tolerance;real bal_last_state;"
                    init_fnc = "/*Begin code section*/
if ( bal_enable == 0)
{
    bal_state = 7; /* disabled */
}
else
{
    bal_state = 0; /* normal */
    cell_min = cell_volts[0];  
    for (i = 0; i < cell_count; ++i)
        {
            bal_cell[i] = 0;
        }
}
cell_count = 10;
bal_counter = 0;
bal_sum = 0;
bal_con = 0;
bal_last_state = 0;
/*End code section*/"
                    input_terminals = "real cell_volts;inherit bal_tolerance;inherit bal_enable;inherit bms_state;real bal_timer;inherit cell_count;inherit string;"
                    input_terminals_dimensions = "inherit;1;inherit;inherit;inherit;inherit;1"
                    input_terminals_feedthrough = "True;True;True;True;True;True;True"
                    input_terminals_show_labels = "False;False;False;False;False;False;False"
                    output_fnc = "/*Begin code section*/
switch (bal_state)
{ 
    case 0: /* normal */
    {
        /* check if bal timer is exceeded*/
        if (bal_counter * execution_rate > bal_timer)
        {
            bal_counter = 0; /* reset the counter */
        /* Determine cell_min */
        cell_min = cell_volts[0];
        for (i = 0; i < cell_count; ++i)
            {
                if (cell_volts[i] < cell_min)
                {
                    cell_min = cell_volts[i];
                }
            }
        /* compare each cell to cell_min and the tolerance */
        cell_tolerance = cell_min + bal_tolerance;
        cell_tol_out[0] = cell_tolerance;
        for (i = 0; i < cell_count; ++i)
            {
                if (cell_volts[i] > cell_tolerance)
                {
                    bal_state = 1; /* balancing*/
                }
            }
        bal_last_state = 0;
        }
        break;
    }
    case 1: /*balancing */
    {
        /* repeat the above algorithm to update which cells need to be balanced, if none return to normal */
        /* check if bal timer is exceeded*/
        if (bal_counter * execution_rate > bal_timer)
        {
            bal_counter = 0; /* reset the counter */
        /* Determine cell_min */
        for (i = 0; i < cell_count; ++i)
            {
                cell_min = cell_volts[0];
                if (cell_volts[i] < cell_min)
                {
                    cell_min = cell_volts[i];
                }
            }
        /* compare each cell to cell_min and the tolerance */
        cell_tolerance = cell_min + bal_tolerance;
        cell_tol_out[0] = cell_tolerance;
        for (i = 0; i < cell_count; ++i)
            {
                if (cell_volts[i] > cell_tolerance)
                {
                    /* balancing */
                    if (bms_state == 3)
                    {
                        if(string > 0)
                        {
                            break;
                        }
                        else
                        {
                        bal_con = 1;
                        bal_cell[i] = 1;
                        bal_sum++;
                        }
                    }
                }
                else
                {
                    bal_cell[i] =0;
                }
            }
                if (bal_sum == 0)
                {
                    bal_state =0;
                    bal_con = 0;
                }
        bal_sum =0;
        if (bal_state == 0)
        {
            for (k =0; k< cell_count; ++k)
                {
                    bal_cell[k] =0;
                }
        }
        if (bal_last_state == 1 && bms_state == 3 || bms_state == 5)
        {
            for (k = 0; k < cell_count; ++k)
            {
                bal_cell[k] = 0;
            }
        bal_state = 0;
        bal_con =0;
        }
        bal_last_state =1;
        }
        break;
    }
    case 5: /* error */
    {
        bal_con = 0;
        if (bms_state == 6)
        {
            bal_state = 0; /* normal */
            bal_con = 0;
        }
        else
        {
            for (i = 0; i < cell_count; ++i)
            {
                bal_cell[i] = 0;
            }
        bal_last_state = 5;
        }
        break;
    }
    case 7: /* disabled */
    {
        for (i = 0; i < cell_count; ++i)
        {
            bal_cell[i] = 0;
        }
    bal_last_state =7;
    }
}
/*End code section*/"
                    output_terminals = "real bal_cell;inherit bal_con;int bal_state;real cell_min;real cell_tol_out;"
                    output_terminals_dimensions = "10;1;1;1;10"
                    output_terminals_feedthrough = "True;True;True;True;True"
                    output_terminals_show_labels = "True;False;False;False;False"
                    update_fnc = "/*Begin code section*/
if (bms_state == 5)
{
    bal_state = 5; /* error */
    for (i = 0; i < cell_count; ++i)
        {
            bal_cell[i] = 0;
        }
    bal_con = 0;
}
if (bal_state == 0 || bal_state == 1)
{
    bal_counter++;
}
/*End code section*/"
                }
                [
                    position = 7704, 8048
                    size = 128, 128
                ]

                port Volts {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7200, 7864
                ]

                port "Bal to BMS" {
                    label = "BAL"
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8088, 8016
                ]

                port bal_enable {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7200, 7992
                ]

                port "Bal Out" {
                    label = "Bal Out"
                    position = right:3
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8280, 7768
                ]

                port BMS_in {
                    label = "BMS"
                    position = right:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7200, 8048
                ]

                port String {
                    position = bottom:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7200, 8272
                    hide_name = True
                ]

                port Imod {
                    label = "Imod"
                    position = bottom:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7792, 7584
                    hide_name = True
                ]

                junction Junction4 sp
                [
                    position = 8248, 7744
                ]

                junction Junction11 sp
                [
                    position = 7824, 7760
                ]

                junction Junction12 sp
                [
                    position = 8024, 7600
                ]

                junction Junction13 sp
                [
                    position = 7912, 8048
                ]

                junction Junction14 sp
                [
                    position = 7824, 7760
                ]

                connect Volts Gain1.in as Connection41
                connect BMS_in Delay1.in as Connection55
                connect "Bal Out" Junction4 as Connection57
                connect Bal_out.in Junction4 as Connection59
                connect String Sum1.in as Connection105
                connect Gain1.out "Rate Transition1.in" as Connection107
                connect Sum1.out "Rate Transition3.in" as Connection109
                connect Delay1.out "Rate Transition2.in" as Connection111
                connect Junction4 "Rate Transition4.out" as Connection113
                [
                    position = 0, 0
                ]
                connect "Rate Transition5.out" "Bal to BMS" as Connection116
                connect Imod Direct_Bal.Imod as Connection121
                connect "Signal switch1.out" "Rate Transition4.in" as Connection123
                connect Direct_Bal.BAL Junction11 as Connection128
                [
                    breakpoints = 7872, 7600; 7824, 7600; 7824, 7760
                ]
                connect passive_bal.in Junction11 as Connection130
                connect Direct_Bal.Bal_out Junction12 as Connection131
                connect Junction12 "Signal switch1.in" as Connection132
                connect bal_circuit.out "Signal switch1.in2" as Connection127
                connect direct_bal.in Junction12 as Connection133
                connect "Rate Transition1.out" Balance_State_Machine.cell_volts as Connection137
                connect "bal tolerance.out" Balance_State_Machine.bal_tolerance as Connection138
                [
                    breakpoints = 7592, 7944; 7592, 8016
                ]
                connect bal_enable Balance_State_Machine.bal_enable as Connection139
                [
                    breakpoints = 7568, 8008; 7568, 8032
                ]
                connect "Rate Transition2.out" Balance_State_Machine.bms_state as Connection140
                connect bal_timer.out Balance_State_Machine.bal_timer as Connection141
                [
                    breakpoints = 7568, 8120; 7568, 8064
                ]
                connect cell_count.out Balance_State_Machine.cell_count as Connection142
                [
                    breakpoints = 7600, 8192; 7600, 8080
                ]
                connect "Rate Transition3.out" Balance_State_Machine.string as Connection143
                connect Balance_State_Machine.cell_tol_out Termination1.in as Connection144
                [
                    breakpoints = 7824, 8080; 7824, 8224; 8056, 8224
                ]
                connect Balance_State_Machine.cell_min cell_min.in as Connection145
                [
                    breakpoints = 7856, 8064; 7856, 8152
                ]
                connect "Rate Transition5.in" Junction13 as Connection146
                [
                    breakpoints = 7912, 8016
                ]
                connect Junction13 Bal_state.in as Connection147
                [
                    breakpoints = 7912, 8048; 7912, 8048
                ]
                connect Balance_State_Machine.bal_state Junction13 as Connection148
                connect "Signal switch1.in1" Junction14 as Connection149
                [
                    breakpoints = 8024, 7760; 7912, 7760
                ]
                connect Junction14 Junction11 as Connection150
                connect Balance_State_Machine.bal_cell Junction14 as Connection151
                [
                    breakpoints = 7824, 8016; 7824, 7760
                ]
                connect Balance_State_Machine.bal_con Direct_Bal.Bal_con as Connection156
                [
                    breakpoints = 7856, 8032; 7856, 7896; 7856, 7616
                ]

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Balance Module</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">=======================</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Contains the state machine for determining</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">which cells need to be balanced by comparing</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">voltages within the battery system.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Sends this info to the STRING module</p></body></html>"

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE
                }
            }
            [
                position = 7160, 7856
                size = 136, 160
            ]

            component "core/Constant" "bal enable" {
                execution_rate = "execution_slow"
                signal_type = "int"
                value = "bal_enable"
            }
            [
                position = 6968, 7920
            ]

            component Subsystem STRING {
                layout = dynamic
                component "core/Bus Split" "Bus Split1" {
                    outputs = "6"
                }
                [
                    position = 7600, 8304
                    rotation = right
                    scale = -1, 1
                ]

                component "core/Bus Join" JoinCell1 {
                }
                [
                    position = 8200, 8352
                ]

                component "core/SCADA Input" "Temp String 1" {
                    execution_rate = "exec_rate_fast"
                    unit = ""
                }
                [
                    position = 7600, 8200
                ]

                component "core/Bus Join" JoinCell2 {
                }
                [
                    position = 8200, 8496
                ]

                component "core/Bus Join" JoinCell3 {
                }
                [
                    position = 8200, 8648
                ]

                component "core/Bus Join" JoinCell4 {
                }
                [
                    position = 8200, 8800
                ]

                component "core/Bus Join" JoinCell5 {
                }
                [
                    position = 8200, 8952
                ]

                component "core/Bus Join" JoinCell6 {
                }
                [
                    position = 8200, 9104
                ]

                component "core/Bus Join" "String Join1" {
                    inputs = "4"
                }
                [
                    position = 8400, 8304
                    rotation = left
                ]

                component "core/Bus Join" "String Join2" {
                    inputs = "4"
                }
                [
                    position = 8400, 8752
                    rotation = left
                ]

                port BAL {
                    position = right:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7400, 8248
                ]

                port String1 {
                    position = left:2
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8648, 8208
                ]

                port Cont1minus {
                    position = right:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8352, 7904
                    rotation = right
                ]

                port String2 {
                    position = left:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8648, 8656
                ]

                port Cont2minus {
                    position = right:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8304, 7904
                    rotation = right
                ]

                junction Junction1 sp
                [
                    position = 7696, 8200
                ]

                connect BAL "Bus Split1.in" as Connection1
                connect JoinCell1.in1 "Bus Split1.out" as Connection2
                connect "Temp String 1.out" Junction1 as Connection3
                connect Junction1 JoinCell1.in as Connection4
                connect JoinCell2.in1 "Bus Split1.out1" as Connection5
                connect Junction1 JoinCell2.in as Connection6
                connect JoinCell3.in1 "Bus Split1.out2" as Connection7
                connect Junction1 JoinCell3.in as Connection8
                connect JoinCell4.in1 "Bus Split1.out3" as Connection9
                connect Junction1 JoinCell4.in as Connection10
                connect JoinCell5.in1 "Bus Split1.out4" as Connection11
                connect Junction1 JoinCell5.in as Connection12
                connect JoinCell6.in1 "Bus Split1.out5" as Connection13
                connect Junction1 JoinCell6.in as Connection14
                connect "String Join1.out" String1 as Connection15
                connect Cont1minus "String Join1.in" as Connection16
                connect JoinCell1.out "String Join1.in1" as Connection17
                connect JoinCell2.out "String Join1.in2" as Connection18
                connect JoinCell3.out "String Join1.in3" as Connection19
                connect "String Join2.out" String2 as Connection20
                connect Cont2minus "String Join2.in" as Connection21
                connect JoinCell4.out "String Join2.in1" as Connection22
                connect JoinCell5.out "String Join2.in2" as Connection23
                connect JoinCell6.out "String Join2.in3" as Connection24

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">String Module<br></br>==========================<br></br>Dynamically splits the vector from </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">the balancing module and the CONT module</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">into arrays that are then sent to the </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">respective Battery Strings</p></body></html>"

                    n {
                        label = "number"
                        widget = edit
                        type = generic
                        default_value = "6"

                        CODE property_value_changed
                            from typhoon.api.schematic_editor import const
                            from typhoon.api.schematic_editor.const import ITEM_PORT
                            
                            
                            if new_value != old_value:
                                # Do this only if the new value is different from old value
                                #Handles for the function
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                parent_handle = mdl.get_parent(mdl.get_parent(container_handle))
                                STRING_Handle = mdl.get_item(name="STRING", parent = parent_handle)
                                BMS_Handle = mdl.get_item("BMS")
                                string_number = mdl.get_property_value(mdl.prop(BMS_Handle,"string_number"))
                                old_string_number = mdl.get_property_value(mdl.prop(STRING_Handle,"old_string"))
                                CONT_Handle = mdl.get_item(parent = BMS_Handle,name = "CONT")
                                BAL_Handle = mdl.get_item(parent = BMS_Handle, name = "BAL")
                            
                            
                                # remove connections
                                connections = mdl.get_items(parent = component_handle, item_type = const.ITEM_CONNECTION)
                                for connection in connections:
                                    if connection:
                                        mdl.delete_item(connection)
                            
                                # remove old ports in Slave System
                                old_ports = mdl.get_items(parent= component_handle,item_type = const.ITEM_PORT)
                                for port_temp in old_ports:
                                    if port_temp:
                                        mdl.delete_item(port_temp)
                            
                                # remove old joins
                                joins = mdl.get_items(parent=component_handle, item_type = const.ITEM_COMPONENT)
                                if len(joins) > 0:
                                    for bus_join in joins:
                                        mdl.delete_item(bus_join)
                                # remove old junctions
                                junctions = mdl.get_items(parent = component_handle, item_type = const.ITEM_JUNCTION)
                                for junction in junctions:
                                    if junction:
                                        mdl.delete_item(junction)
                                
                                # remove old ports in BMS
                                bms_old_ports = mdl.get_items(parent = BMS_Handle, item_type = const.ITEM_PORT)
                                for i in range(int(old_string_number)):
                                    string_out_temp = mdl.get_item(parent = BMS_Handle,name = "StringOut" + str(i+1),item_type = const.ITEM_PORT)
                                    if string_out_temp:
                                        mdl.delete_item(string_out_temp)
                            
                                # create Split
                                bus_split = mdl.create_component(type_name = 'Bus Split',
                                                             parent=component_handle,
                                                             name="Bus Split1",
                                                             position = (7600, 8300),
                                                             rotation = const.ROTATION_RIGHT,
                                                             flip = const.FLIP_HORIZONTAL
                                                             )
                            
                                mdl.set_property_value(mdl.prop(bus_split, "outputs"), new_value)
                            
                            
                                
                                # create BAL in port
                                bal_port = mdl.create_port(name = 'BAL', 
                                                            parent = component_handle, 
                                                            kind = const.KIND_SP,
                                                            rotation = 'up',
                                                            direction = const.DIRECTION_IN,
                                                            terminal_position = ('right',1),
                                                            position = (7400,8250))
                                
                                # connect port and split
                                mdl.create_connection(bal_port,mdl.term(bus_split,"in"))
                                
                                #init component lists
                                STRING_Out_Port = []
                                bus_join = []
                                BMS_Port = []
                                tag_goto = []
                                tag_from = []
                                CONT_Port = []
                                string_join = []
                                
                                # Cell Number Loop
                                for i in range(int(new_value)) :
                                    #info(i)
                                    # create bus joins
                                    bus_join.append(mdl.create_component(type_name = 'Bus Join',
                                                             parent=component_handle,
                                                             name="JoinCell"+str(i+1),
                                                             position = (8200, 8350+i*150),
                                                             rotation = const.ROTATION_UP)
                                                             )
                                    
                                    # Create Scada Temp Input Junctions
                                    if int(i) == 0:
                                        Scada_temp = mdl.create_component(type_name = 'SCADA Input',
                                                                parent = component_handle,
                                                                name = 'Temp String 1',
                                                                position = (7600, 8200),
                                                                rotation = "up"
                                                                )
                                                                
                                        mdl.set_property_value(mdl.prop(Scada_temp,"execution_rate"),"exec_rate_fast")
                                    # Create connections
                                    # bus split to bus join
                                    if int(i) == 0:
                                        mdl.create_connection(mdl.term(bus_join[i],"in1"), mdl.term(bus_split, "out"))
                                    else :
                                        mdl.create_connection(mdl.term(bus_join[i],"in1"), mdl.term(bus_split, "out"+str(i)))
                                        
                                    #scada to bus joins
                                    if int(i) == 0:
                                        junction = mdl.create_junction(name = i,
                                                                parent = component_handle,
                                                                kind = const.KIND_SP,
                                                                position = (7700,8200+i*150))
                                        mdl.create_connection(mdl.term(Scada_temp,"out"),junction)
                                        mdl.create_connection(junction,mdl.term(bus_join[i],"in"))
                                    else:
                                        mdl.create_connection(junction,mdl.term(bus_join[i],"in"))
                                        
                                        
                            
                                # String Number Loop
                                mdl.create_connection(mdl.term(BAL_Handle,"Bal Out"),mdl.term(STRING_Handle,"BAL"))
                                for i in range(int(string_number)):
                                    # create ports
                                    STRING_Out_Port.append(mdl.create_port(parent=component_handle, # string Number
                                                             name="String"+str(i+1),
                                                             kind=const.KIND_SP,
                                                             direction=const.DIRECTION_OUT,
                                                             terminal_position = ('left',string_number-i),
                                                             position = (8650, 8205+i*75*new_value),
                                                             rotation = "up")
                                                             )
                                    
                                    BMS_Port.append(mdl.create_port(parent = parent_handle, # string number
                                                             name = "StringOut"+str(i+1),
                                                             kind = const.KIND_SP,
                                                             direction=const.DIRECTION_OUT,
                                                             terminal_position = ('right',str(i+1)),
                                                             position = (8300, 7750+i*150),
                                                             rotation = "up")
                                                             )
                                    #info(i)
                                    CONT_Port.append(mdl.create_port(parent = component_handle, # string number
                                                                    name = "Cont" + str(i+1) + "minus",
                                                                    kind = const.KIND_SP,
                                                                    direction = const.DIRECTION_IN,
                                                                    terminal_position = ('right',1+i),
                                                                    position = (8350-50*i,7900),
                                                                    rotation = "right"))
                            
                                    # Create Bus Joins
                                    string_join.append(mdl.create_component(type_name = 'Bus Join',
                                                                    parent = component_handle,
                                                                    rotation = const.ROTATION_LEFT,
                                                                    name = 'String Join' + str(i+1),
                                                                    position = (8400,8300+i*75*new_value)
                                                                    ))
                            
                                    mdl.set_property_value(mdl.prop(string_join[i],"inputs"),int(int(new_value)/int(string_number)+1))
                            
                                   # Connections
                                    mdl.create_connection(mdl.term(string_join[i],"out"),STRING_Out_Port[i])
                                    mdl.create_connection(CONT_Port[i],mdl.term(string_join[i],"in"))
                                    mdl.create_connection(mdl.term(STRING_Handle,"String"+str(i+1)),BMS_Port[i])
                                    #info("STRING CODE Running")
                                    mdl.create_connection(mdl.term(STRING_Handle,"Cont" + str(1+i) + "minus"),mdl.term(CONT_Handle,"Cont" + str(1+i) + "minus")) # need to remove gotos for CONT. In the String Number code. Done
                            
                                    # JoinCell to String Join
                                    cells_per_string = new_value/string_number
                                    for cell in range(int(cells_per_string)):
                                        mdl.create_connection(mdl.term(bus_join[i*int(cells_per_string)+cell],"out"),mdl.term(string_join[i],"in"+str(cell+1)))
                        ENDCODE
                    }

                    old_string {
                        widget = edit
                        type = generic
                        default_value = "2"
                        nonvisible
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE
                }
            }
            [
                position = 8000, 7832
                rotation = down
                size = 144, 208
            ]

            component Subsystem SOC {
                layout = dynamic
                component "core/Advanced C function" SOC_Coulomb {
                    arb_defs = "/*Begin code section*/

/*End code section*/"
                    execution_rate = "execution_slow"
                    global_variables = "int i;real energy;"
                    init_fnc = "/*Begin code section*/
energy = 0;
coulomb_eff_counter = 0;

for (i = 0; i < cell_count; ++i)
{
    SOC_Coulomb[i] = SOC_initial_CC/100; /* Assume that Model always starts at 100% SOC for now */
    precharge_voltage[i] = 0;
    coulomb_eff[i] = 1;
    internal_resistance[i] = 0;
    ir_calc_check[i] = 0;
    current_pcv[i] = 0;
}
/*End code section*/"
                    input_terminals = "real currents;real cell_count;inherit Capacity;int BMS_State;real cell_volt;real coulomb_eff_timer;inherit SOC_initial_CC;"
                    input_terminals_dimensions = "inherit;1;inherit;1;inherit;1;inherit"
                    input_terminals_feedthrough = "True;True;True;True;True;True;True"
                    input_terminals_show_labels = "True;True;True;True;True;True;True"
                    output_fnc = "/*Begin code section*/
switch (BMS_State)
{
case 0: /* disabled during init and reset states */
case 6:
{
    break;
}
case 1: /* estimate OCV w/ Pre charge Voltage */
{
    for (i = 0; i < cell_count; ++i )
    {
        if (coulomb_eff_counter*execution_rate <= coulomb_eff_timer)
            {
            precharge_voltage[i] = cell_volt[i];
            current_pcv[i] = currents[i];
            coulomb_eff_out = coulomb_eff_counter*execution_rate;
            }
        if(currents[i] > 0) /*discharge */
        {
            energy = currents[i]*execution_rate/3600; /* convert current to amp hrs */
            SOC_Coulomb[i] -= energy/Capacity;
            if (SOC_Coulomb[i] < 0) /*min SOC */
            {
            SOC_Coulomb[i] = 0;
            }
        }
        if (currents [i] <= 0)
        {
            energy = currents[i]*execution_rate*coulomb_eff[i]/3600; /* convert current to amp hrs, efficiency of 1 */
            SOC_Coulomb[i] -= energy/Capacity;
            if (SOC_Coulomb[i] > 1.1) /* max SOC */
            {
                SOC_Coulomb[i] = 1.1;
            }
        }
    }
    
break;
}
case 2: /* discharging */
case 3: /* balancing */
{
    for (i = 0; i < cell_count; ++i)
    {
        if (coulomb_eff[i] == 1 && coulomb_eff_counter*execution_rate >= coulomb_eff_timer)
        {
            // Check to prevent division by zero:
            if(currents[i]>0 && currents[i]<0.01)
            {
                internal_resistance[i] = (precharge_voltage[i]-cell_volt[i])/0.01;
            }
            else if(currents[i]<0 && currents[i]>-0.01)
            {
                internal_resistance[i] = (precharge_voltage[i]-cell_volt[i])/-0.01;
            }
            else
                internal_resistance[i] = (precharge_voltage[i]-cell_volt[i])/currents[i];
            coulomb_eff[i] = (1/(1+internal_resistance[i]));
        }
        else if (coulomb_eff[i] > 0.991 && coulomb_eff_counter*execution_rate >= coulomb_eff_timer)
        {
            internal_resistance[i] = (precharge_voltage[i] - cell_volt[i])/(currents[i]-current_pcv[i]);
            coulomb_eff[i] = (1/(1+internal_resistance[i]));
        }
        else if (coulomb_eff[i] < 0.95)
        {
            coulomb_eff[i] = 1;
        }
        energy = currents[i]*execution_rate/3600; /* convert current to amp hrs */
        SOC_Coulomb[i] -= energy/Capacity;
        if (SOC_Coulomb[i] < 0) /*min SOC */
        {
            SOC_Coulomb[i] = 0;
        }
    }
break;
}
case 4: /* charging */
{
    for (i = 0;i < cell_count; ++i)
    {
        if (coulomb_eff[i] == 1 && coulomb_eff_counter*execution_rate >= coulomb_eff_timer)
        {
            internal_resistance[i] = (precharge_voltage[i] - cell_volt[i])/(currents[i]-current_pcv[i]);
            coulomb_eff[i] = (1/(1+internal_resistance[i]));
        }
        else if (coulomb_eff[i] > 0.991 && coulomb_eff_counter*execution_rate >= coulomb_eff_timer)
        {
            internal_resistance[i] = (precharge_voltage[i] - cell_volt[i])/(currents[i]-current_pcv[i]);
            coulomb_eff[i] = (1/(1+internal_resistance[i]));
        }
        else if (coulomb_eff[i] < 0.95)
        {
            coulomb_eff[i] = 1;
        }
        energy = currents[i]*execution_rate*coulomb_eff[i]/3600; /* convert current to amp hrs, efficiency of 1 */
        SOC_Coulomb[i] -= energy/Capacity;
        if (SOC_Coulomb[i] >= 1.1) /* max SOC */
        {
            SOC_Coulomb[i] = 1.1;
        }
    }
    break;
}
case 5: /* error state */
{
    for (i = 0; i < cell_count; ++i)
    {
        if (coulomb_eff[i] == 1 && coulomb_eff_counter*execution_rate >= coulomb_eff_timer)
        {
            internal_resistance[i] = (precharge_voltage[i] - cell_volt[i])/(currents[i]-current_pcv[i]);
            coulomb_eff[i] = (1/(1+internal_resistance[i]));
        }
        else if (coulomb_eff[i] > 0.991 && coulomb_eff_counter*execution_rate >= coulomb_eff_timer)
        {
            internal_resistance[i] = (precharge_voltage[i] - cell_volt[i])/(currents[i]-current_pcv[i]);
            coulomb_eff[i] = (1/(1+internal_resistance[i]));
        }
        else if (coulomb_eff[i] < 0.95)
        {
            coulomb_eff[i] = 1;
        }
        if(currents[i] > 0) /*discharge */
        {
            energy = currents[i]*execution_rate/3600; /* convert current to amp hrs */
            SOC_Coulomb[i] -= energy/Capacity;
            if (SOC_Coulomb[i] < 0) /*min SOC */
            {
            SOC_Coulomb[i] = 0;
            }
        }
        if (currents [i] <= 0)
        {
            energy = currents[i]*execution_rate*coulomb_eff[i]/3600; /* convert current to amp hrs, efficiency of 1 */
            SOC_Coulomb[i] -= energy/Capacity;
            if (SOC_Coulomb[i] > 1.1) /* max SOC */
            {
                SOC_Coulomb[i] = 1.1;
            }
        }
    }
break;
}
}
/*End code section*/"
                    output_terminals = "real SOC_Coulomb;real internal_resistance;real precharge_voltage;real coulomb_eff;inherit ir_calc_check;inherit current_pcv;real coulomb_eff_out;uint coulomb_eff_counter;"
                    output_terminals_dimensions = "10;10;10;10;10;10;1;1"
                    output_terminals_feedthrough = "True;True;True;True;True;True;True;True"
                    output_terminals_show_labels = "True;True;True;True;True;True;True;True"
                    update_fnc = "/*Begin code section*/
if (BMS_State == 1 || BMS_State ==2 || BMS_State == 3 || BMS_State == 4)
{
    if (coulomb_eff_counter < coulomb_eff_timer/execution_rate*3)
    {
        coulomb_eff_counter++;
    }
}
/*End code section*/"
                }
                [
                    position = 7432, 8456
                    size = 280, 368
                ]

                component "core/Constant" cell_count {
                    execution_rate = "exec_rate_slow"
                    value = "string_number*cell_string_number"
                }
                [
                    position = 6784, 8360
                ]

                component "core/Constant" capacity {
                    execution_rate = "execution_slow"
                    value = "cell_capacity"
                }
                [
                    position = 6784, 8408
                ]

                component "core/Probe" "SOC CC" {
                }
                [
                    position = 7808, 8280
                ]

                component "core/Termination" Termination3 {
                }
                [
                    position = 7808, 8504
                    hide_name = True
                ]

                component "core/Termination" Termination4 {
                }
                [
                    position = 7808, 8336
                    hide_name = True
                ]

                component "core/Rate Transition" "Rate Transition1" {
                    execution_rate = "execution_slow"
                }
                [
                    position = 6896, 8456
                    hide_name = True
                    size = 32, 32
                ]

                component "core/Rate Transition" "Rate Transition2" {
                    execution_rate = "execution_slow"
                }
                [
                    position = 6896, 8504
                    hide_name = True
                    size = 32, 32
                ]

                component "core/Rate Transition" "Rate Transition3" {
                    execution_rate = "execution_slow"
                }
                [
                    position = 6896, 8312
                    hide_name = True
                    size = 32, 32
                ]

                component "core/Termination" Termination5 {
                }
                [
                    position = 7808, 8584
                    hide_name = True
                ]

                component "core/Constant" coulomb_eff_timer {
                    execution_rate = "execution_slow"
                    value = "15"
                }
                [
                    position = 6784, 8552
                ]

                component "core/Probe" coulomb_eff {
                }
                [
                    position = 7808, 8432
                ]

                component "core/Probe" pcv {
                }
                [
                    position = 7808, 8376
                ]

                component "core/Termination" Termination6 {
                }
                [
                    position = 7808, 8544
                    hide_name = True
                ]

                component "core/Termination" Termination7 {
                }
                [
                    position = 7808, 8632
                    hide_name = True
                ]

                component "core/Constant" SOC_initial {
                    execution_rate = "execution_slow"
                    value = "SOC_initial"
                }
                [
                    position = 6784, 8600
                ]

                port "Cell V" {
                    label = "Cell V"
                    position = left:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6784, 8504
                ]

                port Current {
                    label = "Current"
                    position = left:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6784, 8312
                ]

                port BMS_State {
                    label = "BMS"
                    position = top:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6784, 8456
                ]

                connect BMS_State "Rate Transition1.in" as Connection29
                connect "Cell V" "Rate Transition2.in" as Connection31
                connect Current "Rate Transition3.in" as Connection33
                connect SOC_Coulomb.currents "Rate Transition3.out" as Connection60
                connect SOC_Coulomb.cell_count cell_count.out as Connection61
                connect SOC_Coulomb.Capacity capacity.out as Connection62
                connect SOC_Coulomb.BMS_State "Rate Transition1.out" as Connection63
                connect SOC_Coulomb.cell_volt "Rate Transition2.out" as Connection64
                connect SOC_Coulomb.coulomb_eff_timer coulomb_eff_timer.out as Connection65
                connect SOC_Coulomb.SOC_initial_CC SOC_initial.out as Connection66
                connect SOC_Coulomb.SOC_Coulomb "SOC CC.in" as Connection67
                connect SOC_Coulomb.internal_resistance Termination4.in as Connection68
                connect SOC_Coulomb.precharge_voltage pcv.in as Connection69
                connect SOC_Coulomb.coulomb_eff coulomb_eff.in as Connection70
                connect SOC_Coulomb.ir_calc_check Termination3.in as Connection71
                connect SOC_Coulomb.current_pcv Termination5.in as Connection72
                connect SOC_Coulomb.coulomb_eff_out Termination6.in as Connection73
                [
                    breakpoints = 7592, 8552; 7776, 8552
                ]
                connect SOC_Coulomb.coulomb_eff_counter Termination7.in as Connection74

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">SOC Module</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">======================</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Contains the SOC estimation function</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">which estimates the SOC of the cells using</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">a coulomb counting method</p></body></html>"

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE
                }
            }
            [
                position = 6904, 8528
                size = 112, 64
            ]

            component Subsystem SECONDARY {
                layout = dynamic
                component "core/Bus Join" "Temp Join" {
                }
                [
                    position = 7984, 7792
                ]

                component "core/Bus Join" "Current Join" {
                }
                [
                    position = 7992, 8008
                ]

                component "core/Bus Join" "Volt Join" {
                }
                [
                    position = 7984, 8240
                ]

                component "core/Probe" "Temp Probe" {
                    execution_rate = "execution_fast"
                }
                [
                    position = 8120, 7704
                ]

                component "core/Probe" "Current Probe" {
                    execution_rate = "execution_fast"
                }
                [
                    position = 8120, 7904
                ]

                component "core/Probe" "Volt Probe" {
                }
                [
                    position = 8128, 8152
                ]

                component "core/Bus Split" "Secondary1 Split" {
                    outputs = "3"
                }
                [
                    position = 7600, 8000
                ]

                component "core/Bus Split" "Secondary2 Split" {
                    outputs = "3"
                }
                [
                    position = 7600, 8200
                ]

                port Temps {
                    position = right:2
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8152, 7792
                ]

                port Currents {
                    position = right:3
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8152, 8008
                ]

                port Volts {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8152, 8240
                ]

                port Secondary1 {
                    label = "Secondary1"
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7504, 8000
                ]

                port Secondary2 {
                    label = "Secondary2"
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7504, 8200
                ]

                junction Junction1 sp
                [
                    position = 8064, 7792
                ]

                junction Junction2 sp
                [
                    position = 8056, 8008
                ]

                junction Junction3 sp
                [
                    position = 8064, 8240
                ]

                connect "Temp Join.out" Junction1 as Connection20
                connect Junction1 Temps as Connection21
                connect "Temp Probe.in" Junction1 as Connection22
                connect "Current Join.out" Junction2 as Connection23
                connect Junction2 Currents as Connection24
                connect "Current Probe.in" Junction2 as Connection25
                connect "Volt Join.out" Junction3 as Connection26
                connect Junction3 Volts as Connection27
                connect "Volt Probe.in" Junction3 as Connection28
                connect Secondary1 "Secondary1 Split.in" as Connection29
                connect "Secondary1 Split.out" "Temp Join.in" as Connection30
                connect "Secondary1 Split.out1" "Current Join.in" as Connection31
                connect "Secondary1 Split.out2" "Volt Join.in" as Connection32
                connect Secondary2 "Secondary2 Split.in" as Connection33
                connect "Secondary2 Split.out" "Temp Join.in1" as Connection34
                connect "Secondary2 Split.out1" "Current Join.in1" as Connection35
                connect "Secondary2 Split.out2" "Volt Join.in1" as Connection36

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">      Secondary Module</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">=======================</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This module processes and extracts the </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">current, voltage, and temperature data</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">from the battery data module on the strings </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">and prepares it into arrays for processing</p></body></html>"

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE
                }
            }
            [
                position = 6408, 8168
                size = 128, 224
            ]

            component "core/Constant" cell_string_number {
                execution_rate = "execution_fast"
                value = "cell_string_number"
            }
            [
                position = 6488, 7728
            ]

            component "core/Probe" cell_string_probe {
            }
            [
                position = 6576, 7728
            ]

            component Subsystem "Charger Protection" {
                layout = dynamic
                visible = "disable"
                component "core/Relational operator" "Relational operator1" {
                    relational_op = "!="
                }
                [
                    position = 8312, 8224
                    hide_name = True
                ]

                component "core/Constant" Constant1 {
                    execution_rate = "exec_rate_fast"
                    value = "5"
                }
                [
                    position = 8208, 8256
                    hide_name = True
                ]

                port Status {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8208, 8192
                ]

                port protection {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8384, 8224
                ]

                connect "Relational operator1.in" Status as Connection2082
                connect "Relational operator1.out" protection as Connection2083
                connect Constant1.out "Relational operator1.in1" as Connection2078
                [
                    breakpoints = 8240, 8232; 8280, 8232
                ]
            }
            [
                position = 7752, 8496
                size = 136, 112
            ]

            port c1p {
                position = top:auto
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 7888, 8320
            ]

            port cpre {
                position = top:auto
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 7936, 8288
            ]

            port Imod {
                label = "Imod"
                position = top:auto
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7104, 8080
                rotation = down
            ]

            port Secondary1 {
                label = "Secondary1"
                position = left:0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 6248, 8072
            ]

            port Secondary2 {
                label = "Secondary2"
                position = left:1
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 6248, 8168
            ]

            port StringOut1 {
                position = right:1
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8304, 7752
            ]

            port StringOut2 {
                position = right:2
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8304, 7904
            ]

            port protection {
                position = bottom:auto
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 7896, 8496
                hide_name = True
            ]

            junction Junction8 sp
            [
                position = 7296, 8280
            ]

            junction Junction9 sp
            [
                position = 7520, 8240
            ]

            junction Junction10 sp
            [
                position = 6744, 8080
            ]

            junction Junction11 sp
            [
                position = 6704, 8256
            ]

            junction Junction12 sp
            [
                position = 6744, 8080
            ]

            junction Junction13 sp
            [
                position = 6776, 8256
            ]

            junction Junction14 sp
            [
                position = 7024, 8080
            ]

            junction Junction15 sp
            [
                position = 7248, 8264
            ]

            junction Junction16 sp
            [
                position = 7520, 8424
            ]

            connect BMS.Cont CONT.cont_status as Connection9
            connect "BAL.Bal to BMS" BMS.Bal as Connection23
            connect Safety.Diag DIAG.Safety as Connection24
            connect DIAG.BMS BMS.Diag as Connection25
            connect "bal enable.out" BAL.bal_enable as Connection32
            [
                position = 0, 0
            ]
            connect SECONDARY.Temps Safety.Temps as Connection115
            connect DIAG.String Junction8 as Connection331
            connect Junction8 BMS.String_status as Connection332
            connect BAL.String Junction8 as Connection333
            [
                position = 0, 0
                breakpoints = 7296, 8072; 7296, 8280
            ]
            connect Junction9 BAL.BMS_in as Connection486
            [
                breakpoints = 7520, 8240; 7520, 8144; 7520, 7936
            ]
            connect SECONDARY.Volts Junction10 as Connection488
            connect SECONDARY.Currents Junction11 as Connection491
            connect SOC.Current Junction11 as Connection493
            connect "BMS.BMS Out" Junction9 as Connection499
            [
                breakpoints = 7520, 8240
            ]
            connect BAL.Volts Junction12 as Connection502
            [
                breakpoints = 7000, 7792; 6744, 7792
            ]
            connect Junction12 Junction10 as Connection503
            [
                breakpoints = 6744, 8080; 6744, 8080
            ]
            connect Safety.Volts Junction12 as Connection504
            connect Junction10 "SOC.Cell V" as Connection508
            [
                breakpoints = 6744, 8080; 6744, 8080; 6744, 8344; 6744, 8344
            ]
            connect Safety.Currs Junction13 as Connection509
            connect Junction13 Junction11 as Connection510
            [
                breakpoints = 6744, 8256; 6720, 8256; 6720, 8256
            ]
            connect BMS.Currs Junction13 as Connection511
            [
                breakpoints = 7440, 8384
            ]
            connect Imod Junction14 as Connection512
            connect Junction14 Safety.Imod as Connection513
            connect BAL.Imod Junction14 as Connection514
            [
                breakpoints = 7112, 8016; 7024, 8016; 7024, 8072
            ]
            connect "DIAG.Reset BMS" Junction15 as Connection568
            connect Junction15 BMS.Reset as Connection569
            connect Safety.reset Junction15 as Connection570
            connect cell_string_number.out cell_string_probe.in as Connection571
            connect Secondary1 SECONDARY.Secondary1 as Connection584
            connect Secondary2 SECONDARY.Secondary2 as Connection585
            connect "BAL.Bal Out" STRING.BAL as Connection586
            connect STRING.String1 StringOut1 as Connection587
            connect STRING.Cont1minus CONT.Cont1minus as Connection588
            connect STRING.String2 StringOut2 as Connection589
            connect STRING.Cont2minus CONT.Cont2minus as Connection590
            connect Junction9 Junction16 as Connection597
            [
                breakpoints = 7520, 8240; 7520, 8240
            ]
            connect Junction16 SOC.BMS_State as Connection598
            [
                breakpoints = 7520, 8424; 7520, 8424; 6904, 8424
            ]
            connect "Charger Protection.Status" Junction16 as Connection599
            connect protection "Charger Protection.protection" as Connection600
            connect CONT.Cont1plus cpre as Connection601
            connect c1p CONT.Precharge as Connection602

            SOC_initial = "60"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The subsystem for the BMS system. Maintains battery system within defined parameters</p></body></html>"

                volt_max {
                    label = "Maximum Voltage"
                    widget = edit
                    type = generic
                    default_value = "4.5"
                    unit = "V"
                    group = "General"
                }

                curr_max {
                    label = "Maximum String Current "
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "A"
                    group = "General"
                }

                curr_mod_max {
                    label = "Maximum Module Current"
                    widget = edit
                    type = generic
                    default_value = "500"
                    unit = "A"
                    group = "General"
                    nonvisible
                }

                temp_max {
                    label = "Maximum Temp"
                    widget = edit
                    type = generic
                    default_value = "40"
                    unit = "C"
                    group = "General"
                }

                volt_deep_discharge {
                    label = "Deep Discharge Voltage"
                    widget = edit
                    type = generic
                    default_value = "2.8"
                    unit = "V"
                    group = "General"
                }

                temp_min {
                    label = "Minimum Temp"
                    widget = edit
                    type = generic
                    default_value = "-10"
                    unit = "C"
                    group = "General"
                }

                cell_counts {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "General"
                    nonvisible
                }

                execution_fast {
                    label = "Execution Rate Fast:"
                    widget = edit
                    type = generic
                    default_value = "exec_rate_fast"
                    unit = "s"
                }

                execution_slow {
                    label = "Execution Rate Slow:"
                    widget = edit
                    type = generic
                    default_value = "exec_rate_slow"
                    unit = "s"
                }

                bal {
                    label = "Balancing"
                    widget = combo
                    combo_values = "Enabled", "Disabled"
                    type = string
                    default_value = "Enabled"
                    group = "Balancing"
                    no_evaluate
                }

                bal_enable {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Balancing"
                    nonvisible
                }

                bal_circuit {
                    label = "Balancing Circuit"
                    widget = combo
                    combo_values = "Passive", "Direct"
                    type = string
                    default_value = "Passive"
                    group = "Balancing"
                    no_evaluate

                    CODE property_value_changed
                        component_handle=mdl.get_sub_level_handle(container_handle)
                        BAL_module_handle = mdl.get_item(name = "BAL",parent = component_handle)
                        bal_circuit = mdl.get_item(name = "bal_circuit", parent = BAL_module_handle)
                        
                        
                        if new_value == 'Direct':
                            mdl.set_property_value(mdl.prop(bal_circuit,"value"),1)
                        else:
                            mdl.set_property_value(mdl.prop(bal_circuit,"value"),0)
                    ENDCODE
                }

                bal_tol_mv {
                    label = "Balancing Tolerance"
                    widget = edit
                    type = generic
                    default_value = "5"
                    unit = "mV"
                    group = "Balancing"
                }

                bal_timer {
                    label = "Balancing Timer"
                    widget = edit
                    type = generic
                    default_value = "20"
                    unit = "s"
                    group = "Balancing"
                }

                bal_curr_max {
                    label = "Max Balancing Current"
                    widget = edit
                    type = generic
                    default_value = "30"
                    unit = "A"
                    group = "Balancing"
                }

                precharge_length {
                    label = "Precharge Time"
                    widget = edit
                    type = generic
                    default_value = "5"
                    unit = "s"
                    group = "Precharge"
                }

                cell_capacity {
                    label = "Cell Capacity"
                    widget = edit
                    type = generic
                    default_value = "14.5"
                    unit = "Ah"
                    group = "SOC"
                }

                coulomb_eff {
                    label = "Coulombic Efficiency (0-1)"
                    widget = edit
                    type = generic
                    default_value = ".98"
                    group = "SOC"
                }

                string_number {
                    label = "Number of Strings"
                    widget = edit
                    type = generic
                    default_value = "2"
                    group = "General"

                    CODE property_value_changed
                        from typhoon.api.schematic_editor import const
                        from typhoon.api.schematic_editor.const import ITEM_PORT,ITEM_TAG,KIND_SP
                        
                        if new_value != old_value:
                            # Do this only if the new value is different from old value
                            
                            #item handles to update
                            BMS_handle = mdl.get_sub_level_handle(container_handle)
                            
                            
                            #CONT module handles
                            CONT_module_handle = mdl.get_item(name = "CONT",parent = BMS_handle)
                            CONT_minus_split_handle = mdl.get_item(name = "Minus_Split",parent = CONT_module_handle)
                            mdl.set_property_value(mdl.prop(CONT_minus_split_handle,"outputs"),new_value)
                            
                            #Diag Module Handles
                            DIAG_handle = mdl.get_item(name = "DIAG", parent = BMS_handle)
                            String_Split_handle = mdl.get_item(name = "String_Split",parent = DIAG_handle)
                            String_Join_handle = mdl.get_item(name = "String_Join",parent = DIAG_handle)
                            
                            #Diag module properties
                            mdl.set_property_value(mdl.prop(String_Split_handle,"outputs"),new_value)
                            mdl.set_property_value(mdl.prop(String_Join_handle,"inputs"),new_value)
                            
                            #SECONDARY Module handle
                            SECONDARY_handle = mdl.get_item(name = "SECONDARY",parent = BMS_handle)
                            secondary_joins = []
                            secondary_joins.append(mdl.get_item(name= "Temp Join", parent = SECONDARY_handle))
                            secondary_joins.append(mdl.get_item(name= "Current Join", parent = SECONDARY_handle))
                            secondary_joins.append(mdl.get_item(name= "Volt Join", parent = SECONDARY_handle))
                            #info("BMS Code Running")
                        
                            #STRING Module Variables, can't update String handle setting until code loop finishes.
                            STRING_handle = mdl.get_item(name = "STRING", parent = BMS_handle)
                            cell_count = int(mdl.get_property_value(mdl.prop(container_handle,"cell_string_number")))*new_value
                            
                            #Remove old components
                            for i in range(int(old_value)):
                                old_sum = mdl.get_item(name = ("String" + str(i+1)),parent = DIAG_handle)
                                old_string_ctrl = mdl.get_item(name = "String_ctrl_" +str(i+1),parent = DIAG_handle)
                                old_string_input = mdl.get_item(name = "string" +str(i+1) +"_input",parent = DIAG_handle)
                                old_cont_port = mdl.get_item(name = ("Cont" + str(i+1) + "minus"),parent = CONT_module_handle, item_type = const.ITEM_PORT)
                                old_cont_goto = mdl.get_item(name = ("Cont" + str(i+1) + "minusg"),parent = BMS_handle, item_type = const.ITEM_TAG)
                                old_cont_from = mdl.get_item(name = ("Cont" + str(i+1) + "minusf"),item_type = const.ITEM_TAG)
                                old_string_port = mdl.get_item(name = "Secondary" + str(i+1), parent = BMS_handle, item_type = const.ITEM_PORT)
                                old_secondary_string_port = mdl.get_item(name = "Secondary" + str(i+1), parent = SECONDARY_handle, item_type = const.ITEM_PORT)
                                old_secondary_split = mdl.get_item(name = "Secondary" + str(i+1) + " Split", parent = SECONDARY_handle, item_type = const.ITEM_COMPONENT)
                                
                                if old_sum:
                                   mdl.delete_item(old_sum)
                                
                                if old_string_ctrl:
                                    mdl.delete_item(old_string_ctrl)
                        
                                if old_string_input:
                                    mdl.delete_item(old_string_input)
                        
                                if old_cont_port:
                                    mdl.delete_item(old_cont_port)
                                
                                if old_cont_goto:
                                    mdl.delete_item(old_cont_goto)
                                    
                                if old_cont_from:
                                    mdl.delete_item(old_cont_from)
                        
                                if old_string_port:
                                    mdl.delete_item(old_string_port)
                        
                                if old_secondary_string_port:
                                    mdl.delete_item(old_secondary_string_port)
                        
                                if old_secondary_split:
                                    mdl.delete_item(old_secondary_split)
                        
                        
                            #Update Slave Joins
                            for join in secondary_joins:
                                mdl.set_property_value(mdl.prop(join,"inputs"),new_value)
                            
                        
                            # Create new components
                            new_sum = []
                            new_string_ctrl = []
                            new_string_input = []
                            new_cont_port = []
                            #new_cont_goto = []
                            #new_cont_from = []
                            new_string_port = []
                            new_secondary_string_port = []
                            new_secondary_split = []
                            contactor_handle = []
                            
                            for i in range(int(new_value)):
                                new_sum.append(mdl.create_component(type_name = "core/Sum",
                                                            parent =DIAG_handle,
                                                            name = "String" + str(i+1),
                                                            position = (7900,7300+100*i),
                                                            rotation = "up"))
                        
                                new_string_ctrl.append(mdl.create_component(type_name = "core/SCADA Input",
                                                                            parent = DIAG_handle,
                                                                            name = "String_ctrl_" + str(i+1),
                                                                            position = (7975,7200+140*i),
                                                                            rotation = "up"))
                        
                                new_string_input.append(mdl.create_component(type_name = "core/Sum",
                                                                            parent = DIAG_handle,
                                                                            name = "string" + str(i+1) +"_input",
                                                                            position =(8060,7275+125*i),
                                                                            rotation = "up"))
                                                                    
                                mdl.set_property_value(mdl.prop(new_string_ctrl[i],"execution_rate"),"execution_fast")
                        
                        
                                new_cont_port.append(mdl.create_port(name = "Cont" + str(i+1) + "minus",
                                                                    parent = CONT_module_handle,
                                                                    kind = const.KIND_SP,
                                                                    #label = 'out',
                                                                    rotation = 'up',
                                                                    direction = const.DIRECTION_OUT,
                                                                    terminal_position = ('right',i+2),
                                                                    position = (8020,7970+60*i)))
                                
                                # Contactor gotos and froms should be eliminated
                                #new_cont_goto.append(mdl.create_tag(value = "Cont" + str(i+1) + "minus",
                                                                    #name = "Cont" + str(i+1) + "minusg",
                                                                    #parent = BMS_handle,
                                                                    #kind = const.KIND_SP,
                                                                    #scope = const.TAG_SCOPE_GLOBAL,
                                                                    #direction = const.DIRECTION_IN,
                                                                    #position = (8000,8100+i*40),
                                                                    #rotation = "up"))
                                
                                #new_cont_from.append(mdl.create_tag(value = "Cont" + str(i+1) + "minus",
                                                                    #name = "Cont" + str(i+1) + "minusf",
                                                                    #kind = const.KIND_SP,
                                                                    #scope = const.TAG_SCOPE_GLOBAL,
                                                                    #direction = const.DIRECTION_OUT,
                                                                    #position = (1670-340*i,2430),
                                                                    #rotation = "down"))
                        
                                new_string_port.append(mdl.create_port(name = "Secondary" + str(i+1),
                                                                        parent = BMS_handle,
                                                                        kind = const.KIND_SP,
                                                                        label = 'Secondary' + str(i+1),
                                                                        rotation = 'up',
                                                                        direction = const.DIRECTION_IN,
                                                                        terminal_position = ('left',i),
                                                                        position = (6250,8070+int(i)*100)))
                                                                    
                                new_secondary_string_port.append(mdl.create_port(name = "Secondary" + str(i+1),
                                                                            parent = SECONDARY_handle,
                                                                            kind = const.KIND_SP,
                                                                            label = "Secondary" + str(i+1),
                                                                            direction = const.DIRECTION_IN,
                                                                            rotation = 'up',
                                                                            terminal_position = ('left',i+1),
                                                                            position = (7500,8000+200*i)))
                        
                                new_secondary_split.append(mdl.create_component(type_name = "core/Bus Split",
                                                                            name = "Secondary" + str(i+1) + " Split",
                                                                            parent = SECONDARY_handle,
                                                                            position = (7600,8000+200*i),
                                                                            rotation = 'up'))
                        
                                mdl.set_property_value(mdl.prop(new_secondary_split[i],"outputs"),3)
                        
                        
                                # Connections
                                mdl.set_property_value(mdl.prop(new_sum[i],"signs"),1)
                                #mdl.set_property_value(mdl.prop(new_string_input[i],"signs"),2)
                                #contactor_handle.append(mdl.get_item(name = "Cont " + str(i+1) + " Minus"))
                        
                                mdl.create_connection(new_secondary_string_port[i],mdl.term(new_secondary_split[i],"in")) 
                                #mdl.create_connection(mdl.term(CONT_module_handle,"Cont" +str(i+1) + "minus"),new_cont_goto[i]) # will need to move to Signal Prep
                                #mdl.create_connection(new_cont_from[i],mdl.term(contactor_handle[i],"ctrl_in")) # will need to move to slave
                                mdl.create_connection(new_string_port[i],mdl.term(SECONDARY_handle,"Secondary" +str(i+1)))
                                    
                        
                                if int(i) == 0:
                                    mdl.create_connection(mdl.term(String_Split_handle,"out"),mdl.term(new_sum[i],"in"))
                                    mdl.create_connection(mdl.term(new_sum[i],"out"),mdl.term(new_string_input[i],"in1"))
                                    mdl.create_connection(mdl.term(new_string_ctrl[i],"out"),mdl.term(new_string_input[i],"in"))
                                    mdl.create_connection(mdl.term(String_Join_handle,"in"),mdl.term(new_string_input[i],"out"))
                                    mdl.create_connection(mdl.term(CONT_minus_split_handle,"out"),new_cont_port[i])
                                    #info("BMS CODE Running")
                                    #mdl.create_connection(mdl.term(CONT_module_handle,"Cont1minus"),mdl.term(STRING_handle,"Cont1minus"))
                        
                                    
                                    #Slave Module Connections
                                    mdl.create_connection(mdl.term(new_secondary_split[i],"out"),mdl.term(secondary_joins[0],"in"))
                                    mdl.create_connection(mdl.term(new_secondary_split[i],"out1"),mdl.term(secondary_joins[1],"in"))
                                    mdl.create_connection(mdl.term(new_secondary_split[i],"out2"),mdl.term(secondary_joins[2],"in"))
                        
                        
                                elif int(i) > 0:
                                    mdl.create_connection(mdl.term(String_Split_handle,"out" + str(i)),mdl.term(new_sum[i],"in"))
                                    mdl.create_connection(mdl.term(new_sum[i],"out"),mdl.term(new_string_input[i],"in1"))
                                    mdl.create_connection(mdl.term(new_string_ctrl[i],"out"),mdl.term(new_string_input[i],"in"))
                                    mdl.create_connection(mdl.term(String_Join_handle,"in" + str(i)),mdl.term(new_string_input[i],"out"))
                                    mdl.create_connection(mdl.term(CONT_minus_split_handle,"out"+str(i)),new_cont_port[i])
                                    #info("BMS CODE Running")
                                    #mdl.create_connection(mdl.term(CONT_module_handle,"Cont" +str(i)+"minus"),mdl.term(STRING_handle,"Cont" +str(i)+"minus"))
                        
                                    #Slave Module Connections
                                    mdl.create_connection(mdl.term(new_secondary_split[i],"out"),mdl.term(secondary_joins[0],"in" + str(i)))
                                    mdl.create_connection(mdl.term(new_secondary_split[i],"out1"),mdl.term(secondary_joins[1],"in" + str(i)))
                                    mdl.create_connection(mdl.term(new_secondary_split[i],"out2"),mdl.term(secondary_joins[2],"in"+ str(i)))
                        
                        
                        
                            #update String Module
                            mdl.set_property_value(mdl.prop(STRING_handle,"n"),cell_count)
                            mdl.set_property_value(mdl.prop(STRING_handle,"old_string"),new_value)
                    ENDCODE
                }

                cell_string_number {
                    label = "Number of Cells per String"
                    widget = edit
                    type = generic
                    default_value = "3"
                    group = "General"

                    CODE property_value_changed
                        from typhoon.api.schematic_editor import const
                        
                        if new_value != old_value:
                            cell_count = new_value
                            BMS_handle = mdl.get_sub_level_handle(container_handle)
                            string_number = int(mdl.get_property_value(mdl.prop(container_handle,"string_number")))
                            SECONDARY_handle = mdl.get_item(name = "SECONDARY", parent = BMS_handle)
                            STRING_handle = mdl.get_item(name = "STRING", parent = BMS_handle)
                            slave_bus_split = []
                            
                            mdl.set_property_value(mdl.prop(STRING_handle,"n"),int(cell_count*string_number))
                            
                            #for i in range(int(string_number)):
                                #slave_bus_split.append(mdl.get_item(name = "Bus Split" + str(i+1), parent = SLAVE_handle, item_type = const.ITEM_COMPONENT))
                                #mdl.set_property_value(mdl.prop(slave_bus_split[i], "outputs"), "[" + str(int(3*cell_count)) + ",1]")
                    ENDCODE
                }

                SOC_initial {
                    label = "Initial State of Charge"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                    min_value = 5
                    max_value = 100
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE

                CODE init
                ENDCODE

                CODE pre_compile
                    # HEADER START
                    volt_max = mdl.get_property_value(mdl.prop(item_handle, "volt_max"))
                    curr_max = mdl.get_property_value(mdl.prop(item_handle, "curr_max"))
                    curr_mod_max = mdl.get_property_value(mdl.prop(item_handle, "curr_mod_max"))
                    temp_max = mdl.get_property_value(mdl.prop(item_handle, "temp_max"))
                    volt_deep_discharge = mdl.get_property_value(mdl.prop(item_handle, "volt_deep_discharge"))
                    temp_min = mdl.get_property_value(mdl.prop(item_handle, "temp_min"))
                    cell_counts = mdl.get_property_value(mdl.prop(item_handle, "cell_counts"))
                    execution_fast = mdl.get_property_value(mdl.prop(item_handle, "execution_fast"))
                    execution_slow = mdl.get_property_value(mdl.prop(item_handle, "execution_slow"))
                    bal = mdl.get_property_value(mdl.prop(item_handle, "bal"))
                    bal_enable = mdl.get_property_value(mdl.prop(item_handle, "bal_enable"))
                    bal_circuit = mdl.get_property_value(mdl.prop(item_handle, "bal_circuit"))
                    bal_tol_mv = mdl.get_property_value(mdl.prop(item_handle, "bal_tol_mv"))
                    bal_timer = mdl.get_property_value(mdl.prop(item_handle, "bal_timer"))
                    bal_curr_max = mdl.get_property_value(mdl.prop(item_handle, "bal_curr_max"))
                    precharge_length = mdl.get_property_value(mdl.prop(item_handle, "precharge_length"))
                    cell_capacity = mdl.get_property_value(mdl.prop(item_handle, "cell_capacity"))
                    coulomb_eff = mdl.get_property_value(mdl.prop(item_handle, "coulomb_eff"))
                    string_number = mdl.get_property_value(mdl.prop(item_handle, "string_number"))
                    cell_string_number = mdl.get_property_value(mdl.prop(item_handle, "cell_string_number"))
                    SOC_initial = mdl.get_property_value(mdl.prop(item_handle, "SOC_initial"))
                    # HEADER STOP
                    component_handle=mdl.get_sub_level_handle(item_handle)
                    #enable/disable balance module. Only Disables module. Module should still compile
                    #as all balance outputs are set to 0.
                    bal = mdl.get_property_value(mdl.prop(item_handle, "bal"))
                    if bal == 'Enabled':
                        mdl.set_property_value(mdl.prop(item_handle, "bal_enable"), 1)
                    else:
                        mdl.set_property_value(mdl.prop(item_handle, "bal_enable"), 0)
                        
                    
                    #Safety Module Settings
                    safety_tests = string_number*cell_string_number*7
                    cell_count = string_number * cell_string_number
                    safety_mask_handle = mdl.get_item(name = "Safety",parent=component_handle)
                    safety_state_machine_handle = mdl.get_item(name = "Safety_Logic",parent = safety_mask_handle)
                    mdl.set_property_value(mdl.prop(safety_state_machine_handle, "output_terminals_dimensions"),str(safety_tests)+";1;1")
                    safety_cell_count_handle = mdl.get_item(name = "cell_count",parent=safety_mask_handle)
                    #mdl.set_property_value(mdl.prop(safety_cell_count_handle, "value"),cell_count)
                    
                    #SOC module Settings
                    SOC_module_handle = mdl.get_item(name = "SOC", parent = component_handle)
                    SOC_cell_count = mdl.get_item(name = "cell_count", parent = SOC_module_handle)
                    #mdl.set_property_value(mdl.prop(SOC_cell_count,"value"),cell_count)
                    SOC_coulomb_handle = mdl.get_item(name = "SOC_Coulomb",parent = SOC_module_handle)
                    mdl.set_property_value(mdl.prop(SOC_coulomb_handle,"output_terminals_dimensions"),str(cell_count) +";"+str(cell_count) +";"+str(cell_count) +";"+str(cell_count)+";"+str(cell_count) +";"+str(cell_count)+";1;1")
                    #BAL module Settings
                    BAL_module_handle = mdl.get_item(name = "BAL",parent = component_handle)
                    BAL_cell_count = mdl.get_item(name = "cell_count",parent = BAL_module_handle)
                    #mdl.set_property_value(mdl.prop(BAL_cell_count,"value"),cell_count)
                    BAL_SM_handle = mdl.get_item(name = "Balance_State_Machine", parent = BAL_module_handle)
                    mdl.set_property_value(mdl.prop(BAL_SM_handle,"output_terminals_dimensions"),str(cell_count) +";1;1;1;" + str(cell_count))
                    
                    # CONT module settings
                    CONT_module_handle = mdl.get_item(name = "CONT",parent = component_handle)
                    CONT_SM_Handle = mdl.get_item(name = "Contactor_State_Machine",parent = CONT_module_handle)
                    mdl.set_property_value(mdl.prop(CONT_SM_Handle,"output_terminals_dimensions"),"1;" +str(2*string_number)+";1")
                    CONT_Minus_split_handle = mdl.get_item(name = "Minus_Split",parent = CONT_module_handle)
                    mdl.set_property_value(mdl.prop(CONT_Minus_split_handle,"outputs"),string_number)
                    
                    # BMS Module Settings
                    BMS_Module_handle = mdl.get_item(name = "BMS",parent=component_handle)
                    BMS_SM_handle = mdl.get_item(name = "BMS_State_Machine", parent = BMS_Module_handle)
                    mdl.set_property_value(mdl.prop(BMS_SM_handle,"output_terminals_dimensions"),str(string_number+1)+";1")
                    BMS_cell_count = mdl.get_item(name = "Cell_Count",parent = BMS_Module_handle)
                    #mdl.set_property_value(mdl.prop(BMS_cell_count,"value"),cell_count)
                ENDCODE

                CODE define_icon
                    mdl.set_component_icon_image(item_handle, "images/computer.svg")
                ENDCODE
            }
        }
        [
            position = 2400, 1984
            size = 168, 200
        ]

        component Subsystem "Battery Stack 2" {
            layout = dynamic
            component "core/Voltage Measurement" Volt_String {
                execution_rate = "exec_rate_fast"
            }
            [
                position = 8176, 8544
                rotation = right
                size = 64, 32
            ]

            component Subsystem "Battery Secondary" {
                layout = dynamic
                component Subsystem "BC Temps" {
                    layout = dynamic
                    component "core/Bus Join" "Bus Join1" {
                        inputs = "3"
                    }
                    [
                        position = 8128, 8352
                    ]

                    component "core/Signal Picker Source" SP0 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell1.Temperature.value"
                    }
                    [
                        position = 8000, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP1 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell2.Temperature.value"
                    }
                    [
                        position = 7928, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP2 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell3.Temperature.value"
                    }
                    [
                        position = 7856, 8080
                        rotation = right
                    ]

                    port Out {
                        label = "out"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8248, 8352
                    ]

                    connect "Bus Join1.out" Out as Connection1
                    connect SP0.out "Bus Join1.in" as Connection2
                    connect SP1.out "Bus Join1.in1" as Connection3
                    connect SP2.out "Bus Join1.in2" as Connection4

                    Ts = "execution_rate"
                    n = "3"
                    prefix = "Battery Stack 2.Battery Cell"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Signal Picker Battery Cell<br></br>==========================<br></br>Collects probes from battery Cells with Signal picker and joins them to a vector.<br></br>It collects from battery cells:<br></br>\"\'Prefix of element\'+1..n\" </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">the signal named with \"variable name\"</p></body></html>"

                        Ts {
                            label = "execution rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                
                                
                                # Change settings execution rate
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                       mdl.set_property_value(mdl.prop(con, "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                            ENDCODE
                        }

                        n {
                            label = "number"
                            widget = edit
                            type = generic
                            default_value = "2"
                            no_evaluate

                            CODE property_value_changed
                                from typhoon.api.schematic_editor import const
                                from typhoon.api.schematic_editor.const import ITEM_PORT
                                
                                # Enable/disable BW property
                                #if new_value:
                                #    mdl.enable_property(mdl.prop(container_handle, "fc"))
                                #else:
                                #    mdl.disable_property(mdl.prop(container_handle, "fc"))
                                
                                if new_value != old_value:
                                    # Do this only if the new value is different from old value
                                    component_handle = mdl.get_sub_level_handle(container_handle)
                                    
                                    
                                    # all old signal picker
                                    for i in range(int(old_value)) : 
                                        sp = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                        if sp:
                                            mdl.delete_item(sp)
                                        
                                    # change Join
                                    bj = mdl.get_item(name="Bus Join1", parent=component_handle)
                                    if bj:
                                        mdl.set_property_value(mdl.prop(bj, "inputs"), new_value)
                                
                                    
                                    # Create new components
                                    prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                    name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                    if name == "It" :
                                        var_name = "It.Mask@top.current"
                                    else :
                                        var_name = name+".value"
                                    
                                    con = []
                                    for i in range(int(new_value)) :
                                        con.append(mdl.create_component(type_name="core/Signal Picker Source",
                                                                 parent=component_handle,
                                                                 name="SP"+str(i),
                                                                 position = (8000-i*70, 8080),
                                                                 rotation = "right"))
                                    
                                        mdl.set_property_value(mdl.prop(con[i], "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                                        mdl.set_property_value(mdl.prop(con[i], "signal_chooser"), prefix+str(i+1)+"."+var_name)
                                       
                                
                                        # Create connections
                                        if i == 0 :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"))
                                        else :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"+str(i)))
                            ENDCODE
                        }

                        prefix {
                            label = "Prefix of element"
                            widget = edit
                            type = generic
                            default_value = "Battery Cell"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        name {
                            label = "variable name"
                            widget = combo
                            combo_values = "It", "Cell voltage", "SOC", "SOH", "OCV", "Internal resistance", "Total capacity", "Balancing current", "Cell current", "Temperature", "Hysteresis voltage"
                            type = string
                            default_value = "Temperature"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7288, 8184
                    size = 64, 48
                ]

                component Subsystem "BC Voltage" {
                    layout = dynamic
                    component "core/Bus Join" "Bus Join1" {
                        inputs = "3"
                    }
                    [
                        position = 8128, 8352
                    ]

                    component "core/Signal Picker Source" SP0 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell1.Cell voltage.value"
                    }
                    [
                        position = 8000, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP1 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell2.Cell voltage.value"
                    }
                    [
                        position = 7928, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP2 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell3.Cell voltage.value"
                    }
                    [
                        position = 7856, 8080
                        rotation = right
                    ]

                    port Out {
                        label = "out"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8248, 8352
                    ]

                    connect "Bus Join1.out" Out as Connection1
                    connect SP0.out "Bus Join1.in" as Connection2
                    connect SP1.out "Bus Join1.in1" as Connection3
                    connect SP2.out "Bus Join1.in2" as Connection4

                    Ts = "execution_rate"
                    n = "3"
                    prefix = "Battery Stack 2.Battery Cell"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Signal Picker Battery Cell<br></br>==========================<br></br>Collects probes from battery Cells with Signal picker and joins them to a vector.<br></br>It collects from battery cells:<br></br>\"\'Prefix of element\'+1..n\" </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">the signal named with \"variable name\"</p></body></html>"

                        Ts {
                            label = "execution rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                
                                
                                # Change settings execution rate
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                       mdl.set_property_value(mdl.prop(con, "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                            ENDCODE
                        }

                        n {
                            label = "number"
                            widget = edit
                            type = generic
                            default_value = "2"
                            no_evaluate

                            CODE property_value_changed
                                from typhoon.api.schematic_editor import const
                                from typhoon.api.schematic_editor.const import ITEM_PORT
                                
                                # Enable/disable BW property
                                #if new_value:
                                #    mdl.enable_property(mdl.prop(container_handle, "fc"))
                                #else:
                                #    mdl.disable_property(mdl.prop(container_handle, "fc"))
                                
                                if new_value != old_value:
                                    # Do this only if the new value is different from old value
                                    component_handle = mdl.get_sub_level_handle(container_handle)
                                    
                                    
                                    # all old signal picker
                                    for i in range(int(old_value)) : 
                                        sp = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                        if sp:
                                            mdl.delete_item(sp)
                                        
                                    # change Join
                                    bj = mdl.get_item(name="Bus Join1", parent=component_handle)
                                    if bj:
                                        mdl.set_property_value(mdl.prop(bj, "inputs"), new_value)
                                
                                    
                                    # Create new components
                                    prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                    name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                    if name == "It" :
                                        var_name = "It.Mask@top.current"
                                    else :
                                        var_name = name+".value"
                                    
                                    con = []
                                    for i in range(int(new_value)) :
                                        con.append(mdl.create_component(type_name="core/Signal Picker Source",
                                                                 parent=component_handle,
                                                                 name="SP"+str(i),
                                                                 position = (8000-i*70, 8080),
                                                                 rotation = "right"))
                                    
                                        mdl.set_property_value(mdl.prop(con[i], "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                                        mdl.set_property_value(mdl.prop(con[i], "signal_chooser"), prefix+str(i+1)+"."+var_name)
                                       
                                
                                        # Create connections
                                        if i == 0 :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"))
                                        else :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"+str(i)))
                            ENDCODE
                        }

                        prefix {
                            label = "Prefix of element"
                            widget = edit
                            type = generic
                            default_value = "Battery Cell"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        name {
                            label = "variable name"
                            widget = combo
                            combo_values = "It", "Cell voltage", "SOC", "SOH", "OCV", "Internal resistance", "Total capacity", "Balancing current", "Cell current", "Temperature", "Hysteresis voltage"
                            type = string
                            default_value = "Cell voltage"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7288, 8016
                    size = 64, 48
                ]

                component Subsystem "BC Current" {
                    layout = dynamic
                    component "core/Bus Join" "Bus Join1" {
                        inputs = "3"
                    }
                    [
                        position = 8128, 8352
                    ]

                    component "core/Signal Picker Source" SP0 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell1.Cell current.value"
                    }
                    [
                        position = 8000, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP1 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell2.Cell current.value"
                    }
                    [
                        position = 7928, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP2 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell3.Cell current.value"
                    }
                    [
                        position = 7856, 8080
                        rotation = right
                    ]

                    port Out {
                        label = "out"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8248, 8352
                    ]

                    connect "Bus Join1.out" Out as Connection1
                    connect SP0.out "Bus Join1.in" as Connection2
                    connect SP1.out "Bus Join1.in1" as Connection3
                    connect SP2.out "Bus Join1.in2" as Connection4

                    Ts = "execution_rate"
                    n = "3"
                    name = "Cell current"
                    prefix = "Battery Stack 2.Battery Cell"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Signal Picker Battery Cell<br></br>==========================<br></br>Collects probes from battery Cells with Signal picker and joins them to a vector.<br></br>It collects from battery cells:<br></br>\"\'Prefix of element\'+1..n\" </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">the signal named with \"variable name\"</p></body></html>"

                        Ts {
                            label = "execution rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                
                                
                                # Change settings execution rate
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                       mdl.set_property_value(mdl.prop(con, "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                            ENDCODE
                        }

                        n {
                            label = "number"
                            widget = edit
                            type = generic
                            default_value = "2"
                            no_evaluate

                            CODE property_value_changed
                                from typhoon.api.schematic_editor import const
                                from typhoon.api.schematic_editor.const import ITEM_PORT
                                
                                # Enable/disable BW property
                                #if new_value:
                                #    mdl.enable_property(mdl.prop(container_handle, "fc"))
                                #else:
                                #    mdl.disable_property(mdl.prop(container_handle, "fc"))
                                
                                if new_value != old_value:
                                    # Do this only if the new value is different from old value
                                    component_handle = mdl.get_sub_level_handle(container_handle)
                                    
                                    
                                    # all old signal picker
                                    for i in range(int(old_value)) : 
                                        sp = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                        if sp:
                                            mdl.delete_item(sp)
                                        
                                    # change Join
                                    bj = mdl.get_item(name="Bus Join1", parent=component_handle)
                                    if bj:
                                        mdl.set_property_value(mdl.prop(bj, "inputs"), new_value)
                                
                                    
                                    # Create new components
                                    prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                    name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                    if name == "It" :
                                        var_name = "It.Mask@top.current"
                                    else :
                                        var_name = name+".value"
                                    
                                    con = []
                                    for i in range(int(new_value)) :
                                        con.append(mdl.create_component(type_name="core/Signal Picker Source",
                                                                 parent=component_handle,
                                                                 name="SP"+str(i),
                                                                 position = (8000-i*70, 8080),
                                                                 rotation = "right"))
                                    
                                        mdl.set_property_value(mdl.prop(con[i], "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                                        mdl.set_property_value(mdl.prop(con[i], "signal_chooser"), prefix+str(i+1)+"."+var_name)
                                       
                                
                                        # Create connections
                                        if i == 0 :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"))
                                        else :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"+str(i)))
                            ENDCODE
                        }

                        prefix {
                            label = "Prefix of element"
                            widget = edit
                            type = generic
                            default_value = "Battery Cell"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        name {
                            label = "variable name"
                            widget = combo
                            combo_values = "It", "Cell voltage", "SOC", "SOH", "OCV", "Internal resistance", "Total capacity", "Balancing current", "Cell current", "Temperature", "Hysteresis voltage"
                            type = string
                            default_value = "Temperature"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7288, 8344
                    size = 64, 48
                ]

                component Subsystem "BC SOC" {
                    layout = dynamic
                    component "core/Bus Join" "Bus Join1" {
                        inputs = "3"
                    }
                    [
                        position = 8128, 8352
                    ]

                    component "core/Signal Picker Source" SP0 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell1.SOC.value"
                    }
                    [
                        position = 8000, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP1 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell2.SOC.value"
                    }
                    [
                        position = 7928, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP2 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell3.SOC.value"
                    }
                    [
                        position = 7856, 8080
                        rotation = right
                    ]

                    port Out {
                        label = "out"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8248, 8352
                    ]

                    connect "Bus Join1.out" Out as Connection1
                    connect SP0.out "Bus Join1.in" as Connection2
                    connect SP1.out "Bus Join1.in1" as Connection3
                    connect SP2.out "Bus Join1.in2" as Connection4

                    n = "3"
                    prefix = "Battery Stack 2.Battery Cell"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Signal Picker Battery Cell<br></br>==========================<br></br>Collects probes from battery Cells with Signal picker and joins them to a vector.<br></br>It collects from battery cells:<br></br>\"\'Prefix of element\'+1..n\" </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">the signal named with \"variable name\"</p></body></html>"

                        Ts {
                            label = "execution rate"
                            widget = edit
                            type = generic
                            default_value = "execution_rate"

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                
                                
                                # Change settings execution rate
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                       mdl.set_property_value(mdl.prop(con, "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                            ENDCODE
                        }

                        n {
                            label = "number"
                            widget = edit
                            type = generic
                            default_value = "7"
                            no_evaluate

                            CODE property_value_changed
                                from typhoon.api.schematic_editor import const
                                from typhoon.api.schematic_editor.const import ITEM_PORT
                                
                                # Enable/disable BW property
                                #if new_value:
                                #    mdl.enable_property(mdl.prop(container_handle, "fc"))
                                #else:
                                #    mdl.disable_property(mdl.prop(container_handle, "fc"))
                                
                                if new_value != old_value:
                                    # Do this only if the new value is different from old value
                                    component_handle = mdl.get_sub_level_handle(container_handle)
                                    
                                    
                                    # all old signal picker
                                    for i in range(int(old_value)) : 
                                        sp = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                        if sp:
                                            mdl.delete_item(sp)
                                        
                                    # change Join
                                    bj = mdl.get_item(name="Bus Join1", parent=component_handle)
                                    if bj:
                                        mdl.set_property_value(mdl.prop(bj, "inputs"), new_value)
                                
                                    
                                    # Create new components
                                    prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                    name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                    if name == "It" :
                                        var_name = "It.Mask@top.current"
                                    else :
                                        var_name = name+".value"
                                    
                                    con = []
                                    for i in range(int(new_value)) :
                                        con.append(mdl.create_component(type_name="core/Signal Picker Source",
                                                                 parent=component_handle,
                                                                 name="SP"+str(i),
                                                                 position = (8000-i*70, 8080),
                                                                 rotation = "right"))
                                    
                                        mdl.set_property_value(mdl.prop(con[i], "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                                        mdl.set_property_value(mdl.prop(con[i], "signal_chooser"), prefix+str(i+1)+"."+var_name)
                                       
                                
                                        # Create connections
                                        if i == 0 :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"))
                                        else :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"+str(i)))
                            ENDCODE
                        }

                        prefix {
                            label = "Prefix of element"
                            widget = edit
                            type = generic
                            default_value = "Battery Stack 1.Battery Cell"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        name {
                            label = "variable name"
                            widget = combo
                            combo_values = "It", "Cell voltage", "SOC", "SOH", "OCV", "Internal resistance", "Total capacity", "Balancing current", "Cell current", "Temperature", "Hysteresis voltage"
                            type = string
                            default_value = "SOC"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7288, 7880
                    size = 64, 48
                ]

                component "core/Termination" Termination1 {
                }
                [
                    position = 7424, 7880
                ]

                port Temperatures {
                    label = "Temps"
                    position = right:3
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7472, 8184
                ]

                port Voltages {
                    label = "Volts"
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7472, 8016
                ]

                port Currents {
                    label = "Currents"
                    position = right:2
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7472, 8344
                ]

                connect "BC Temps.Out" Temperatures as Connection14
                connect Voltages "BC Voltage.Out" as Connection39
                [
                    breakpoints = 7384, 8016
                ]
                connect "BC Current.Out" Currents as Connection40
                [
                    breakpoints = 7376, 8344
                ]
                connect "BC SOC.Out" Termination1.in as Connection41

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Battery Slave Module</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">=======================</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Contains the signal pickers that read</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">temperature, cell volt, and current from </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">each cell.</p></body></html>"

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE
                }
            }
            [
                position = 8472, 8440
                scale = 1, -1
                size = 112, 152
            ]

            component "core/Bus Split" Secondary_Split {
                outputs = "[1, 2, 2, 2]"
            }
            [
                position = 7000, 8248
                rotation = right
                scale = -1, 1
            ]

            component "core/Resistor" string_resistor {
                resistance = "0.001"
            }
            [
                position = 8000, 8792
                rotation = right
            ]

            component "core/Inductor" string_inductor {
                inductance = "1e-05"
            }
            [
                position = 8000, 8888
                rotation = right
            ]

            component "core/Single Pole Single Throw Contactor" string_contactor {
                ctrl_src = "Model"
            }
            [
                position = 8000, 9024
                rotation = left
                size = 64, 32
            ]

            component "core/Battery Cell" "Battery Cell1" {
                Init_SOC = "SOC_initial"
                OCV = "OCV_vector"
                Q_total = "tot_capacity"
                R0 = "ir_vector"
                R_balance = "r_bal"
                SOC_vector = "SOC_vector"
                T_vector = "temp_vector"
                balancing = "Passive"
                eta = "ce_vector"
                execution_rate = "execution_rate"
                meas_Ibal = "True"
                meas_Icell = "True"
                meas_SOC = "True"
                meas_T = "True"
                thermal_flag = "False"
            }
            [
                position = 8000, 8352
                size = 32, 64
            ]

            component "core/Battery Cell" "Battery Cell2" {
                Init_SOC = "SOC_initial"
                OCV = "OCV_vector"
                Q_total = "tot_capacity"
                R0 = "ir_vector"
                R_balance = "r_bal"
                SOC_vector = "SOC_vector"
                T_vector = "temp_vector"
                balancing = "Passive"
                eta = "ce_vector"
                execution_rate = "execution_rate"
                meas_Ibal = "True"
                meas_Icell = "True"
                meas_SOC = "True"
                meas_T = "True"
                thermal_flag = "False"
            }
            [
                position = 8000, 8496
                size = 32, 64
            ]

            component "core/Battery Cell" "Battery Cell3" {
                Init_SOC = "SOC_initial"
                OCV = "OCV_vector"
                Q_total = "tot_capacity"
                R0 = "ir_vector"
                R_balance = "r_bal"
                SOC_vector = "SOC_vector"
                T_vector = "temp_vector"
                balancing = "Passive"
                eta = "ce_vector"
                execution_rate = "execution_rate"
                meas_Ibal = "True"
                meas_Icell = "True"
                meas_SOC = "True"
                meas_T = "True"
                thermal_flag = "False"
            }
            [
                position = 8000, 8648
                size = 32, 64
            ]

            component "core/Bus Join" "Secondary Join" {
                inputs = "3"
            }
            [
                position = 8672, 8440
            ]

            port plus {
                position = top:1
                kind = pe
                direction =  in
            }
            [
                position = 8000, 8200
                rotation = right
            ]

            port minus {
                position = bottom:1
                kind = pe
                direction =  in
            }
            [
                position = 8000, 9104
                rotation = left
            ]

            port "secondary in" {
                position = right:1
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7600, 8200
            ]

            port "secondary out" {
                position = right:2
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8800, 8440
            ]

            connect "secondary in" Secondary_Split.in as Connection1
            connect "Battery Cell1.P" plus as Connection2
            connect minus string_contactor.a_in as Connection3
            connect string_contactor.a_out string_inductor.n_node as Connection4
            connect string_inductor.p_node string_resistor.n_node as Connection5
            connect Secondary_Split.out string_contactor.ctrl_in as Connection6
            connect "Battery Cell1.N" "Battery Cell2.P" as Connection7
            connect Secondary_Split.out1 "Battery Cell1.T" as Connection8
            connect "Battery Cell2.N" "Battery Cell3.P" as Connection9
            connect "Battery Cell3.N" string_resistor.p_node as Connection10
            connect Secondary_Split.out2 "Battery Cell2.T" as Connection11
            connect Secondary_Split.out3 "Battery Cell3.T" as Connection12
            connect "Secondary Join.in" "Battery Secondary.Temperatures" as Connection13
            connect "Secondary Join.out" "secondary out" as Connection14
            connect "Secondary Join.in1" "Battery Secondary.Currents" as Connection15
            connect "Secondary Join.in2" "Battery Secondary.Voltages" as Connection16
            connect "Battery Cell1.P" Volt_String.p_node as Connection17
            connect "Battery Cell3.N" Volt_String.n_node as Connection18

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This component represents a </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">stack of battery cells in series, </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">along with the control components </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">that works with the BMS</p></body></html>"

                cell_count {
                    label = "Number of Cells"
                    widget = edit
                    type = generic
                    default_value = "3"

                    CODE property_value_changed
                        from typhoon.api.schematic_editor import const
                        from typhoon.api.schematic_editor.const import ITEM_PORT, ITEM_TAG, KIND_PE,KIND_SP,ITEM_CONNECTION,ROTATION_RIGHT,ROTATION_LEFT,ROTATION_UP,ROTATION_DOWN
                        
                        
                        component_handle = mdl.get_sub_level_handle(container_handle)
                            
                        # Remove all old tags, cells, joins, ports, connections, while leaving the battery slave
                            
                        connections = mdl.get_items(parent = component_handle, item_type = const.ITEM_CONNECTION)
                        for connection in connections:
                            if connection:
                                mdl.delete_item(connection)
                            
                        ports = mdl.get_items(parent=component_handle, item_type = const.ITEM_PORT)
                        for port in ports:
                            if port:
                                mdl.delete_item(port)
                                
                        
                        cells = mdl.get_items(parent=component_handle, item_type = const.ITEM_COMPONENT)
                        if len(cells) > 0:
                            for comp in cells:
                                if comp:
                                    if mdl.get_name(comp) == "Battery Secondary" or mdl.get_name(comp) == "Volt_String":
                                        continue
                                    else:
                                        mdl.delete_item(comp)
                            
                            
                        #recreate plus, minus, and secondary ports
                        plus_port = mdl.create_port(name = 'plus', 
                                                        parent = component_handle, 
                                                        kind = KIND_PE,
                                                        rotation = 'right',
                                                        terminal_position = ('top',1), 
                                                        position = (8000,8200))
                                                        
                        minus_port = mdl.create_port(name = 'minus', 
                                                        parent = component_handle, 
                                                        kind = KIND_PE,
                                                        rotation = 'left',
                                                        terminal_position = ('bottom',1), 
                                                        position = (8000,8200+int(new_value+2)*180))
                                                        
                        secondary_in_port = mdl.create_port(name = 'secondary in', 
                                                        parent = component_handle, 
                                                        kind = KIND_SP,
                                                        direction = const.DIRECTION_IN,
                                                        rotation = 'up',
                                                        terminal_position = ('right',1),
                                                        position = (7600,8200))
                            
                        secondary_out_port = mdl.create_port(name = 'secondary out', 
                                                        parent = component_handle, 
                                                        kind = KIND_SP,
                                                        direction = const.DIRECTION_OUT,
                                                        rotation = 'up',
                                                        terminal_position = ('right',2),
                                                        position = (8800,7900+int(new_value)*180))
                            
                        # Create Bus Split, Resistor, and Contactor
                        bus_split = mdl.create_component(type_name = 'Bus Split',
                                                         parent=component_handle,
                                                         name="Secondary_Split",
                                                         position = (7000, 8250),
                                                         rotation = const.ROTATION_RIGHT,
                                                         flip = const.FLIP_HORIZONTAL)
                        
                        secondary_split_output_array = [1]
                        for i in range(int(new_value)):
                            secondary_split_output_array.append(2)                             
                        mdl.set_property_value(mdl.prop(bus_split,"outputs"),secondary_split_output_array)
                        
                        
                        pack_resistor = mdl.create_component(type_name = 'Resistor',
                                                                parent = component_handle,
                                                                position = (8000,8250+int(new_value)*180),
                                                                rotation = const.ROTATION_RIGHT,
                                                                name = "string_resistor")
                                                                
                        mdl.set_property_value(mdl.prop(pack_resistor,"resistance"),1e-3)
                        
                        pack_inductor = mdl.create_component(type_name = 'Inductor',
                                                                parent = component_handle,
                                                                position = (8000,8350+int(new_value)*180),
                                                                rotation = const.ROTATION_RIGHT,
                                                                name = "string_inductor")
                                                                
                        mdl.set_property_value(mdl.prop(pack_inductor,"inductance"),10e-6)
                            
                        pack_contactor = mdl.create_component(type_name = 'Single Pole Single Throw Contactor',
                                                                    parent = component_handle,
                                                                    position = (8000,int(new_value+1)*180+8300),
                                                                    rotation = const.ROTATION_LEFT,
                                                                    name = "string_contactor")
                            
                        mdl.set_property_value(mdl.prop(pack_contactor,"ctrl_src"),"Model")
                        
                        #Connections 
                        mdl.create_connection(secondary_in_port,mdl.term(bus_split,"in"))
                        
                        # Create battery cells and connections, and core couplings if necessary
                            
                        bc = []
                        core_coupling = []
                        
                        for i in range(int(new_value)) :
                            
                            # Non Parallelized Battery Stacker
                            if int(new_value) <= 16:
                                bc.append(mdl.create_component(type_name = 'Battery Cell',
                                                            parent=component_handle,
                                                            name="Battery Cell"+str(i+1),
                                                            position = (8000, 8350+i*150),
                                                            rotation = const.ROTATION_UP)
                                                            )
                                    
                                mdl.set_property_value(mdl.prop(bc[i],"execution_rate"),"execution_rate")
                                if mdl.get_property_value(mdl.prop(container_handle,"bal_method")) == "Direct":
                                    mdl.set_property_value(mdl.prop(bc[i],"balancing"),"Direct current input")
                                    mdl.set_property_value(mdl.prop(bc[i],"R_balance"),"r_bal")
                                    
                                else:
                                    mdl.set_property_value(mdl.prop(bc[i],"balancing"),"Passive")
                                    mdl.set_property_value(mdl.prop(bc[i],"R_balance"),"r_bal")
                                    
                                    
                                #Include required Signal Probes
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_SOH"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_OCV"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_Rint"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_Q"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_hyst"),"False")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_Ibal"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_SOC"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_Icell"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_T"),"True")
                                
                                    
                                #Inherit Battery Properties from mask
                                mdl.set_property_value(mdl.prop(bc[i],"SOC_vector"),"SOC_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"Init_SOC"),"SOC_initial")
                                mdl.set_property_value(mdl.prop(bc[i],"T_vector"),"temp_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"OCV"),"OCV_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"R0"),"ir_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"Q_total"),"tot_capacity")
                                mdl.set_property_value(mdl.prop(bc[i],"eta"),"ce_vector")
                        
                                # Create connections for battery cells and ports
                                if int(i) == 0:
                                    mdl.create_connection(mdl.term(bc[i],"P"), plus_port)
                                    mdl.create_connection(minus_port,mdl.term(pack_contactor,"a_in"))
                                    mdl.create_connection(mdl.term(pack_contactor,"a_out"),mdl.term(pack_inductor,"n_node"))
                                    mdl.create_connection(mdl.term(pack_inductor,"p_node"),mdl.term(pack_resistor,"n_node"))
                                    mdl.create_connection(mdl.term(bus_split,"out"),mdl.term(pack_contactor,"ctrl_in")) #this will probably be reserved for the contactor connection
                                    
                                    if int(new_value) == 1:
                                        mdl.create_connection(mdl.term(bc[i],"N"),mdl.term(pack_resistor,"p_node"))
                        
                                elif int(i) == int(new_value)-1:
                                    mdl.create_connection(mdl.term(bc[i-1],"N"),mdl.term(bc[i],"P"))
                                    mdl.create_connection(mdl.term(bc[i],"N"), mdl.term(pack_resistor,"p_node"))
                                    mdl.create_connection(mdl.term(bus_split,"out"+str(i)),mdl.term(bc[i-1],"T"))
                        
                                else:
                                    mdl.create_connection(mdl.term(bc[i-1],"N"),mdl.term(bc[i],"P"))
                                    mdl.create_connection(mdl.term(bus_split,"out"+str(i)),mdl.term(bc[i-1],"T"))
                                    
                        
                            
                        
                            # Parallelized Battery Stacker
                            else:
                        
                                bc.append(mdl.create_component(type_name = 'Battery Cell',
                                                            parent=component_handle,
                                                            name="Battery Cell"+str(i+1),
                                                            position = (8000, 8350+i*150),
                                                            rotation = const.ROTATION_UP)
                                                            )
                                
                                mdl.set_property_value(mdl.prop(bc[i],"execution_rate"),"execution_rate")
                        
                                if mdl.get_property_value(mdl.prop(container_handle,"bal_method")) == "Direct":
                                    mdl.set_property_value(mdl.prop(bc[i],"balancing"),"Direct current input")
                                    mdl.set_property_value(mdl.prop(bc[i],"R_balance"),"r_bal")
                                    
                                else:
                                    mdl.set_property_value(mdl.prop(bc[i],"balancing"),"Passive")
                                    mdl.set_property_value(mdl.prop(bc[i],"R_balance"),"r_bal")
                        
                                #Include required Signal Probes
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_SOH"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_OCV"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_Rint"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_Q"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_hyst"),"False")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_Ibal"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_SOC"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_Icell"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_T"),"True")
                                    
                                #Inherit Battery Properties from mask
                                mdl.set_property_value(mdl.prop(bc[i],"SOC_vector"),"SOC_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"Init_SOC"),"SOC_initial")
                                mdl.set_property_value(mdl.prop(bc[i],"T_vector"),"temp_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"OCV"),"OCV_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"R0"),"ir_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"Q_total"),"tot_capacity")
                                mdl.set_property_value(mdl.prop(bc[i],"eta"),"ce_vector")
                        
                        
                                # Create Core Couplings and Connections
                                if int(i) % 16 == 0 or int(i) == int(new_value) -1:
                                    
                                    if int(i) % 16 == 0:
                                        j = int(int(i) / 16) #index for core couplings
                                    
                                        core_coupling.append(mdl.create_component(type_name = "Single Phase Core Coupling",
                                                        parent = component_handle,
                                                        name = "Core Coupling" + str(j+1),
                                                        position = (8250,8600+2200*j),
                                                        rotation = const.ROTATION_UP))
                        
                                        mdl.set_property_value(mdl.prop(core_coupling[j],"snb_type_u"),"R2")
                        
                                    # Connections
                        
                                    if int(i) == 0: # first step
                                        mdl.create_connection(mdl.term(bc[i],"P"),mdl.term(core_coupling[j],"a_in"))
                                        mdl.create_connection(mdl.term(core_coupling[j],"a_out"),plus_port)
                                        #mdl.create_connection(mdl.term(bus_split,"out1"),mdl.term(bc[i-1],"T"))
                        
                                    elif int(i) % 16 == 0 and i > 0 or int(i) == int(new_value) - 1: # connects core couplings >1
                        
                                        # core coupling pairing
                                        if int(i) % 16 == 0:
                                            mdl.create_connection(mdl.term(core_coupling[j],"a_in"),mdl.term(bc[i],"P"))
                                            mdl.create_connection(mdl.term(core_coupling[j-1],"b_in"),mdl.term(bc[i-1],"N"))
                                            mdl.create_connection(mdl.term(core_coupling[j-1],"b_out"),mdl.term(core_coupling[j],"a_out"))
                                            mdl.create_connection(mdl.term(bus_split,"out"+str(i)),mdl.term(bc[i-1],"T"))
                        
                                        # last loop
                                        if int(i) == int(new_value) - 1:
                                            mdl.create_connection(mdl.term(core_coupling[j],"b_out"),mdl.term(pack_resistor,"p_node"))
                                            mdl.create_connection(mdl.term(core_coupling[j],"b_in"),mdl.term(bc[i],"N"))
                        
                                            #cleanup
                                            mdl.create_connection(minus_port,mdl.term(pack_contactor,"a_in"))
                                            mdl.create_connection(mdl.term(pack_contactor,"a_out"),mdl.term(pack_inductor,"n_node"))
                                            mdl.create_connection(mdl.term(pack_inductor,"p_node"),mdl.term(pack_resistor,"n_node"))
                                            mdl.create_connection(mdl.term(bus_split,"out"),mdl.term(pack_contactor,"ctrl_in"))
                        
                                            if int(i) % 16 != 0:
                                                mdl.create_connection(mdl.term(bus_split,"out"+str(i)),mdl.term(bc[i-1],"T"))
                                                mdl.create_connection(mdl.term(bc[i],"P"),mdl.term(bc[i-1],"N"))
                        
                        
                        
                        
                                else:
                                    #battery connection between cells
                                    mdl.create_connection(mdl.term(bc[i],"P"),mdl.term(bc[i-1],"N"))
                                    mdl.create_connection(mdl.term(bus_split,"out"+str(i)),mdl.term(bc[i-1],"T"))
                        
                        
                        #Update Battery Slave, Signal Pickers, and Create Connections
                        mdl.create_connection(mdl.term(bus_split, "out" + str(new_value)),mdl.term(bc[new_value-1],"T"))
                        
                        battery_secondary_submask_handle = mdl.get_item(name = "Battery Secondary",parent = component_handle)
                        battery_secondary_signal_pickers = []
                        battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Current", parent = battery_secondary_submask_handle))
                        battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Temps", parent = battery_secondary_submask_handle))
                        battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Voltage", parent = battery_secondary_submask_handle))
                        battery_secondary_signal_pickers.append(mdl.get_item(name = "BC SOC", parent = battery_secondary_submask_handle))
                        
                        #update the signal pickers in the battery slave for the new cell value
                        for sp in battery_secondary_signal_pickers:
                            mdl.set_property_value(mdl.prop(sp,"prefix"),mdl.get_name(component_handle) + '.Battery Cell')
                            mdl.set_property_value(mdl.prop(sp,"n"),new_value)
                        
                        # connect battery slave to join and slave out
                        secondary_join = mdl.create_component(type_name = 'Bus Join',
                                                                parent = component_handle,
                                                                rotation = const.ROTATION_UP,
                                                                name = 'Secondary Join',
                                                                position = (8675,7900+int(new_value)*180)
                                                                )
                        
                        mdl.set_property_value(mdl.prop(secondary_join,"inputs"),3)
                        battery_secondary_terminals = []
                        battery_secondary_terminals.append(mdl.term(battery_secondary_submask_handle,"Temperatures"))
                        battery_secondary_terminals.append(mdl.term(battery_secondary_submask_handle,"Currents"))
                        battery_secondary_terminals.append(mdl.term(battery_secondary_submask_handle,"Voltages"))
                        
                        for i in range(len(battery_secondary_terminals)):
                            if int(i) == 0:
                                mdl.create_connection(mdl.term(secondary_join,"in"),battery_secondary_terminals[i])
                                mdl.create_connection(mdl.term(secondary_join,"out"),secondary_out_port)
                            else:
                                mdl.create_connection(mdl.term(secondary_join,"in" + str(i)),battery_secondary_terminals[i])
                        
                        # update the Volt_String connections
                        volt_string = mdl.get_item(name = "Volt_String", parent = component_handle)
                        if int(new_value) <= 16:
                        
                            #mdl.set_property_value(mdl.prop(volt_string,"sig_output"),"True")
                            #mdl.create_connection(mdl.term(slave_join,"in3"),mdl.term(volt_string,"out"))
                            mdl.create_connection(mdl.term(bc[0],"P"),mdl.term(volt_string,"p_node"))
                            mdl.create_connection(mdl.term(bc[int(new_value-1)],"N"),mdl.term(volt_string,"n_node"))
                            mdl.set_position(volt_string, (8175, 8000+int(new_value)*180))
                            mdl.set_position(battery_secondary_submask_handle, (8475, 7900+int(new_value)*180))
                        
                        else:
                            mdl.create_connection(mdl.term(core_coupling[0],"a_out"),mdl.term(volt_string,"p_node"))
                            mdl.create_connection(mdl.term(core_coupling[int(j)],"b_out"),mdl.term(volt_string,"n_node"))
                            mdl.set_position(volt_string, (8175, 8000+int(new_value)*180))
                            mdl.set_position(battery_secondary_submask_handle, (8475, 7900+int(new_value)*180))
                    ENDCODE
                }

                execution_rate {
                    label = "Execution Rate"
                    widget = edit
                    type = generic
                    default_value = "exec_rate_fast"

                    CODE property_value_changed
                        if new_value != old_value:
                            
                            #Update Signal pickers
                            component_handle = mdl.get_sub_level_handle(container_handle)
                            battery_secondary_submask_handle = mdl.get_item(name = "Battery Secondary",parent = component_handle)
                            battery_secondary_signal_pickers = []
                            battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Current", parent = battery_slave_submask_handle))
                            battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Temps", parent = battery_slave_submask_handle))
                            battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Voltage", parent = battery_slave_submask_handle))
                            battery_secondary_signal_pickers.append(mdl.get_item(name = "BC SOC", parent = battery_slave_submask_handle))
                            
                            for sp in battery_secondary_signal_pickers:
                                mdl.set_property_value(mdl.prop(sp,"execution_rate"),"execution_rate")
                    ENDCODE
                }

                SOC_vector {
                    label = "State of Charge Vector"
                    widget = edit
                    type = generic
                    default_value = "[0.00000, 0.00500, 0.01000, 0.01500, 0.02000, 0.02500, 0.03000, 0.03500, 0.04000, 0.04500, 0.05000, 0.05500, 0.06000, 0.06500, 0.07000, 0.07500, 0.08000, 0.08500, 0.09000, 0.09500, 0.10000, 0.10500, 0.11000, 0.11500, 0.12000, 0.12500, 0.13000, 0.13500, 0.14000, 0.14500, 0.15000, 0.15500, 0.16000, 0.16500, 0.17000, 0.17500, 0.18000, 0.18500, 0.19000, 0.19500, 0.20000, 0.20500, 0.21000, 0.21500, 0.22000, 0.22500, 0.23000, 0.23500, 0.24000, 0.24500, 0.25000, 0.25500, 0.26000, 0.26500, 0.27000, 0.27500, 0.28000, 0.28500, 0.29000, 0.29500, 0.30000, 0.30500, 0.31000, 0.31500, 0.32000, 0.32500, 0.33000, 0.33500, 0.34000, 0.34500, 0.35000, 0.35500, 0.36000, 0.36500, 0.37000, 0.37500, 0.38000, 0.38500, 0.39000, 0.39500, 0.40000, 0.40500, 0.41000, 0.41500, 0.42000, 0.42500, 0.43000, 0.43500, 0.44000, 0.44500, 0.45000, 0.45500, 0.46000, 0.46500, 0.47000, 0.47500, 0.48000, 0.48500, 0.49000, 0.49500, 0.50000, 0.50500, 0.51000, 0.51500, 0.52000, 0.52500, 0.53000, 0.53500, 0.54000, 0.54500, 0.55000, 0.55500, 0.56000, 0.56500, 0.57000, 0.57500, 0.58000, 0.58500, 0.59000, 0.59500, 0.60000, 0.60500, 0.61000, 0.61500, 0.62000, 0.62500, 0.63000, 0.63500, 0.64000, 0.64500, 0.65000, 0.65500, 0.66000, 0.66500, 0.67000, 0.67500, 0.68000, 0.68500, 0.69000, 0.69500, 0.70000, 0.70500, 0.71000, 0.71500, 0.72000, 0.72500, 0.73000, 0.73500, 0.74000, 0.74500, 0.75000, 0.75500, 0.76000, 0.76500, 0.77000, 0.77500, 0.78000, 0.78500, 0.79000, 0.79500, 0.80000, 0.80500, 0.81000, 0.81500, 0.82000, 0.82500, 0.83000, 0.83500, 0.84000, 0.84500, 0.85000, 0.85500, 0.86000, 0.86500, 0.87000, 0.87500, 0.88000, 0.88500, 0.89000, 0.89500, 0.90000, 0.90500, 0.91000, 0.91500, 0.92000, 0.92500, 0.93000, 0.93500, 0.94000, 0.94500, 0.95000, 0.95500, 0.96000, 0.96500, 0.97000, 0.97500, 0.98000, 0.98500, 0.99000, 0.99500, 1.00000]"
                }

                temp_vector {
                    label = "Temperatures Vector"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                }

                OCV_vector {
                    label = "Open Circuit Voltage"
                    widget = edit
                    type = generic
                    default_value = "[[ 2.81376455, 2.934249, 3.01131295, 3.0707406, 3.12232055, 3.1679386999999997, 3.20864785, 3.2450991, 3.27819715, 3.30856405, 3.3362725999999996, 3.3618633499999997, 3.38570235, 3.40775795, 3.42830425, 3.4476403500000004, 3.4655972, 3.48235125, 3.4982734000000004, 3.5123286499999997, 3.52428065, 3.5322503000000003, 3.536190725, 3.538614355, 3.5410027349999997, 3.543410505, 3.54570155, 3.548176695, 3.55074616, 3.55332738, 3.5560948150000002, 3.5590690300000003, 3.5622155269999998, 3.5656399850000002, 3.569116135, 3.5732180099999997, 3.57727722, 3.5820934199999996, 3.58702369, 3.5923769, 3.5981162299999996, 3.60387865, 3.6098619999999997, 3.61578425, 3.6219618000000002, 3.6279250050000003, 3.633843695, 3.6400532699999997, 3.646100845, 3.6525218749999997, 3.659006475, 3.6658932699999998, 3.6723717, 3.67845187, 3.6843657899999998, 3.690319095, 3.696598375, 3.70317101, 3.7103087649999997, 3.71751191, 3.72478503, 3.7312556949999998, 3.737126875, 3.7421215, 3.746753425, 3.7512470799999997, 3.7557191, 3.759948005, 3.7641692570000003, 3.7683243400000004, 3.77226982, 3.776130865, 3.77996065, 3.7834905, 3.78724775, 3.79068595, 3.79405435, 3.79739885, 3.8008169, 3.8037784, 3.80672915, 3.80976375, 3.81294495, 3.8155956, 3.81841755, 3.8211345, 3.82375915, 3.826463, 3.8289732, 3.83148675, 3.8339139, 3.8364958500000004, 3.8389766, 3.84130125, 3.8436186, 3.84593155, 3.8484112, 3.8508698999999997, 3.853017, 3.8553768, 3.8575925, 3.8597776, 3.8618757, 3.8639596, 3.8662289, 3.8684966, 3.8704239, 3.8727584, 3.8746679, 3.8767636000000003, 3.8789283, 3.88108645, 3.88336145, 3.88554035, 3.8876272999999997, 3.88979185, 3.8919731499999997, 3.89423455, 3.89660415, 3.89878675, 3.9010609, 3.9034554999999997, 3.9058273, 3.9083077999999998, 3.9107870499999997, 3.9134431, 3.91605185, 3.9188395000000003, 3.92173155, 3.9245562, 3.9278719, 3.93123635, 3.93501795, 3.9392118, 3.9434215, 3.9476625, 3.9522793, 3.956863, 3.9614228, 3.9661213500000003, 3.97056845, 3.97496085, 3.97923145, 3.98304985, 3.9867527999999997, 3.990355, 3.9938599000000004, 3.997107, 4.0001812, 4.0032136000000005, 4.0059932, 4.0087594499999994, 4.011432500000001, 4.0139152, 4.0163138, 4.0185217, 4.02070895, 4.022900900000001, 4.0249913, 4.0268188, 4.02872455, 4.03070295, 4.0323274, 4.0341031, 4.03572435, 4.0374238, 4.03904715, 4.0406617, 4.0421721999999995, 4.04385255, 4.04555215, 4.0469809, 4.048781399999999, 4.05039585, 4.052104, 4.05390415, 4.0557043, 4.057513849999999, 4.0593374, 4.0614338, 4.0635322, 4.0657283, 4.0680112, 4.0704244, 4.07274935, 4.075507399999999, 4.0782211, 4.0812930000000005, 4.08431865, 4.08759685, 4.0910807, 4.0947777499999995, 4.0989474, 4.10329865, 4.10799, 4.1129271, 4.1185746, 4.1244995, 4.1311105999999995, 4.138731625, 4.14890576], [2.8100227500000003, 2.916445, 2.99576475, 3.057303, 3.11000275, 3.1564935, 3.19803925, 3.2350955, 3.26858575, 3.2992202500000003, 3.3273629999999996, 3.35331675, 3.37731175, 3.39958975, 3.4203212499999998, 3.4398017500000004, 3.457986, 3.47495625, 3.4909670000000004, 3.50564325, 3.51860325, 3.5288515, 3.535353625, 3.539071775, 3.5418136749999998, 3.544252525, 3.54650775, 3.5488834750000002, 3.5513308, 3.5538369, 3.556474075, 3.55934515, 3.5622776349999996, 3.565399925, 3.5687806749999997, 3.57249005, 3.5763861, 3.5808671, 3.5855184500000004, 3.5906845, 3.5961811499999996, 3.60179325, 3.60771, 3.6137212499999998, 3.619809, 3.626025025, 3.632018475, 3.63826635, 3.644504225, 3.6510093749999997, 3.657832375, 3.66466635, 3.6710585, 3.67705935, 3.6830289499999997, 3.689195475, 3.6957918750000003, 3.70265505, 3.709943825, 3.71715955, 3.72392515, 3.729878475, 3.735234375, 3.7402075, 3.744967125, 3.7498354, 3.7545954999999998, 3.759340025, 3.764046285, 3.7688217, 3.7733491, 3.777854325, 3.78220325, 3.7862525, 3.7902387500000003, 3.79382975, 3.79747175, 3.80099425, 3.8044845, 3.807692, 3.81084575, 3.81401875, 3.81712475, 3.819978, 3.82288775, 3.8256725, 3.82839575, 3.831115, 3.833666, 3.83623375, 3.8387695, 3.8412792500000004, 3.843683, 3.84610625, 3.848493, 3.85085775, 3.853256, 3.8555495, 3.857885, 3.860084, 3.8623624999999997, 3.864488, 3.8665785, 3.868598, 3.8707445, 3.872883, 3.8749195, 3.876992, 3.8789395, 3.881018, 3.8830415, 3.88503225, 3.88720725, 3.88930175, 3.8913365, 3.89335925, 3.8954657499999996, 3.89757275, 3.89982075, 3.90193375, 3.9041045000000003, 3.9064775, 3.9087365, 3.911139, 3.91353525, 3.9160155, 3.91865925, 3.9213975000000003, 3.92425775, 3.927181, 3.9305595, 3.93418175, 3.93828975, 3.942859, 3.9479075, 3.9531125, 3.9585965, 3.9639149999999996, 3.968714, 3.97340675, 3.9776422499999997, 3.98160425, 3.98535725, 3.98884925, 3.992164, 3.995375, 3.9984995000000003, 4.001535, 4.004506, 4.007268, 4.0099659999999995, 4.01259725, 4.015162500000001, 4.017576, 4.019969, 4.0222085, 4.02434475, 4.026504500000001, 4.0285565, 4.030494, 4.03242275, 4.03431475, 4.036036999999999, 4.0377155, 4.03942175, 4.041119, 4.04283575, 4.0445085, 4.046061, 4.047662750000001, 4.04936075, 4.050904500000001, 4.052707, 4.05437925, 4.05612, 4.05792075, 4.0597215, 4.06156925, 4.063487, 4.065569, 4.067661, 4.0698415, 4.072056, 4.074522, 4.07694675, 4.079536999999999, 4.0823055, 4.085265000000001, 4.08839325, 4.0915842499999995, 4.0950035, 4.09868875, 4.102737, 4.106893250000001, 4.11155, 4.1162355, 4.1216729999999995, 4.1272975, 4.133553, 4.140458125, 4.149328799999999], [2.80628095, 2.898641, 2.98021655, 3.0438654, 3.09768495, 3.1450483, 3.18743065, 3.2250919, 3.2589743500000004, 3.2898764500000004, 3.3184533999999997, 3.34477015, 3.36892115, 3.39142155, 3.41233825, 3.43196315, 3.4503747999999996, 3.46756125, 3.4836606000000003, 3.4989578499999996, 3.5129258500000002, 3.5254527, 3.534516525, 3.539529195, 3.542624615, 3.545094545, 3.54731395, 3.549590255, 3.55191544, 3.55434642, 3.556853335, 3.55962127, 3.562339743, 3.565159865, 3.568445215, 3.57176209, 3.57549498, 3.5796407799999996, 3.58401321, 3.5889921, 3.5942460699999996, 3.59970785, 3.605558, 3.6116582499999996, 3.6176562, 3.624125045, 3.630193255, 3.63647943, 3.642907605, 3.6494968749999996, 3.656658275, 3.66343943, 3.6697452999999998, 3.67566683, 3.6816921099999997, 3.688071855, 3.694985375, 3.70213909, 3.709578885, 3.71680719, 3.72306527, 3.728501255, 3.7333418750000003, 3.7382934999999997, 3.743180825, 3.74842372, 3.7534718999999996, 3.758732045, 3.7639233130000003, 3.7693190600000004, 3.77442838, 3.779577785, 3.78444585, 3.7890145, 3.79322975, 3.7969735499999997, 3.80088915, 3.80458965, 3.8081521, 3.8116056, 3.81496235, 3.81827375, 3.8213045500000002, 3.8243603999999998, 3.82735795, 3.8302104999999997, 3.83303235, 3.8357669999999997, 3.8383588, 3.84098075, 3.8436251, 3.8460626500000004, 3.8483894000000003, 3.8509112500000002, 3.8533674, 3.85578395, 3.8581008, 3.8602290999999997, 3.862753, 3.8647912, 3.8671325, 3.8691984, 3.8712813, 3.8732364, 3.8752600999999998, 3.8772694, 3.8794151, 3.8812256, 3.8832111, 3.8852724000000003, 3.8871547, 3.88897805, 3.89105305, 3.8930631499999997, 3.8950457, 3.89692665, 3.8989583499999996, 3.90091095, 3.90303735, 3.90508075, 3.9071481, 3.9094995, 3.9116457000000002, 3.9139702, 3.91628345, 3.9185879, 3.92126665, 3.9239555, 3.92678395, 3.9298058, 3.9332471, 3.93712715, 3.9415615500000003, 3.9465062, 3.9523935, 3.9585624999999998, 3.9649137, 3.970967, 3.9760052, 3.9806921500000003, 3.98471605, 3.98824765, 3.99148305, 3.99464865, 3.9975752, 4.000395, 4.0031391, 4.005963, 4.0088308, 4.0113224, 4.0139388, 4.016435049999999, 4.018892500000001, 4.0212368, 4.0236241999999995, 4.0258953, 4.02798055, 4.0301081000000005, 4.032121699999999, 4.0341692, 4.03612095, 4.03792655, 4.0397466, 4.0413279, 4.04311915, 4.0448142, 4.04662435, 4.0483553, 4.0499498, 4.05147295, 4.05316935, 4.0548281, 4.0566325999999995, 4.05836265, 4.060136, 4.06193735, 4.0637387, 4.06562465, 4.0676366, 4.069704199999999, 4.0717898, 4.0739547, 4.0761008, 4.0786196, 4.08114415, 4.083566599999999, 4.0863899, 4.089237000000001, 4.09246785, 4.09557165, 4.0989263, 4.1025997499999995, 4.1065266, 4.11048785, 4.11511, 4.1195439, 4.1247714, 4.1300955, 4.1359954, 4.1421846250000005, 4.1497518399999995]]"
                    unit = "V"
                }

                ir_vector {
                    label = "Internal Resistance"
                    widget = edit
                    type = generic
                    default_value = "[4.6198e-3, 1.7810e-3, 1.1351e-3]"
                    unit = "Ω"
                }

                ce_vector {
                    label = "Coulombic Efficiency"
                    widget = edit
                    type = generic
                    default_value = "[0.98174, 0.99102, 0.98965]"
                }

                tot_capacity {
                    label = "Total Capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                }

                bal_method {
                    label = "Balancing Method"
                    widget = combo
                    combo_values = "Passive", "Direct"
                    type = string
                    default_value = "Passive"
                    no_evaluate

                    CODE property_value_changed
                        cells = mdl.get_property_value(mdl.prop(container_handle,"cell_count"))
                        battery_cell = []
                        component_handle = mdl.get_sub_level_handle(container_handle)
                        
                        for cell in range(cells):
                            battery_cell.append(mdl.get_item(name = 'Battery Cell' + str(cell+1),
                                                            parent = component_handle))
                            if new_value == "Passive":
                                mdl.set_property_value(mdl.prop(battery_cell[cell],"balancing"),"Passive")
                                mdl.set_property_value(mdl.prop(battery_cell[cell],"R_balance"),"r_bal")
                                
                                #mdl.set_property_value(mdl.prop(container_handle,"cell_count"),int(cells+1))
                                #mdl.set_property_value(mdl.prop(container_handle,"cell_count"),int(cells))
                            else:
                                mdl.set_property_value(mdl.prop(battery_cell[cell],"balancing"),"Direct current input")
                    ENDCODE
                }

                SOC_initial {
                    label = "Initial State of Charge"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "%"
                    min_value = 5
                    max_value = 100
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE

                CODE define_icon
                    mdl.set_component_icon_image(item_handle, "images/battery_bank.svg")
                ENDCODE

                CODE init
                    cells = mdl.get_property_value(mdl.prop(item_handle,"cell_count"))
                    
                    component_handle = mdl.get_sub_level_handle(item_handle)
                    
                    battery_secondary_submask_handle = mdl.get_item(name = "Battery Secondary",parent = component_handle)
                    battery_secondary_signal_pickers = []
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Current", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Temps", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Voltage", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC SOC", parent = battery_secondary_submask_handle))
                    
                    #update the signal pickers in the battery slave for the new cell value
                    for sp in battery_secondary_signal_pickers:
                        mdl.set_property_value(mdl.prop(sp,"prefix"),mdl.get_name(component_handle) + '.Battery Cell')
                        mdl.set_property_value(mdl.prop(sp,"n"),cells)
                ENDCODE

                CODE pre_compile
                    # HEADER START
                    cell_count = mdl.get_property_value(mdl.prop(item_handle, "cell_count"))
                    execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    temp_vector = mdl.get_property_value(mdl.prop(item_handle, "temp_vector"))
                    OCV_vector = mdl.get_property_value(mdl.prop(item_handle, "OCV_vector"))
                    ir_vector = mdl.get_property_value(mdl.prop(item_handle, "ir_vector"))
                    ce_vector = mdl.get_property_value(mdl.prop(item_handle, "ce_vector"))
                    tot_capacity = mdl.get_property_value(mdl.prop(item_handle, "tot_capacity"))
                    bal_method = mdl.get_property_value(mdl.prop(item_handle, "bal_method"))
                    SOC_initial = mdl.get_property_value(mdl.prop(item_handle, "SOC_initial"))
                    # HEADER STOP
                    cells = mdl.get_property_value(mdl.prop(item_handle,"cell_count"))
                    
                    component_handle = mdl.get_sub_level_handle(item_handle)
                    
                    battery_secondary_submask_handle = mdl.get_item(name = "Battery Secondary",parent = component_handle)
                    battery_secondary_signal_pickers = []
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Current", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Temps", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Voltage", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC SOC", parent = battery_secondary_submask_handle))
                    
                    #update the signal pickers in the battery slave for the new cell value
                    for sp in battery_secondary_signal_pickers:
                        mdl.set_property_value(mdl.prop(sp,"prefix"),mdl.get_name(component_handle) + '.Battery Cell')
                        mdl.set_property_value(mdl.prop(sp,"n"),cells)
                ENDCODE
            }
        }
        [
            position = 1264, 1960
            size = 128, 112
        ]

        component "core/Signal Controlled Current Source" Isp1 {
        }
        [
            position = 2016, 2216
            rotation = right
            scale = 1, -1
            size = 64, 32
        ]

        component "core/SCADA Input" "Current Source" {
            execution_rate = "exec_rate_fast"
            unit = ""
        }
        [
            position = 2192, 2240
            scale = -1, 1
        ]

        component "core/Product" Product1 {
        }
        [
            position = 2096, 2216
            scale = -1, 1
        ]

        component Subsystem "Battery Stack 1" {
            layout = dynamic
            component "core/Voltage Measurement" Volt_String {
                execution_rate = "exec_rate_fast"
            }
            [
                position = 8176, 8544
                rotation = right
                size = 64, 32
            ]

            component Subsystem "Battery Secondary" {
                layout = dynamic
                component Subsystem "BC Temps" {
                    layout = dynamic
                    component "core/Bus Join" "Bus Join1" {
                        inputs = "3"
                    }
                    [
                        position = 8128, 8352
                    ]

                    component "core/Signal Picker Source" SP0 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell1.Temperature.value"
                    }
                    [
                        position = 8000, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP1 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell2.Temperature.value"
                    }
                    [
                        position = 7928, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP2 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell3.Temperature.value"
                    }
                    [
                        position = 7856, 8080
                        rotation = right
                    ]

                    port Out {
                        label = "out"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8248, 8352
                    ]

                    connect "Bus Join1.out" Out as Connection1
                    connect SP0.out "Bus Join1.in" as Connection2
                    connect SP1.out "Bus Join1.in1" as Connection3
                    connect SP2.out "Bus Join1.in2" as Connection4

                    Ts = "execution_rate"
                    n = "3"
                    prefix = "Battery Stack 1.Battery Cell"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Signal Picker Battery Cell<br></br>==========================<br></br>Collects probes from battery Cells with Signal picker and joins them to a vector.<br></br>It collects from battery cells:<br></br>\"\'Prefix of element\'+1..n\" </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">the signal named with \"variable name\"</p></body></html>"

                        Ts {
                            label = "execution rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                
                                
                                # Change settings execution rate
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                       mdl.set_property_value(mdl.prop(con, "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                            ENDCODE
                        }

                        n {
                            label = "number"
                            widget = edit
                            type = generic
                            default_value = "2"
                            no_evaluate

                            CODE property_value_changed
                                from typhoon.api.schematic_editor import const
                                from typhoon.api.schematic_editor.const import ITEM_PORT
                                
                                # Enable/disable BW property
                                #if new_value:
                                #    mdl.enable_property(mdl.prop(container_handle, "fc"))
                                #else:
                                #    mdl.disable_property(mdl.prop(container_handle, "fc"))
                                
                                if new_value != old_value:
                                    # Do this only if the new value is different from old value
                                    component_handle = mdl.get_sub_level_handle(container_handle)
                                    
                                    
                                    # all old signal picker
                                    for i in range(int(old_value)) : 
                                        sp = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                        if sp:
                                            mdl.delete_item(sp)
                                        
                                    # change Join
                                    bj = mdl.get_item(name="Bus Join1", parent=component_handle)
                                    if bj:
                                        mdl.set_property_value(mdl.prop(bj, "inputs"), new_value)
                                
                                    
                                    # Create new components
                                    prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                    name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                    if name == "It" :
                                        var_name = "It.Mask@top.current"
                                    else :
                                        var_name = name+".value"
                                    
                                    con = []
                                    for i in range(int(new_value)) :
                                        con.append(mdl.create_component(type_name="core/Signal Picker Source",
                                                                 parent=component_handle,
                                                                 name="SP"+str(i),
                                                                 position = (8000-i*70, 8080),
                                                                 rotation = "right"))
                                    
                                        mdl.set_property_value(mdl.prop(con[i], "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                                        mdl.set_property_value(mdl.prop(con[i], "signal_chooser"), prefix+str(i+1)+"."+var_name)
                                       
                                
                                        # Create connections
                                        if i == 0 :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"))
                                        else :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"+str(i)))
                            ENDCODE
                        }

                        prefix {
                            label = "Prefix of element"
                            widget = edit
                            type = generic
                            default_value = "Battery Cell"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        name {
                            label = "variable name"
                            widget = combo
                            combo_values = "It", "Cell voltage", "SOC", "SOH", "OCV", "Internal resistance", "Total capacity", "Balancing current", "Cell current", "Temperature", "Hysteresis voltage"
                            type = string
                            default_value = "Temperature"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7288, 8184
                    size = 64, 48
                ]

                component Subsystem "BC Voltage" {
                    layout = dynamic
                    component "core/Bus Join" "Bus Join1" {
                        inputs = "3"
                    }
                    [
                        position = 8128, 8352
                    ]

                    component "core/Signal Picker Source" SP0 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell1.Cell voltage.value"
                    }
                    [
                        position = 8000, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP1 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell2.Cell voltage.value"
                    }
                    [
                        position = 7928, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP2 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell3.Cell voltage.value"
                    }
                    [
                        position = 7856, 8080
                        rotation = right
                    ]

                    port Out {
                        label = "out"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8248, 8352
                    ]

                    connect "Bus Join1.out" Out as Connection1
                    connect SP0.out "Bus Join1.in" as Connection2
                    connect SP1.out "Bus Join1.in1" as Connection3
                    connect SP2.out "Bus Join1.in2" as Connection4

                    Ts = "execution_rate"
                    n = "3"
                    prefix = "Battery Stack 1.Battery Cell"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Signal Picker Battery Cell<br></br>==========================<br></br>Collects probes from battery Cells with Signal picker and joins them to a vector.<br></br>It collects from battery cells:<br></br>\"\'Prefix of element\'+1..n\" </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">the signal named with \"variable name\"</p></body></html>"

                        Ts {
                            label = "execution rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                
                                
                                # Change settings execution rate
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                       mdl.set_property_value(mdl.prop(con, "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                            ENDCODE
                        }

                        n {
                            label = "number"
                            widget = edit
                            type = generic
                            default_value = "2"
                            no_evaluate

                            CODE property_value_changed
                                from typhoon.api.schematic_editor import const
                                from typhoon.api.schematic_editor.const import ITEM_PORT
                                
                                # Enable/disable BW property
                                #if new_value:
                                #    mdl.enable_property(mdl.prop(container_handle, "fc"))
                                #else:
                                #    mdl.disable_property(mdl.prop(container_handle, "fc"))
                                
                                if new_value != old_value:
                                    # Do this only if the new value is different from old value
                                    component_handle = mdl.get_sub_level_handle(container_handle)
                                    
                                    
                                    # all old signal picker
                                    for i in range(int(old_value)) : 
                                        sp = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                        if sp:
                                            mdl.delete_item(sp)
                                        
                                    # change Join
                                    bj = mdl.get_item(name="Bus Join1", parent=component_handle)
                                    if bj:
                                        mdl.set_property_value(mdl.prop(bj, "inputs"), new_value)
                                
                                    
                                    # Create new components
                                    prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                    name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                    if name == "It" :
                                        var_name = "It.Mask@top.current"
                                    else :
                                        var_name = name+".value"
                                    
                                    con = []
                                    for i in range(int(new_value)) :
                                        con.append(mdl.create_component(type_name="core/Signal Picker Source",
                                                                 parent=component_handle,
                                                                 name="SP"+str(i),
                                                                 position = (8000-i*70, 8080),
                                                                 rotation = "right"))
                                    
                                        mdl.set_property_value(mdl.prop(con[i], "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                                        mdl.set_property_value(mdl.prop(con[i], "signal_chooser"), prefix+str(i+1)+"."+var_name)
                                       
                                
                                        # Create connections
                                        if i == 0 :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"))
                                        else :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"+str(i)))
                            ENDCODE
                        }

                        prefix {
                            label = "Prefix of element"
                            widget = edit
                            type = generic
                            default_value = "Battery Cell"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        name {
                            label = "variable name"
                            widget = combo
                            combo_values = "It", "Cell voltage", "SOC", "SOH", "OCV", "Internal resistance", "Total capacity", "Balancing current", "Cell current", "Temperature", "Hysteresis voltage"
                            type = string
                            default_value = "Cell voltage"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7288, 8016
                    size = 64, 48
                ]

                component Subsystem "BC Current" {
                    layout = dynamic
                    component "core/Bus Join" "Bus Join1" {
                        inputs = "3"
                    }
                    [
                        position = 8128, 8352
                    ]

                    component "core/Signal Picker Source" SP0 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell1.Cell current.value"
                    }
                    [
                        position = 8000, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP1 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell2.Cell current.value"
                    }
                    [
                        position = 7928, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP2 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell3.Cell current.value"
                    }
                    [
                        position = 7856, 8080
                        rotation = right
                    ]

                    port Out {
                        label = "out"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8248, 8352
                    ]

                    connect "Bus Join1.out" Out as Connection1
                    connect SP0.out "Bus Join1.in" as Connection2
                    connect SP1.out "Bus Join1.in1" as Connection3
                    connect SP2.out "Bus Join1.in2" as Connection4

                    Ts = "execution_rate"
                    n = "3"
                    name = "Cell current"
                    prefix = "Battery Stack 1.Battery Cell"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Signal Picker Battery Cell<br></br>==========================<br></br>Collects probes from battery Cells with Signal picker and joins them to a vector.<br></br>It collects from battery cells:<br></br>\"\'Prefix of element\'+1..n\" </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">the signal named with \"variable name\"</p></body></html>"

                        Ts {
                            label = "execution rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                
                                
                                # Change settings execution rate
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                       mdl.set_property_value(mdl.prop(con, "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                            ENDCODE
                        }

                        n {
                            label = "number"
                            widget = edit
                            type = generic
                            default_value = "2"
                            no_evaluate

                            CODE property_value_changed
                                from typhoon.api.schematic_editor import const
                                from typhoon.api.schematic_editor.const import ITEM_PORT
                                
                                # Enable/disable BW property
                                #if new_value:
                                #    mdl.enable_property(mdl.prop(container_handle, "fc"))
                                #else:
                                #    mdl.disable_property(mdl.prop(container_handle, "fc"))
                                
                                if new_value != old_value:
                                    # Do this only if the new value is different from old value
                                    component_handle = mdl.get_sub_level_handle(container_handle)
                                    
                                    
                                    # all old signal picker
                                    for i in range(int(old_value)) : 
                                        sp = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                        if sp:
                                            mdl.delete_item(sp)
                                        
                                    # change Join
                                    bj = mdl.get_item(name="Bus Join1", parent=component_handle)
                                    if bj:
                                        mdl.set_property_value(mdl.prop(bj, "inputs"), new_value)
                                
                                    
                                    # Create new components
                                    prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                    name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                    if name == "It" :
                                        var_name = "It.Mask@top.current"
                                    else :
                                        var_name = name+".value"
                                    
                                    con = []
                                    for i in range(int(new_value)) :
                                        con.append(mdl.create_component(type_name="core/Signal Picker Source",
                                                                 parent=component_handle,
                                                                 name="SP"+str(i),
                                                                 position = (8000-i*70, 8080),
                                                                 rotation = "right"))
                                    
                                        mdl.set_property_value(mdl.prop(con[i], "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                                        mdl.set_property_value(mdl.prop(con[i], "signal_chooser"), prefix+str(i+1)+"."+var_name)
                                       
                                
                                        # Create connections
                                        if i == 0 :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"))
                                        else :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"+str(i)))
                            ENDCODE
                        }

                        prefix {
                            label = "Prefix of element"
                            widget = edit
                            type = generic
                            default_value = "Battery Cell"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        name {
                            label = "variable name"
                            widget = combo
                            combo_values = "It", "Cell voltage", "SOC", "SOH", "OCV", "Internal resistance", "Total capacity", "Balancing current", "Cell current", "Temperature", "Hysteresis voltage"
                            type = string
                            default_value = "Temperature"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7288, 8344
                    size = 64, 48
                ]

                component Subsystem "BC SOC" {
                    layout = dynamic
                    component "core/Bus Join" "Bus Join1" {
                        inputs = "3"
                    }
                    [
                        position = 8128, 8352
                    ]

                    component "core/Signal Picker Source" SP0 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell1.SOC.value"
                    }
                    [
                        position = 8000, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP1 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell2.SOC.value"
                    }
                    [
                        position = 7928, 8080
                        rotation = right
                    ]

                    component "core/Signal Picker Source" SP2 {
                        execution_rate = "exec_rate_fast"
                        signal_chooser = "......Battery Cell3.SOC.value"
                    }
                    [
                        position = 7856, 8080
                        rotation = right
                    ]

                    port Out {
                        label = "out"
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8248, 8352
                    ]

                    connect "Bus Join1.out" Out as Connection1
                    connect SP0.out "Bus Join1.in" as Connection2
                    connect SP1.out "Bus Join1.in1" as Connection3
                    connect SP2.out "Bus Join1.in2" as Connection4

                    n = "3"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Signal Picker Battery Cell<br></br>==========================<br></br>Collects probes from battery Cells with Signal picker and joins them to a vector.<br></br>It collects from battery cells:<br></br>\"\'Prefix of element\'+1..n\" </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">the signal named with \"variable name\"</p></body></html>"

                        Ts {
                            label = "execution rate"
                            widget = edit
                            type = generic
                            default_value = "execution_rate"

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                
                                
                                # Change settings execution rate
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                       mdl.set_property_value(mdl.prop(con, "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                            ENDCODE
                        }

                        n {
                            label = "number"
                            widget = edit
                            type = generic
                            default_value = "7"
                            no_evaluate

                            CODE property_value_changed
                                from typhoon.api.schematic_editor import const
                                from typhoon.api.schematic_editor.const import ITEM_PORT
                                
                                # Enable/disable BW property
                                #if new_value:
                                #    mdl.enable_property(mdl.prop(container_handle, "fc"))
                                #else:
                                #    mdl.disable_property(mdl.prop(container_handle, "fc"))
                                
                                if new_value != old_value:
                                    # Do this only if the new value is different from old value
                                    component_handle = mdl.get_sub_level_handle(container_handle)
                                    
                                    
                                    # all old signal picker
                                    for i in range(int(old_value)) : 
                                        sp = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                        if sp:
                                            mdl.delete_item(sp)
                                        
                                    # change Join
                                    bj = mdl.get_item(name="Bus Join1", parent=component_handle)
                                    if bj:
                                        mdl.set_property_value(mdl.prop(bj, "inputs"), new_value)
                                
                                    
                                    # Create new components
                                    prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                    name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                    if name == "It" :
                                        var_name = "It.Mask@top.current"
                                    else :
                                        var_name = name+".value"
                                    
                                    con = []
                                    for i in range(int(new_value)) :
                                        con.append(mdl.create_component(type_name="core/Signal Picker Source",
                                                                 parent=component_handle,
                                                                 name="SP"+str(i),
                                                                 position = (8000-i*70, 8080),
                                                                 rotation = "right"))
                                    
                                        mdl.set_property_value(mdl.prop(con[i], "execution_rate"), mdl.get_property_value(mdl.prop(container_handle, "Ts")))
                                        mdl.set_property_value(mdl.prop(con[i], "signal_chooser"), prefix+str(i+1)+"."+var_name)
                                       
                                
                                        # Create connections
                                        if i == 0 :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"))
                                        else :
                                            mdl.create_connection(mdl.term(con[i], "out"), mdl.term(bj, "in"+str(i)))
                            ENDCODE
                        }

                        prefix {
                            label = "Prefix of element"
                            widget = edit
                            type = generic
                            default_value = "Battery Stack 1.Battery Cell"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        name {
                            label = "variable name"
                            widget = combo
                            combo_values = "It", "Cell voltage", "SOC", "SOH", "OCV", "Internal resistance", "Total capacity", "Balancing current", "Cell current", "Temperature", "Hysteresis voltage"
                            type = string
                            default_value = "SOC"
                            no_evaluate

                            CODE property_value_changed
                                component_handle = mdl.get_sub_level_handle(container_handle)
                                
                                # Get parameters
                                n = int(mdl.get_property_value(mdl.prop(container_handle, "n")))
                                prefix = str(mdl.get_property_value(mdl.prop(container_handle, "prefix")))
                                name = str(mdl.get_property_value(mdl.prop(container_handle, "name")))
                                if name == "It" :
                                    var_name = "It.Mask@top.current"
                                else :
                                    var_name = name+".value"
                                
                                
                                
                                # Change settings signal_chooser
                                for i in range(int(n)) :
                                    con = mdl.get_item(name="SP"+str(i), parent=component_handle)
                                    if con :
                                        mdl.set_property_value(mdl.prop(con, "signal_chooser"), prefix+str(i+1)+"."+var_name)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7288, 7880
                    size = 64, 48
                ]

                component "core/Termination" Termination1 {
                }
                [
                    position = 7424, 7880
                ]

                port Temperatures {
                    label = "Temps"
                    position = right:3
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7472, 8184
                ]

                port Voltages {
                    label = "Volts"
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7472, 8016
                ]

                port Currents {
                    label = "Currents"
                    position = right:2
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7472, 8344
                ]

                connect "BC Temps.Out" Temperatures as Connection14
                connect Voltages "BC Voltage.Out" as Connection39
                [
                    breakpoints = 7384, 8016
                ]
                connect "BC Current.Out" Currents as Connection40
                [
                    breakpoints = 7376, 8344
                ]
                connect "BC SOC.Out" Termination1.in as Connection41

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Battery Slave Module</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">=======================</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Contains the signal pickers that read</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">temperature, cell volt, and current from </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">each cell.</p></body></html>"

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE
                }
            }
            [
                position = 8472, 8440
                scale = 1, -1
                size = 112, 152
            ]

            component "core/Bus Split" Secondary_Split {
                outputs = "[1, 2, 2, 2]"
            }
            [
                position = 7000, 8248
                rotation = right
                scale = -1, 1
            ]

            component "core/Resistor" string_resistor {
                resistance = "0.001"
            }
            [
                position = 8000, 8792
                rotation = right
            ]

            component "core/Inductor" string_inductor {
                inductance = "1e-05"
            }
            [
                position = 8000, 8888
                rotation = right
            ]

            component "core/Single Pole Single Throw Contactor" string_contactor {
                ctrl_src = "Model"
            }
            [
                position = 8000, 9024
                rotation = left
                size = 64, 32
            ]

            component "core/Battery Cell" "Battery Cell1" {
                Init_SOC = "SOC_initial"
                OCV = "OCV_vector"
                Q_total = "tot_capacity"
                R0 = "ir_vector"
                R_balance = "r_bal"
                SOC_vector = "SOC_vector"
                T_vector = "temp_vector"
                balancing = "Passive"
                eta = "ce_vector"
                execution_rate = "execution_rate"
                meas_Ibal = "True"
                meas_Icell = "True"
                meas_SOC = "True"
                meas_T = "True"
                thermal_flag = "False"
            }
            [
                position = 8000, 8352
                size = 32, 64
            ]

            component "core/Battery Cell" "Battery Cell2" {
                Init_SOC = "SOC_initial"
                OCV = "OCV_vector"
                Q_total = "tot_capacity"
                R0 = "ir_vector"
                R_balance = "r_bal"
                SOC_vector = "SOC_vector"
                T_vector = "temp_vector"
                balancing = "Passive"
                eta = "ce_vector"
                execution_rate = "execution_rate"
                meas_Ibal = "True"
                meas_Icell = "True"
                meas_SOC = "True"
                meas_T = "True"
                thermal_flag = "False"
            }
            [
                position = 8000, 8496
                size = 32, 64
            ]

            component "core/Battery Cell" "Battery Cell3" {
                Init_SOC = "SOC_initial"
                OCV = "OCV_vector"
                Q_total = "tot_capacity"
                R0 = "ir_vector"
                R_balance = "r_bal"
                SOC_vector = "SOC_vector"
                T_vector = "temp_vector"
                balancing = "Passive"
                eta = "ce_vector"
                execution_rate = "execution_rate"
                meas_Ibal = "True"
                meas_Icell = "True"
                meas_SOC = "True"
                meas_T = "True"
                thermal_flag = "False"
            }
            [
                position = 8000, 8648
                size = 32, 64
            ]

            component "core/Bus Join" "Secondary Join" {
                inputs = "3"
            }
            [
                position = 8672, 8440
            ]

            port plus {
                position = top:1
                kind = pe
                direction =  in
            }
            [
                position = 8000, 8200
                rotation = right
            ]

            port minus {
                position = bottom:1
                kind = pe
                direction =  in
            }
            [
                position = 8000, 9104
                rotation = left
            ]

            port "secondary in" {
                position = right:1
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7600, 8200
            ]

            port "secondary out" {
                position = right:2
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8800, 8440
            ]

            connect "secondary in" Secondary_Split.in as Connection1
            connect "Battery Cell1.P" plus as Connection2
            connect minus string_contactor.a_in as Connection3
            connect string_contactor.a_out string_inductor.n_node as Connection4
            connect string_inductor.p_node string_resistor.n_node as Connection5
            connect Secondary_Split.out string_contactor.ctrl_in as Connection6
            connect "Battery Cell1.N" "Battery Cell2.P" as Connection7
            connect Secondary_Split.out1 "Battery Cell1.T" as Connection8
            connect "Battery Cell2.N" "Battery Cell3.P" as Connection9
            connect "Battery Cell3.N" string_resistor.p_node as Connection10
            connect Secondary_Split.out2 "Battery Cell2.T" as Connection11
            connect Secondary_Split.out3 "Battery Cell3.T" as Connection12
            connect "Secondary Join.in" "Battery Secondary.Temperatures" as Connection13
            connect "Secondary Join.out" "secondary out" as Connection14
            connect "Secondary Join.in1" "Battery Secondary.Currents" as Connection15
            connect "Secondary Join.in2" "Battery Secondary.Voltages" as Connection16
            connect "Battery Cell1.P" Volt_String.p_node as Connection17
            connect "Battery Cell3.N" Volt_String.n_node as Connection18

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This component represents a </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">stack of battery cells in series, </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">along with the control components </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">that works with the BMS</p></body></html>"

                cell_count {
                    label = "Number of Cells"
                    widget = edit
                    type = generic
                    default_value = "3"

                    CODE property_value_changed
                        from typhoon.api.schematic_editor import const
                        from typhoon.api.schematic_editor.const import ITEM_PORT, ITEM_TAG, KIND_PE,KIND_SP,ITEM_CONNECTION,ROTATION_RIGHT,ROTATION_LEFT,ROTATION_UP,ROTATION_DOWN
                        
                        
                        component_handle = mdl.get_sub_level_handle(container_handle)
                            
                        # Remove all old tags, cells, joins, ports, connections, while leaving the battery slave
                            
                        connections = mdl.get_items(parent = component_handle, item_type = const.ITEM_CONNECTION)
                        for connection in connections:
                            if connection:
                                mdl.delete_item(connection)
                            
                        ports = mdl.get_items(parent=component_handle, item_type = const.ITEM_PORT)
                        for port in ports:
                            if port:
                                mdl.delete_item(port)
                                
                        
                        cells = mdl.get_items(parent=component_handle, item_type = const.ITEM_COMPONENT)
                        if len(cells) > 0:
                            for comp in cells:
                                if comp:
                                    if mdl.get_name(comp) == "Battery Secondary" or mdl.get_name(comp) == "Volt_String":
                                        continue
                                    else:
                                        mdl.delete_item(comp)
                            
                            
                        #recreate plus, minus, and secondary ports
                        plus_port = mdl.create_port(name = 'plus', 
                                                        parent = component_handle, 
                                                        kind = KIND_PE,
                                                        rotation = 'right',
                                                        terminal_position = ('top',1), 
                                                        position = (8000,8200))
                                                        
                        minus_port = mdl.create_port(name = 'minus', 
                                                        parent = component_handle, 
                                                        kind = KIND_PE,
                                                        rotation = 'left',
                                                        terminal_position = ('bottom',1), 
                                                        position = (8000,8200+int(new_value+2)*180))
                                                        
                        secondary_in_port = mdl.create_port(name = 'secondary in', 
                                                        parent = component_handle, 
                                                        kind = KIND_SP,
                                                        direction = const.DIRECTION_IN,
                                                        rotation = 'up',
                                                        terminal_position = ('right',1),
                                                        position = (7600,8200))
                            
                        secondary_out_port = mdl.create_port(name = 'secondary out', 
                                                        parent = component_handle, 
                                                        kind = KIND_SP,
                                                        direction = const.DIRECTION_OUT,
                                                        rotation = 'up',
                                                        terminal_position = ('right',2),
                                                        position = (8800,7900+int(new_value)*180))
                            
                        # Create Bus Split, Resistor, and Contactor
                        bus_split = mdl.create_component(type_name = 'Bus Split',
                                                         parent=component_handle,
                                                         name="Secondary_Split",
                                                         position = (7000, 8250),
                                                         rotation = const.ROTATION_RIGHT,
                                                         flip = const.FLIP_HORIZONTAL)
                        
                        secondary_split_output_array = [1]
                        for i in range(int(new_value)):
                            secondary_split_output_array.append(2)                             
                        mdl.set_property_value(mdl.prop(bus_split,"outputs"),secondary_split_output_array)
                        
                        
                        pack_resistor = mdl.create_component(type_name = 'Resistor',
                                                                parent = component_handle,
                                                                position = (8000,8250+int(new_value)*180),
                                                                rotation = const.ROTATION_RIGHT,
                                                                name = "string_resistor")
                                                                
                        mdl.set_property_value(mdl.prop(pack_resistor,"resistance"),1e-3)
                        
                        pack_inductor = mdl.create_component(type_name = 'Inductor',
                                                                parent = component_handle,
                                                                position = (8000,8350+int(new_value)*180),
                                                                rotation = const.ROTATION_RIGHT,
                                                                name = "string_inductor")
                                                                
                        mdl.set_property_value(mdl.prop(pack_inductor,"inductance"),10e-6)
                            
                        pack_contactor = mdl.create_component(type_name = 'Single Pole Single Throw Contactor',
                                                                    parent = component_handle,
                                                                    position = (8000,int(new_value+1)*180+8300),
                                                                    rotation = const.ROTATION_LEFT,
                                                                    name = "string_contactor")
                            
                        mdl.set_property_value(mdl.prop(pack_contactor,"ctrl_src"),"Model")
                        
                        #Connections 
                        mdl.create_connection(secondary_in_port,mdl.term(bus_split,"in"))
                        
                        # Create battery cells and connections, and core couplings if necessary
                            
                        bc = []
                        core_coupling = []
                        
                        for i in range(int(new_value)) :
                            
                            # Non Parallelized Battery Stacker
                            if int(new_value) <= 16:
                                bc.append(mdl.create_component(type_name = 'Battery Cell',
                                                            parent=component_handle,
                                                            name="Battery Cell"+str(i+1),
                                                            position = (8000, 8350+i*150),
                                                            rotation = const.ROTATION_UP)
                                                            )
                                    
                                mdl.set_property_value(mdl.prop(bc[i],"execution_rate"),"execution_rate")
                                if mdl.get_property_value(mdl.prop(container_handle,"bal_method")) == "Direct":
                                    mdl.set_property_value(mdl.prop(bc[i],"balancing"),"Direct current input")
                                    mdl.set_property_value(mdl.prop(bc[i],"R_balance"),"r_bal")
                                    
                                else:
                                    mdl.set_property_value(mdl.prop(bc[i],"balancing"),"Passive")
                                    mdl.set_property_value(mdl.prop(bc[i],"R_balance"),"r_bal")
                                    
                                    
                                #Include required Signal Probes
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_SOH"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_OCV"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_Rint"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_Q"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_hyst"),"False")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_Ibal"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_SOC"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_Icell"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_T"),"True")
                                
                                    
                                #Inherit Battery Properties from mask
                                mdl.set_property_value(mdl.prop(bc[i],"SOC_vector"),"SOC_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"Init_SOC"),"SOC_initial")
                                mdl.set_property_value(mdl.prop(bc[i],"T_vector"),"temp_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"OCV"),"OCV_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"R0"),"ir_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"Q_total"),"tot_capacity")
                                mdl.set_property_value(mdl.prop(bc[i],"eta"),"ce_vector")
                        
                                # Create connections for battery cells and ports
                                if int(i) == 0:
                                    mdl.create_connection(mdl.term(bc[i],"P"), plus_port)
                                    mdl.create_connection(minus_port,mdl.term(pack_contactor,"a_in"))
                                    mdl.create_connection(mdl.term(pack_contactor,"a_out"),mdl.term(pack_inductor,"n_node"))
                                    mdl.create_connection(mdl.term(pack_inductor,"p_node"),mdl.term(pack_resistor,"n_node"))
                                    mdl.create_connection(mdl.term(bus_split,"out"),mdl.term(pack_contactor,"ctrl_in")) #this will probably be reserved for the contactor connection
                                    
                                    if int(new_value) == 1:
                                        mdl.create_connection(mdl.term(bc[i],"N"),mdl.term(pack_resistor,"p_node"))
                        
                                elif int(i) == int(new_value)-1:
                                    mdl.create_connection(mdl.term(bc[i-1],"N"),mdl.term(bc[i],"P"))
                                    mdl.create_connection(mdl.term(bc[i],"N"), mdl.term(pack_resistor,"p_node"))
                                    mdl.create_connection(mdl.term(bus_split,"out"+str(i)),mdl.term(bc[i-1],"T"))
                        
                                else:
                                    mdl.create_connection(mdl.term(bc[i-1],"N"),mdl.term(bc[i],"P"))
                                    mdl.create_connection(mdl.term(bus_split,"out"+str(i)),mdl.term(bc[i-1],"T"))
                                    
                        
                            
                        
                            # Parallelized Battery Stacker
                            else:
                        
                                bc.append(mdl.create_component(type_name = 'Battery Cell',
                                                            parent=component_handle,
                                                            name="Battery Cell"+str(i+1),
                                                            position = (8000, 8350+i*150),
                                                            rotation = const.ROTATION_UP)
                                                            )
                                
                                mdl.set_property_value(mdl.prop(bc[i],"execution_rate"),"execution_rate")
                        
                                if mdl.get_property_value(mdl.prop(container_handle,"bal_method")) == "Direct":
                                    mdl.set_property_value(mdl.prop(bc[i],"balancing"),"Direct current input")
                                    mdl.set_property_value(mdl.prop(bc[i],"R_balance"),"r_bal")
                                    
                                else:
                                    mdl.set_property_value(mdl.prop(bc[i],"balancing"),"Passive")
                                    mdl.set_property_value(mdl.prop(bc[i],"R_balance"),"r_bal")
                        
                                #Include required Signal Probes
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_SOH"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_OCV"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_Rint"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_Q"),"False")
                                #mdl.set_property_value(mdl.prop(bc[i],"meas_hyst"),"False")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_Ibal"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_SOC"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_Icell"),"True")
                                mdl.set_property_value(mdl.prop(bc[i],"meas_T"),"True")
                                    
                                #Inherit Battery Properties from mask
                                mdl.set_property_value(mdl.prop(bc[i],"SOC_vector"),"SOC_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"Init_SOC"),"SOC_initial")
                                mdl.set_property_value(mdl.prop(bc[i],"T_vector"),"temp_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"OCV"),"OCV_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"R0"),"ir_vector")
                                mdl.set_property_value(mdl.prop(bc[i],"Q_total"),"tot_capacity")
                                mdl.set_property_value(mdl.prop(bc[i],"eta"),"ce_vector")
                        
                        
                                # Create Core Couplings and Connections
                                if int(i) % 16 == 0 or int(i) == int(new_value) -1:
                                    
                                    if int(i) % 16 == 0:
                                        j = int(int(i) / 16) #index for core couplings
                                    
                                        core_coupling.append(mdl.create_component(type_name = "Single Phase Core Coupling",
                                                        parent = component_handle,
                                                        name = "Core Coupling" + str(j+1),
                                                        position = (8250,8600+2200*j),
                                                        rotation = const.ROTATION_UP))
                        
                                        mdl.set_property_value(mdl.prop(core_coupling[j],"snb_type_u"),"R2")
                        
                                    # Connections
                        
                                    if int(i) == 0: # first step
                                        mdl.create_connection(mdl.term(bc[i],"P"),mdl.term(core_coupling[j],"a_in"))
                                        mdl.create_connection(mdl.term(core_coupling[j],"a_out"),plus_port)
                                        #mdl.create_connection(mdl.term(bus_split,"out1"),mdl.term(bc[i-1],"T"))
                        
                                    elif int(i) % 16 == 0 and i > 0 or int(i) == int(new_value) - 1: # connects core couplings >1
                        
                                        # core coupling pairing
                                        if int(i) % 16 == 0:
                                            mdl.create_connection(mdl.term(core_coupling[j],"a_in"),mdl.term(bc[i],"P"))
                                            mdl.create_connection(mdl.term(core_coupling[j-1],"b_in"),mdl.term(bc[i-1],"N"))
                                            mdl.create_connection(mdl.term(core_coupling[j-1],"b_out"),mdl.term(core_coupling[j],"a_out"))
                                            mdl.create_connection(mdl.term(bus_split,"out"+str(i)),mdl.term(bc[i-1],"T"))
                        
                                        # last loop
                                        if int(i) == int(new_value) - 1:
                                            mdl.create_connection(mdl.term(core_coupling[j],"b_out"),mdl.term(pack_resistor,"p_node"))
                                            mdl.create_connection(mdl.term(core_coupling[j],"b_in"),mdl.term(bc[i],"N"))
                        
                                            #cleanup
                                            mdl.create_connection(minus_port,mdl.term(pack_contactor,"a_in"))
                                            mdl.create_connection(mdl.term(pack_contactor,"a_out"),mdl.term(pack_inductor,"n_node"))
                                            mdl.create_connection(mdl.term(pack_inductor,"p_node"),mdl.term(pack_resistor,"n_node"))
                                            mdl.create_connection(mdl.term(bus_split,"out"),mdl.term(pack_contactor,"ctrl_in"))
                        
                                            if int(i) % 16 != 0:
                                                mdl.create_connection(mdl.term(bus_split,"out"+str(i)),mdl.term(bc[i-1],"T"))
                                                mdl.create_connection(mdl.term(bc[i],"P"),mdl.term(bc[i-1],"N"))
                        
                        
                        
                        
                                else:
                                    #battery connection between cells
                                    mdl.create_connection(mdl.term(bc[i],"P"),mdl.term(bc[i-1],"N"))
                                    mdl.create_connection(mdl.term(bus_split,"out"+str(i)),mdl.term(bc[i-1],"T"))
                        
                        
                        #Update Battery Slave, Signal Pickers, and Create Connections
                        mdl.create_connection(mdl.term(bus_split, "out" + str(new_value)),mdl.term(bc[new_value-1],"T"))
                        
                        battery_secondary_submask_handle = mdl.get_item(name = "Battery Secondary",parent = component_handle)
                        battery_secondary_signal_pickers = []
                        battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Current", parent = battery_secondary_submask_handle))
                        battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Temps", parent = battery_secondary_submask_handle))
                        battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Voltage", parent = battery_secondary_submask_handle))
                        battery_secondary_signal_pickers.append(mdl.get_item(name = "BC SOC", parent = battery_secondary_submask_handle))
                        
                        #update the signal pickers in the battery slave for the new cell value
                        for sp in battery_secondary_signal_pickers:
                            mdl.set_property_value(mdl.prop(sp,"prefix"),mdl.get_name(component_handle) + '.Battery Cell')
                            mdl.set_property_value(mdl.prop(sp,"n"),new_value)
                        
                        # connect battery slave to join and slave out
                        secondary_join = mdl.create_component(type_name = 'Bus Join',
                                                                parent = component_handle,
                                                                rotation = const.ROTATION_UP,
                                                                name = 'Secondary Join',
                                                                position = (8675,7900+int(new_value)*180)
                                                                )
                        
                        mdl.set_property_value(mdl.prop(secondary_join,"inputs"),3)
                        battery_secondary_terminals = []
                        battery_secondary_terminals.append(mdl.term(battery_secondary_submask_handle,"Temperatures"))
                        battery_secondary_terminals.append(mdl.term(battery_secondary_submask_handle,"Currents"))
                        battery_secondary_terminals.append(mdl.term(battery_secondary_submask_handle,"Voltages"))
                        
                        for i in range(len(battery_secondary_terminals)):
                            if int(i) == 0:
                                mdl.create_connection(mdl.term(secondary_join,"in"),battery_secondary_terminals[i])
                                mdl.create_connection(mdl.term(secondary_join,"out"),secondary_out_port)
                            else:
                                mdl.create_connection(mdl.term(secondary_join,"in" + str(i)),battery_secondary_terminals[i])
                        
                        # update the Volt_String connections
                        volt_string = mdl.get_item(name = "Volt_String", parent = component_handle)
                        if int(new_value) <= 16:
                        
                            #mdl.set_property_value(mdl.prop(volt_string,"sig_output"),"True")
                            #mdl.create_connection(mdl.term(slave_join,"in3"),mdl.term(volt_string,"out"))
                            mdl.create_connection(mdl.term(bc[0],"P"),mdl.term(volt_string,"p_node"))
                            mdl.create_connection(mdl.term(bc[int(new_value-1)],"N"),mdl.term(volt_string,"n_node"))
                            mdl.set_position(volt_string, (8175, 8000+int(new_value)*180))
                            mdl.set_position(battery_secondary_submask_handle, (8475, 7900+int(new_value)*180))
                        
                        else:
                            mdl.create_connection(mdl.term(core_coupling[0],"a_out"),mdl.term(volt_string,"p_node"))
                            mdl.create_connection(mdl.term(core_coupling[int(j)],"b_out"),mdl.term(volt_string,"n_node"))
                            mdl.set_position(volt_string, (8175, 8000+int(new_value)*180))
                            mdl.set_position(battery_secondary_submask_handle, (8475, 7900+int(new_value)*180))
                    ENDCODE
                }

                execution_rate {
                    label = "Execution Rate"
                    widget = edit
                    type = generic
                    default_value = "exec_rate_fast"

                    CODE property_value_changed
                        if new_value != old_value:
                            
                            #Update Signal pickers
                            component_handle = mdl.get_sub_level_handle(container_handle)
                            battery_secondary_submask_handle = mdl.get_item(name = "Battery Secondary",parent = component_handle)
                            battery_secondary_signal_pickers = []
                            battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Current", parent = battery_slave_submask_handle))
                            battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Temps", parent = battery_slave_submask_handle))
                            battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Voltage", parent = battery_slave_submask_handle))
                            battery_secondary_signal_pickers.append(mdl.get_item(name = "BC SOC", parent = battery_slave_submask_handle))
                            
                            for sp in battery_secondary_signal_pickers:
                                mdl.set_property_value(mdl.prop(sp,"execution_rate"),"execution_rate")
                    ENDCODE
                }

                SOC_vector {
                    label = "State of Charge Vector"
                    widget = edit
                    type = generic
                    default_value = "[0.00000, 0.00500, 0.01000, 0.01500, 0.02000, 0.02500, 0.03000, 0.03500, 0.04000, 0.04500, 0.05000, 0.05500, 0.06000, 0.06500, 0.07000, 0.07500, 0.08000, 0.08500, 0.09000, 0.09500, 0.10000, 0.10500, 0.11000, 0.11500, 0.12000, 0.12500, 0.13000, 0.13500, 0.14000, 0.14500, 0.15000, 0.15500, 0.16000, 0.16500, 0.17000, 0.17500, 0.18000, 0.18500, 0.19000, 0.19500, 0.20000, 0.20500, 0.21000, 0.21500, 0.22000, 0.22500, 0.23000, 0.23500, 0.24000, 0.24500, 0.25000, 0.25500, 0.26000, 0.26500, 0.27000, 0.27500, 0.28000, 0.28500, 0.29000, 0.29500, 0.30000, 0.30500, 0.31000, 0.31500, 0.32000, 0.32500, 0.33000, 0.33500, 0.34000, 0.34500, 0.35000, 0.35500, 0.36000, 0.36500, 0.37000, 0.37500, 0.38000, 0.38500, 0.39000, 0.39500, 0.40000, 0.40500, 0.41000, 0.41500, 0.42000, 0.42500, 0.43000, 0.43500, 0.44000, 0.44500, 0.45000, 0.45500, 0.46000, 0.46500, 0.47000, 0.47500, 0.48000, 0.48500, 0.49000, 0.49500, 0.50000, 0.50500, 0.51000, 0.51500, 0.52000, 0.52500, 0.53000, 0.53500, 0.54000, 0.54500, 0.55000, 0.55500, 0.56000, 0.56500, 0.57000, 0.57500, 0.58000, 0.58500, 0.59000, 0.59500, 0.60000, 0.60500, 0.61000, 0.61500, 0.62000, 0.62500, 0.63000, 0.63500, 0.64000, 0.64500, 0.65000, 0.65500, 0.66000, 0.66500, 0.67000, 0.67500, 0.68000, 0.68500, 0.69000, 0.69500, 0.70000, 0.70500, 0.71000, 0.71500, 0.72000, 0.72500, 0.73000, 0.73500, 0.74000, 0.74500, 0.75000, 0.75500, 0.76000, 0.76500, 0.77000, 0.77500, 0.78000, 0.78500, 0.79000, 0.79500, 0.80000, 0.80500, 0.81000, 0.81500, 0.82000, 0.82500, 0.83000, 0.83500, 0.84000, 0.84500, 0.85000, 0.85500, 0.86000, 0.86500, 0.87000, 0.87500, 0.88000, 0.88500, 0.89000, 0.89500, 0.90000, 0.90500, 0.91000, 0.91500, 0.92000, 0.92500, 0.93000, 0.93500, 0.94000, 0.94500, 0.95000, 0.95500, 0.96000, 0.96500, 0.97000, 0.97500, 0.98000, 0.98500, 0.99000, 0.99500, 1.00000]"
                }

                temp_vector {
                    label = "Temperatures Vector"
                    widget = edit
                    type = generic
                    default_value = "[5, 25, 45]"
                }

                OCV_vector {
                    label = "Open Circuit Voltage"
                    widget = edit
                    type = generic
                    default_value = "[[ 2.81376455, 2.934249, 3.01131295, 3.0707406, 3.12232055, 3.1679386999999997, 3.20864785, 3.2450991, 3.27819715, 3.30856405, 3.3362725999999996, 3.3618633499999997, 3.38570235, 3.40775795, 3.42830425, 3.4476403500000004, 3.4655972, 3.48235125, 3.4982734000000004, 3.5123286499999997, 3.52428065, 3.5322503000000003, 3.536190725, 3.538614355, 3.5410027349999997, 3.543410505, 3.54570155, 3.548176695, 3.55074616, 3.55332738, 3.5560948150000002, 3.5590690300000003, 3.5622155269999998, 3.5656399850000002, 3.569116135, 3.5732180099999997, 3.57727722, 3.5820934199999996, 3.58702369, 3.5923769, 3.5981162299999996, 3.60387865, 3.6098619999999997, 3.61578425, 3.6219618000000002, 3.6279250050000003, 3.633843695, 3.6400532699999997, 3.646100845, 3.6525218749999997, 3.659006475, 3.6658932699999998, 3.6723717, 3.67845187, 3.6843657899999998, 3.690319095, 3.696598375, 3.70317101, 3.7103087649999997, 3.71751191, 3.72478503, 3.7312556949999998, 3.737126875, 3.7421215, 3.746753425, 3.7512470799999997, 3.7557191, 3.759948005, 3.7641692570000003, 3.7683243400000004, 3.77226982, 3.776130865, 3.77996065, 3.7834905, 3.78724775, 3.79068595, 3.79405435, 3.79739885, 3.8008169, 3.8037784, 3.80672915, 3.80976375, 3.81294495, 3.8155956, 3.81841755, 3.8211345, 3.82375915, 3.826463, 3.8289732, 3.83148675, 3.8339139, 3.8364958500000004, 3.8389766, 3.84130125, 3.8436186, 3.84593155, 3.8484112, 3.8508698999999997, 3.853017, 3.8553768, 3.8575925, 3.8597776, 3.8618757, 3.8639596, 3.8662289, 3.8684966, 3.8704239, 3.8727584, 3.8746679, 3.8767636000000003, 3.8789283, 3.88108645, 3.88336145, 3.88554035, 3.8876272999999997, 3.88979185, 3.8919731499999997, 3.89423455, 3.89660415, 3.89878675, 3.9010609, 3.9034554999999997, 3.9058273, 3.9083077999999998, 3.9107870499999997, 3.9134431, 3.91605185, 3.9188395000000003, 3.92173155, 3.9245562, 3.9278719, 3.93123635, 3.93501795, 3.9392118, 3.9434215, 3.9476625, 3.9522793, 3.956863, 3.9614228, 3.9661213500000003, 3.97056845, 3.97496085, 3.97923145, 3.98304985, 3.9867527999999997, 3.990355, 3.9938599000000004, 3.997107, 4.0001812, 4.0032136000000005, 4.0059932, 4.0087594499999994, 4.011432500000001, 4.0139152, 4.0163138, 4.0185217, 4.02070895, 4.022900900000001, 4.0249913, 4.0268188, 4.02872455, 4.03070295, 4.0323274, 4.0341031, 4.03572435, 4.0374238, 4.03904715, 4.0406617, 4.0421721999999995, 4.04385255, 4.04555215, 4.0469809, 4.048781399999999, 4.05039585, 4.052104, 4.05390415, 4.0557043, 4.057513849999999, 4.0593374, 4.0614338, 4.0635322, 4.0657283, 4.0680112, 4.0704244, 4.07274935, 4.075507399999999, 4.0782211, 4.0812930000000005, 4.08431865, 4.08759685, 4.0910807, 4.0947777499999995, 4.0989474, 4.10329865, 4.10799, 4.1129271, 4.1185746, 4.1244995, 4.1311105999999995, 4.138731625, 4.14890576], [2.8100227500000003, 2.916445, 2.99576475, 3.057303, 3.11000275, 3.1564935, 3.19803925, 3.2350955, 3.26858575, 3.2992202500000003, 3.3273629999999996, 3.35331675, 3.37731175, 3.39958975, 3.4203212499999998, 3.4398017500000004, 3.457986, 3.47495625, 3.4909670000000004, 3.50564325, 3.51860325, 3.5288515, 3.535353625, 3.539071775, 3.5418136749999998, 3.544252525, 3.54650775, 3.5488834750000002, 3.5513308, 3.5538369, 3.556474075, 3.55934515, 3.5622776349999996, 3.565399925, 3.5687806749999997, 3.57249005, 3.5763861, 3.5808671, 3.5855184500000004, 3.5906845, 3.5961811499999996, 3.60179325, 3.60771, 3.6137212499999998, 3.619809, 3.626025025, 3.632018475, 3.63826635, 3.644504225, 3.6510093749999997, 3.657832375, 3.66466635, 3.6710585, 3.67705935, 3.6830289499999997, 3.689195475, 3.6957918750000003, 3.70265505, 3.709943825, 3.71715955, 3.72392515, 3.729878475, 3.735234375, 3.7402075, 3.744967125, 3.7498354, 3.7545954999999998, 3.759340025, 3.764046285, 3.7688217, 3.7733491, 3.777854325, 3.78220325, 3.7862525, 3.7902387500000003, 3.79382975, 3.79747175, 3.80099425, 3.8044845, 3.807692, 3.81084575, 3.81401875, 3.81712475, 3.819978, 3.82288775, 3.8256725, 3.82839575, 3.831115, 3.833666, 3.83623375, 3.8387695, 3.8412792500000004, 3.843683, 3.84610625, 3.848493, 3.85085775, 3.853256, 3.8555495, 3.857885, 3.860084, 3.8623624999999997, 3.864488, 3.8665785, 3.868598, 3.8707445, 3.872883, 3.8749195, 3.876992, 3.8789395, 3.881018, 3.8830415, 3.88503225, 3.88720725, 3.88930175, 3.8913365, 3.89335925, 3.8954657499999996, 3.89757275, 3.89982075, 3.90193375, 3.9041045000000003, 3.9064775, 3.9087365, 3.911139, 3.91353525, 3.9160155, 3.91865925, 3.9213975000000003, 3.92425775, 3.927181, 3.9305595, 3.93418175, 3.93828975, 3.942859, 3.9479075, 3.9531125, 3.9585965, 3.9639149999999996, 3.968714, 3.97340675, 3.9776422499999997, 3.98160425, 3.98535725, 3.98884925, 3.992164, 3.995375, 3.9984995000000003, 4.001535, 4.004506, 4.007268, 4.0099659999999995, 4.01259725, 4.015162500000001, 4.017576, 4.019969, 4.0222085, 4.02434475, 4.026504500000001, 4.0285565, 4.030494, 4.03242275, 4.03431475, 4.036036999999999, 4.0377155, 4.03942175, 4.041119, 4.04283575, 4.0445085, 4.046061, 4.047662750000001, 4.04936075, 4.050904500000001, 4.052707, 4.05437925, 4.05612, 4.05792075, 4.0597215, 4.06156925, 4.063487, 4.065569, 4.067661, 4.0698415, 4.072056, 4.074522, 4.07694675, 4.079536999999999, 4.0823055, 4.085265000000001, 4.08839325, 4.0915842499999995, 4.0950035, 4.09868875, 4.102737, 4.106893250000001, 4.11155, 4.1162355, 4.1216729999999995, 4.1272975, 4.133553, 4.140458125, 4.149328799999999], [2.80628095, 2.898641, 2.98021655, 3.0438654, 3.09768495, 3.1450483, 3.18743065, 3.2250919, 3.2589743500000004, 3.2898764500000004, 3.3184533999999997, 3.34477015, 3.36892115, 3.39142155, 3.41233825, 3.43196315, 3.4503747999999996, 3.46756125, 3.4836606000000003, 3.4989578499999996, 3.5129258500000002, 3.5254527, 3.534516525, 3.539529195, 3.542624615, 3.545094545, 3.54731395, 3.549590255, 3.55191544, 3.55434642, 3.556853335, 3.55962127, 3.562339743, 3.565159865, 3.568445215, 3.57176209, 3.57549498, 3.5796407799999996, 3.58401321, 3.5889921, 3.5942460699999996, 3.59970785, 3.605558, 3.6116582499999996, 3.6176562, 3.624125045, 3.630193255, 3.63647943, 3.642907605, 3.6494968749999996, 3.656658275, 3.66343943, 3.6697452999999998, 3.67566683, 3.6816921099999997, 3.688071855, 3.694985375, 3.70213909, 3.709578885, 3.71680719, 3.72306527, 3.728501255, 3.7333418750000003, 3.7382934999999997, 3.743180825, 3.74842372, 3.7534718999999996, 3.758732045, 3.7639233130000003, 3.7693190600000004, 3.77442838, 3.779577785, 3.78444585, 3.7890145, 3.79322975, 3.7969735499999997, 3.80088915, 3.80458965, 3.8081521, 3.8116056, 3.81496235, 3.81827375, 3.8213045500000002, 3.8243603999999998, 3.82735795, 3.8302104999999997, 3.83303235, 3.8357669999999997, 3.8383588, 3.84098075, 3.8436251, 3.8460626500000004, 3.8483894000000003, 3.8509112500000002, 3.8533674, 3.85578395, 3.8581008, 3.8602290999999997, 3.862753, 3.8647912, 3.8671325, 3.8691984, 3.8712813, 3.8732364, 3.8752600999999998, 3.8772694, 3.8794151, 3.8812256, 3.8832111, 3.8852724000000003, 3.8871547, 3.88897805, 3.89105305, 3.8930631499999997, 3.8950457, 3.89692665, 3.8989583499999996, 3.90091095, 3.90303735, 3.90508075, 3.9071481, 3.9094995, 3.9116457000000002, 3.9139702, 3.91628345, 3.9185879, 3.92126665, 3.9239555, 3.92678395, 3.9298058, 3.9332471, 3.93712715, 3.9415615500000003, 3.9465062, 3.9523935, 3.9585624999999998, 3.9649137, 3.970967, 3.9760052, 3.9806921500000003, 3.98471605, 3.98824765, 3.99148305, 3.99464865, 3.9975752, 4.000395, 4.0031391, 4.005963, 4.0088308, 4.0113224, 4.0139388, 4.016435049999999, 4.018892500000001, 4.0212368, 4.0236241999999995, 4.0258953, 4.02798055, 4.0301081000000005, 4.032121699999999, 4.0341692, 4.03612095, 4.03792655, 4.0397466, 4.0413279, 4.04311915, 4.0448142, 4.04662435, 4.0483553, 4.0499498, 4.05147295, 4.05316935, 4.0548281, 4.0566325999999995, 4.05836265, 4.060136, 4.06193735, 4.0637387, 4.06562465, 4.0676366, 4.069704199999999, 4.0717898, 4.0739547, 4.0761008, 4.0786196, 4.08114415, 4.083566599999999, 4.0863899, 4.089237000000001, 4.09246785, 4.09557165, 4.0989263, 4.1025997499999995, 4.1065266, 4.11048785, 4.11511, 4.1195439, 4.1247714, 4.1300955, 4.1359954, 4.1421846250000005, 4.1497518399999995]]"
                    unit = "V"
                }

                ir_vector {
                    label = "Internal Resistance"
                    widget = edit
                    type = generic
                    default_value = "[4.6198e-3, 1.7810e-3, 1.1351e-3]"
                    unit = "Ω"
                }

                ce_vector {
                    label = "Coulombic Efficiency"
                    widget = edit
                    type = generic
                    default_value = "[0.98174, 0.99102, 0.98965]"
                }

                tot_capacity {
                    label = "Total Capacity"
                    widget = edit
                    type = generic
                    default_value = "[14.592, 14.532, 14.444]"
                    unit = "Ah"
                }

                bal_method {
                    label = "Balancing Method"
                    widget = combo
                    combo_values = "Passive", "Direct"
                    type = string
                    default_value = "Passive"
                    no_evaluate

                    CODE property_value_changed
                        cells = mdl.get_property_value(mdl.prop(container_handle,"cell_count"))
                        battery_cell = []
                        component_handle = mdl.get_sub_level_handle(container_handle)
                        
                        for cell in range(cells):
                            battery_cell.append(mdl.get_item(name = 'Battery Cell' + str(cell+1),
                                                            parent = component_handle))
                            if new_value == "Passive":
                                mdl.set_property_value(mdl.prop(battery_cell[cell],"balancing"),"Passive")
                                mdl.set_property_value(mdl.prop(battery_cell[cell],"R_balance"),"r_bal")
                                
                                #mdl.set_property_value(mdl.prop(container_handle,"cell_count"),int(cells+1))
                                #mdl.set_property_value(mdl.prop(container_handle,"cell_count"),int(cells))
                            else:
                                mdl.set_property_value(mdl.prop(battery_cell[cell],"balancing"),"Direct current input")
                    ENDCODE
                }

                SOC_initial {
                    label = "Initial State of Charge"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "%"
                    min_value = 5
                    max_value = 100
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE

                CODE define_icon
                    mdl.set_component_icon_image(item_handle, "images/battery_bank.svg")
                ENDCODE

                CODE init
                    cells = mdl.get_property_value(mdl.prop(item_handle,"cell_count"))
                    
                    component_handle = mdl.get_sub_level_handle(item_handle)
                    
                    battery_secondary_submask_handle = mdl.get_item(name = "Battery Secondary",parent = component_handle)
                    battery_secondary_signal_pickers = []
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Current", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Temps", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Voltage", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC SOC", parent = battery_secondary_submask_handle))
                    
                    #update the signal pickers in the battery slave for the new cell value
                    for sp in battery_secondary_signal_pickers:
                        mdl.set_property_value(mdl.prop(sp,"prefix"),mdl.get_name(component_handle) + '.Battery Cell')
                        mdl.set_property_value(mdl.prop(sp,"n"),cells)
                ENDCODE

                CODE pre_compile
                    # HEADER START
                    cell_count = mdl.get_property_value(mdl.prop(item_handle, "cell_count"))
                    execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                    SOC_vector = mdl.get_property_value(mdl.prop(item_handle, "SOC_vector"))
                    temp_vector = mdl.get_property_value(mdl.prop(item_handle, "temp_vector"))
                    OCV_vector = mdl.get_property_value(mdl.prop(item_handle, "OCV_vector"))
                    ir_vector = mdl.get_property_value(mdl.prop(item_handle, "ir_vector"))
                    ce_vector = mdl.get_property_value(mdl.prop(item_handle, "ce_vector"))
                    tot_capacity = mdl.get_property_value(mdl.prop(item_handle, "tot_capacity"))
                    bal_method = mdl.get_property_value(mdl.prop(item_handle, "bal_method"))
                    SOC_initial = mdl.get_property_value(mdl.prop(item_handle, "SOC_initial"))
                    # HEADER STOP
                    cells = mdl.get_property_value(mdl.prop(item_handle,"cell_count"))
                    
                    component_handle = mdl.get_sub_level_handle(item_handle)
                    
                    battery_secondary_submask_handle = mdl.get_item(name = "Battery Secondary",parent = component_handle)
                    battery_secondary_signal_pickers = []
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Current", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Temps", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC Voltage", parent = battery_secondary_submask_handle))
                    battery_secondary_signal_pickers.append(mdl.get_item(name = "BC SOC", parent = battery_secondary_submask_handle))
                    
                    #update the signal pickers in the battery slave for the new cell value
                    for sp in battery_secondary_signal_pickers:
                        mdl.set_property_value(mdl.prop(sp,"prefix"),mdl.get_name(component_handle) + '.Battery Cell')
                        mdl.set_property_value(mdl.prop(sp,"n"),cells)
                ENDCODE
            }
        }
        [
            position = 1552, 1960
            size = 128, 112
        ]

        tag From2 {
            value = "Cont_pre"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 2112, 1632
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag From3 {
            value = "Cont1plus"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 1944, 1792
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag "Imod goto" {
            value = "Imod"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 2096, 1952
            hide_name = True
            size = 60, 20
        ]

        tag Slave1f {
            value = "secondary1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 2248, 2064
            hide_name = True
            size = 60, 20
        ]

        tag Slave1g {
            value = "secondary1"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 1680, 1992
            hide_name = True
            size = 60, 20
        ]

        tag String1f {
            value = "String1"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 1680, 1928
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag String1g {
            value = "String1"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 2560, 1904
            hide_name = True
            size = 60, 20
        ]

        tag Imodf {
            value = "Imod"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 2464, 1808
            rotation = right
            hide_name = True
            size = 60, 20
        ]

        tag Cpre {
            value = "Cont_pre"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 2400, 1808
            rotation = left
            hide_name = True
            size = 60, 20
        ]

        tag Goto1 {
            value = "Cont1plus"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 2336, 1808
            rotation = left
            hide_name = True
            size = 60, 20
        ]

        tag Slave1g1 {
            value = "secondary2"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 1392, 1992
            hide_name = True
            size = 60, 20
        ]

        tag String1f1 {
            value = "String2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 1392, 1928
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag Slave1f1 {
            value = "secondary2"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 2248, 1904
            hide_name = True
            size = 60, 20
        ]

        tag String1g1 {
            value = "String2"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 2560, 2064
            hide_name = True
            size = 60, 20
        ]

        tag String1g2 {
            value = "Protection"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 2400, 2152
            rotation = right
            hide_name = True
            size = 60, 20
        ]

        tag Slave1f2 {
            value = "Protection"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 2192, 2192
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        junction Junction128 pe
        [
            position = 2016, 1872
        ]

        junction Junction176 pe
        [
            position = 1552, 1568
        ]

        junction Junction178 pe
        [
            position = 1552, 2352
        ]

        junction Junction180 pe
        [
            position = 1552, 1568
        ]

        junction Junction185 pe
        [
            position = 1552, 1568
        ]

        junction Junction186 pe
        [
            position = 1552, 2352
        ]

        junction Junction187 pe
        [
            position = 1552, 1568
        ]

        junction Junction188 pe
        [
            position = 1552, 2352
        ]

        junction Junction189 pe
        [
            position = 1552, 1568
        ]

        junction Junction190 pe
        [
            position = 1552, 2352
        ]

        junction Junction191 pe
        [
            position = 1552, 2352
        ]

        junction Junction192 pe
        [
            position = 1552, 1568
        ]

        junction Junction193 pe
        [
            position = 1552, 1568
        ]

        junction Junction194 pe
        [
            position = 1552, 2352
        ]

        junction Junction195 pe
        [
            position = 1552, 1568
        ]

        junction Junction196 pe
        [
            position = 1552, 1568
        ]

        junction Junction197 pe
        [
            position = 1552, 2352
        ]

        junction Junction198 pe
        [
            position = 1552, 2352
        ]

        junction Junction199 pe
        [
            position = 1552, 2352
        ]

        junction Junction200 pe
        [
            position = 1552, 1568
        ]

        junction Junction203 pe
        [
            position = 1552, 2352
        ]

        junction Junction204 pe
        [
            position = 1552, 1568
        ]

        junction Junction205 pe
        [
            position = 1552, 2352
        ]

        junction Junction206 pe
        [
            position = 1552, 1568
        ]

        junction Junction207 pe
        [
            position = 1552, 2352
        ]

        junction Junction208 pe
        [
            position = 1552, 2352
        ]

        junction Junction209 pe
        [
            position = 1552, 1568
        ]

        junction Junction210 pe
        [
            position = 1552, 2352
        ]

        junction Junction211 pe
        [
            position = 1552, 2352
        ]

        junction Junction212 pe
        [
            position = 1552, 1568
        ]

        junction Junction213 pe
        [
            position = 1552, 1568
        ]

        junction Junction214 pe
        [
            position = 1552, 2352
        ]

        junction Junction215 pe
        [
            position = 1552, 2352
        ]

        junction Junction216 pe
        [
            position = 1552, 1568
        ]

        junction Junction217 pe
        [
            position = 1552, 1568
        ]

        junction Junction222 pe
        [
            position = 1800, 2352
        ]

        junction Junction224 pe
        [
            position = 1800, 1568
        ]

        junction Junction225 pe
        [
            position = 1864, 1568
        ]

        junction Junction228 pe
        [
            position = 2016, 2160
        ]

        junction Junction229 pe
        [
            position = 2016, 2272
        ]

        junction Junction230 pe
        [
            position = 1552, 1568
        ]

        junction Junction231 pe
        [
            position = 1552, 2352
        ]

        junction Junction232 pe
        [
            position = 1552, 1568
        ]

        junction Junction233 pe
        [
            position = 1552, 2352
        ]

        comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:16pt;">This Model simulates a Battery Management System with two strings of Battery Cells in parallel.</span></p></body></html> ENDCOMMENT 
        [
            position = 1136, 1504
        ]

        comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:14pt;">This model has been created by:<br />Fraunhofer Institue for Solar Energy Systems ISE</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:14pt;">Samuel Kane</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:14pt;">samuel.kane@ise.fraunhofer.de</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:14pt;">Dr. Bernhard Wille-Haussmann</span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:14pt;">bernhard.wille-haussmann@ise.fraunhofer.de </span></p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:14pt;">www.digital-grid-lab.com  </span> </p></body></html> ENDCOMMENT 
        [
            position = 1144, 2384
        ]

        connect "Precharge Contactor.a_out" "Precharge Resistor.n_node" as Connection842
        [
            breakpoints = 2016, 1672
        ]
        connect "Precharge Resistor.p_node" Junction128 as Connection1002
        connect Junction128 "Cont 1 Plus.a_out" as Connection1003
        [
            breakpoints = 2016, 1872; 2016, 1872
        ]
        connect Imod.p_node Junction128 as Connection1004
        connect From3 "Cont 1 Plus.ctrl_in" as Connection1151
        connect From2 "Precharge Contactor.ctrl_in" as Connection1152
        connect Imod.n_node R2.p_node as Connection1388
        connect "Imod goto" Imod.out as Connection1439
        connect BMS.Imod Imodf as Connection1582
        connect Cpre BMS.cpre as Connection1583
        connect Goto1 BMS.c1p as Connection1584
        connect Junction176 Junction180 as Connection1853
        connect Junction178 Junction186 as Connection1880
        connect Junction180 Junction187 as Connection1887
        connect Junction187 Junction185 as Connection1888
        [
            breakpoints = 1552, 1568; 1552, 1568
        ]
        connect Junction188 Junction190 as Connection1897
        connect Junction190 Junction186 as Connection1898
        connect Junction189 Junction192 as Connection1907
        connect Junction192 Junction187 as Connection1908
        connect Junction191 Junction194 as Connection1914
        connect Junction194 Junction190 as Connection1915
        connect Junction193 Junction195 as Connection1919
        connect Junction195 Junction192 as Connection1920
        connect Junction197 Junction198 as Connection1931
        connect Junction198 Junction194 as Connection1932
        connect Junction196 Junction200 as Connection1939
        connect Junction200 Junction195 as Connection1940
        connect Junction199 Junction203 as Connection1949
        connect Junction203 Junction198 as Connection1950
        connect Junction204 Junction206 as Connection1963
        connect Junction205 Junction207 as Connection1966
        connect Junction207 Junction203 as Connection1967
        connect Junction208 Junction210 as Connection1974
        connect Junction210 Junction207 as Connection1975
        connect Junction209 Junction212 as Connection1980
        connect Junction212 Junction206 as Connection1981
        connect Junction213 Junction212 as Connection1988
        connect Junction211 Junction214 as Connection1991
        connect Junction214 Junction210 as Connection1992
        connect Junction200 Junction216 as Connection1997
        connect Junction216 Junction206 as Connection1998
        [
            breakpoints = 1552, 1568; 1552, 1568
        ]
        connect Vmod.n_node Junction222 as Connection2032
        connect Vmod.p_node Junction224 as Connection2039
        connect Junction224 Junction180 as Connection2040
        [
            breakpoints = 1800, 1568
        ]
        connect "Cont 1 Plus.a_in" Junction225 as Connection2041
        [
            breakpoints = 1864, 1768
        ]
        connect Junction225 "Precharge Contactor.a_in" as Connection2042
        [
            breakpoints = 1865, 1568; 1864, 1568
        ]
        connect Junction224 Junction225 as Connection2043
        connect Slave1f1 BMS.Secondary2 as Connection2056
        connect BMS.StringOut1 String1g as Connection2057
        connect Slave1f BMS.Secondary1 as Connection2058
        connect BMS.StringOut2 String1g1 as Connection2059
        connect R5.p_node Junction228 as Connection2072
        connect Junction228 R2.n_node as Connection2073
        [
            breakpoints = 2016, 2160
        ]
        connect Isp1.n_node Junction228 as Connection2074
        connect Junction222 Junction229 as Connection2075
        [
            breakpoints = 1800, 2352
        ]
        connect Junction229 R5.n_node as Connection2076
        [
            breakpoints = 2016, 2272; 1936, 2272
        ]
        connect Isp1.p_node Junction229 as Connection2077
        connect String1g2 BMS.protection as Connection2078
        connect Product1.in Slave1f2 as Connection2079
        connect Product1.in1 "Current Source.out" as Connection2080
        [
            breakpoints = 2136, 2224; 2144, 2224; 2144, 2240
        ]
        connect Isp1.in Product1.out as Connection2081
        connect "Battery Stack 2.secondary in" String1f1 as Connection2084
        connect "Battery Stack 2.secondary out" Slave1g1 as Connection2085
        connect "Battery Stack 1.secondary in" String1f as Connection2086
        connect "Battery Stack 1.secondary out" Slave1g as Connection2087
        connect Junction217 Junction230 as Connection2088
        connect Junction230 Junction216 as Connection2089
        [
            breakpoints = 1552, 1568; 1552, 1568
        ]
        connect Junction215 Junction231 as Connection2091
        [
            breakpoints = 1552, 2352; 1552, 2352
        ]
        connect Junction231 Junction214 as Connection2092
        connect "Battery Stack 2.minus" Junction231 as Connection2093
        connect "Battery Stack 2.plus" Junction232 as Connection2094
        connect Junction232 Junction230 as Connection2095
        connect "Battery Stack 1.plus" Junction232 as Connection2096
        connect Junction222 Junction233 as Connection2097
        [
            breakpoints = 1800, 2352
        ]
        connect Junction233 Junction186 as Connection2098
        [
            breakpoints = 1552, 2352; 1552, 2352
        ]
        connect "Battery Stack 1.minus" Junction233 as Connection2099
    }

    default {
        "core/Accumulator" {
            show_reset = "none"
            reset_type = "asynchronous"
            show_init_condition = "internal"
            init_value = "0"
            limit_output = "False"
            limit_upper = "inf"
            limit_lower = "-inf"
            show_state = "False"
            state_port_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Advanced C function" {
            input_terminals = "real in;"
            input_terminals_show_labels = "False;"
            input_terminals_feedthrough = "True;"
            input_terminals_dimensions = "inherit;"
            output_terminals = "real out;"
            output_terminals_show_labels = "False;"
            output_terminals_feedthrough = "True;"
            output_terminals_dimensions = "inherit;"
            output_fnc = ""
            update_fnc = ""
            init_fnc = ""
            global_variables = ""
            parameters = ""
            library_load_type = "Compile-time load"
            dll_file_path = ""
            dll_file_path_full = ""
            arm_a9_file_path = ""
            arm_a9_file_path_full = ""
            arm_a53_file_path = ""
            arm_a53_file_path_full = ""
            h_file_path = ""
            h_file_path_full = ""
            add_src_path = ""
            add_src_path_full = ""
            convert_to_relative_dll = "True"
            convert_to_relative_a = "True"
            convert_to_relative_src = "True"
            arb_defs = ""
            add_macros = ""
            skip_pre_cmpl_check = "False"
            generate_for_hil = "True"
            execution_rate = "inherit"
            _supported_platforms = "[\'generic\']"
            refresh = "refresh"
        }

        "core/Bus Join" {
            inputs = "2"
            execution_rate = "inherit"
        }

        "core/Bus Split" {
            outputs = "2"
            execution_rate = "inherit"
        }

        "core/C function" {
            input_terminals = "real in;"
            input_terminals_show_labels = "False;"
            input_terminals_feedthrough = "True;"
            input_terminals_dimensions = "inherit;"
            output_terminals = "real out;"
            output_terminals_show_labels = "False;"
            output_terminals_feedthrough = "True;"
            output_terminals_dimensions = "inherit;"
            output_fnc = ""
            update_fnc = ""
            init_fnc = ""
            global_variables = ""
            parameters = ""
            execution_rate = "inherit"
        }

        "core/Comparator" {
            execution_rate = "inherit"
        }

        "core/Constant" {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Delay" {
            delay_type = "Fixed delay"
            del_length = "2"
            max_delay_length = "20"
            init_value = "0"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Gain" {
            gain = "1"
            multiplication = "Element-wise(K.*u)"
            _tunable = "False"
            execution_rate = "inherit"
        }

        "core/Inductor" {
            inductance = "1e-3"
            initial_current = "0.0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Limit" {
            upper_limit = "[\'inf\']"
            lower_limit = "[\'-inf\']"
            execution_rate = "inherit"
        }

        "core/Logical operator" {
            operator = "AND"
            inputs = "2"
            execution_rate = "inherit"
        }

        "core/Probe" {
            signal_access = "inherit"
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        "core/Product" {
            signs = "2"
            execution_rate = "inherit"
        }

        "core/Relational operator" {
            relational_op = "=="
            execution_rate = "inherit"
        }

        "core/Resistor" {
            resistance = "1"
            param_set = ""
        }

        "core/SCADA Input" {
            addr = "0"
            format = "real"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "real"
            min = "-1e6"
            max = "1e6"
            def_value = "0"
            unit = " "
            execution_rate = "100e-6"
        }

        "core/SCADA Output" {
            addr = "0"
            format = "real"
            unit = " "
            override_signal_name = "False"
            signal_name = ""
            execution_rate = "inherit"
        }

        "core/Signal Picker Source" {
            signal_chooser = ""
            addr = "0"
            execution_rate = "100e-6"
        }

        "core/Signal switch" {
            criterion = "ctrl > threshold"
            threshold = "0.5"
            execution_rate = "inherit"
        }

        "core/Sum" {
            signs = "2"
            execution_rate = "inherit"
        }

        "core/Termination" {
            execution_rate = "inherit"
        }

        "core/Unit Delay" {
            init_value = "0"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Battery Cell" {
            SOC_vector = "[0.00000, 0.00500, 0.01000, 0.01500, 0.02000, 0.02500, 0.03000, 0.03500, 0.04000, 0.04500, 0.05000, 0.05500, 0.06000, 0.06500, 0.07000, 0.07500, 0.08000, 0.08500, 0.09000, 0.09500, 0.10000, 0.10500, 0.11000, 0.11500, 0.12000, 0.12500, 0.13000, 0.13500, 0.14000, 0.14500, 0.15000, 0.15500, 0.16000, 0.16500, 0.17000, 0.17500, 0.18000, 0.18500, 0.19000, 0.19500, 0.20000, 0.20500, 0.21000, 0.21500, 0.22000, 0.22500, 0.23000, 0.23500, 0.24000, 0.24500, 0.25000, 0.25500, 0.26000, 0.26500, 0.27000, 0.27500, 0.28000, 0.28500, 0.29000, 0.29500, 0.30000, 0.30500, 0.31000, 0.31500, 0.32000, 0.32500, 0.33000, 0.33500, 0.34000, 0.34500, 0.35000, 0.35500, 0.36000, 0.36500, 0.37000, 0.37500, 0.38000, 0.38500, 0.39000, 0.39500, 0.40000, 0.40500, 0.41000, 0.41500, 0.42000, 0.42500, 0.43000, 0.43500, 0.44000, 0.44500, 0.45000, 0.45500, 0.46000, 0.46500, 0.47000, 0.47500, 0.48000, 0.48500, 0.49000, 0.49500, 0.50000, 0.50500, 0.51000, 0.51500, 0.52000, 0.52500, 0.53000, 0.53500, 0.54000, 0.54500, 0.55000, 0.55500, 0.56000, 0.56500, 0.57000, 0.57500, 0.58000, 0.58500, 0.59000, 0.59500, 0.60000, 0.60500, 0.61000, 0.61500, 0.62000, 0.62500, 0.63000, 0.63500, 0.64000, 0.64500, 0.65000, 0.65500, 0.66000, 0.66500, 0.67000, 0.67500, 0.68000, 0.68500, 0.69000, 0.69500, 0.70000, 0.70500, 0.71000, 0.71500, 0.72000, 0.72500, 0.73000, 0.73500, 0.74000, 0.74500, 0.75000, 0.75500, 0.76000, 0.76500, 0.77000, 0.77500, 0.78000, 0.78500, 0.79000, 0.79500, 0.80000, 0.80500, 0.81000, 0.81500, 0.82000, 0.82500, 0.83000, 0.83500, 0.84000, 0.84500, 0.85000, 0.85500, 0.86000, 0.86500, 0.87000, 0.87500, 0.88000, 0.88500, 0.89000, 0.89500, 0.90000, 0.90500, 0.91000, 0.91500, 0.92000, 0.92500, 0.93000, 0.93500, 0.94000, 0.94500, 0.95000, 0.95500, 0.96000, 0.96500, 0.97000, 0.97500, 0.98000, 0.98500, 0.99000, 0.99500, 1.00000]"
            Init_SOC = "100"
            SOH_vector = "0"
            T_vector = "[5, 25, 45]"
            OCV = "[[ 2.81376455, 2.934249, 3.01131295, 3.0707406, 3.12232055, 3.1679386999999997, 3.20864785, 3.2450991, 3.27819715, 3.30856405, 3.3362725999999996, 3.3618633499999997, 3.38570235, 3.40775795, 3.42830425, 3.4476403500000004, 3.4655972, 3.48235125, 3.4982734000000004, 3.5123286499999997, 3.52428065, 3.5322503000000003, 3.536190725, 3.538614355, 3.5410027349999997, 3.543410505, 3.54570155, 3.548176695, 3.55074616, 3.55332738, 3.5560948150000002, 3.5590690300000003, 3.5622155269999998, 3.5656399850000002, 3.569116135, 3.5732180099999997, 3.57727722, 3.5820934199999996, 3.58702369, 3.5923769, 3.5981162299999996, 3.60387865, 3.6098619999999997, 3.61578425, 3.6219618000000002, 3.6279250050000003, 3.633843695, 3.6400532699999997, 3.646100845, 3.6525218749999997, 3.659006475, 3.6658932699999998, 3.6723717, 3.67845187, 3.6843657899999998, 3.690319095, 3.696598375, 3.70317101, 3.7103087649999997, 3.71751191, 3.72478503, 3.7312556949999998, 3.737126875, 3.7421215, 3.746753425, 3.7512470799999997, 3.7557191, 3.759948005, 3.7641692570000003, 3.7683243400000004, 3.77226982, 3.776130865, 3.77996065, 3.7834905, 3.78724775, 3.79068595, 3.79405435, 3.79739885, 3.8008169, 3.8037784, 3.80672915, 3.80976375, 3.81294495, 3.8155956, 3.81841755, 3.8211345, 3.82375915, 3.826463, 3.8289732, 3.83148675, 3.8339139, 3.8364958500000004, 3.8389766, 3.84130125, 3.8436186, 3.84593155, 3.8484112, 3.8508698999999997, 3.853017, 3.8553768, 3.8575925, 3.8597776, 3.8618757, 3.8639596, 3.8662289, 3.8684966, 3.8704239, 3.8727584, 3.8746679, 3.8767636000000003, 3.8789283, 3.88108645, 3.88336145, 3.88554035, 3.8876272999999997, 3.88979185, 3.8919731499999997, 3.89423455, 3.89660415, 3.89878675, 3.9010609, 3.9034554999999997, 3.9058273, 3.9083077999999998, 3.9107870499999997, 3.9134431, 3.91605185, 3.9188395000000003, 3.92173155, 3.9245562, 3.9278719, 3.93123635, 3.93501795, 3.9392118, 3.9434215, 3.9476625, 3.9522793, 3.956863, 3.9614228, 3.9661213500000003, 3.97056845, 3.97496085, 3.97923145, 3.98304985, 3.9867527999999997, 3.990355, 3.9938599000000004, 3.997107, 4.0001812, 4.0032136000000005, 4.0059932, 4.0087594499999994, 4.011432500000001, 4.0139152, 4.0163138, 4.0185217, 4.02070895, 4.022900900000001, 4.0249913, 4.0268188, 4.02872455, 4.03070295, 4.0323274, 4.0341031, 4.03572435, 4.0374238, 4.03904715, 4.0406617, 4.0421721999999995, 4.04385255, 4.04555215, 4.0469809, 4.048781399999999, 4.05039585, 4.052104, 4.05390415, 4.0557043, 4.057513849999999, 4.0593374, 4.0614338, 4.0635322, 4.0657283, 4.0680112, 4.0704244, 4.07274935, 4.075507399999999, 4.0782211, 4.0812930000000005, 4.08431865, 4.08759685, 4.0910807, 4.0947777499999995, 4.0989474, 4.10329865, 4.10799, 4.1129271, 4.1185746, 4.1244995, 4.1311105999999995, 4.138731625, 4.14890576], [2.8100227500000003, 2.916445, 2.99576475, 3.057303, 3.11000275, 3.1564935, 3.19803925, 3.2350955, 3.26858575, 3.2992202500000003, 3.3273629999999996, 3.35331675, 3.37731175, 3.39958975, 3.4203212499999998, 3.4398017500000004, 3.457986, 3.47495625, 3.4909670000000004, 3.50564325, 3.51860325, 3.5288515, 3.535353625, 3.539071775, 3.5418136749999998, 3.544252525, 3.54650775, 3.5488834750000002, 3.5513308, 3.5538369, 3.556474075, 3.55934515, 3.5622776349999996, 3.565399925, 3.5687806749999997, 3.57249005, 3.5763861, 3.5808671, 3.5855184500000004, 3.5906845, 3.5961811499999996, 3.60179325, 3.60771, 3.6137212499999998, 3.619809, 3.626025025, 3.632018475, 3.63826635, 3.644504225, 3.6510093749999997, 3.657832375, 3.66466635, 3.6710585, 3.67705935, 3.6830289499999997, 3.689195475, 3.6957918750000003, 3.70265505, 3.709943825, 3.71715955, 3.72392515, 3.729878475, 3.735234375, 3.7402075, 3.744967125, 3.7498354, 3.7545954999999998, 3.759340025, 3.764046285, 3.7688217, 3.7733491, 3.777854325, 3.78220325, 3.7862525, 3.7902387500000003, 3.79382975, 3.79747175, 3.80099425, 3.8044845, 3.807692, 3.81084575, 3.81401875, 3.81712475, 3.819978, 3.82288775, 3.8256725, 3.82839575, 3.831115, 3.833666, 3.83623375, 3.8387695, 3.8412792500000004, 3.843683, 3.84610625, 3.848493, 3.85085775, 3.853256, 3.8555495, 3.857885, 3.860084, 3.8623624999999997, 3.864488, 3.8665785, 3.868598, 3.8707445, 3.872883, 3.8749195, 3.876992, 3.8789395, 3.881018, 3.8830415, 3.88503225, 3.88720725, 3.88930175, 3.8913365, 3.89335925, 3.8954657499999996, 3.89757275, 3.89982075, 3.90193375, 3.9041045000000003, 3.9064775, 3.9087365, 3.911139, 3.91353525, 3.9160155, 3.91865925, 3.9213975000000003, 3.92425775, 3.927181, 3.9305595, 3.93418175, 3.93828975, 3.942859, 3.9479075, 3.9531125, 3.9585965, 3.9639149999999996, 3.968714, 3.97340675, 3.9776422499999997, 3.98160425, 3.98535725, 3.98884925, 3.992164, 3.995375, 3.9984995000000003, 4.001535, 4.004506, 4.007268, 4.0099659999999995, 4.01259725, 4.015162500000001, 4.017576, 4.019969, 4.0222085, 4.02434475, 4.026504500000001, 4.0285565, 4.030494, 4.03242275, 4.03431475, 4.036036999999999, 4.0377155, 4.03942175, 4.041119, 4.04283575, 4.0445085, 4.046061, 4.047662750000001, 4.04936075, 4.050904500000001, 4.052707, 4.05437925, 4.05612, 4.05792075, 4.0597215, 4.06156925, 4.063487, 4.065569, 4.067661, 4.0698415, 4.072056, 4.074522, 4.07694675, 4.079536999999999, 4.0823055, 4.085265000000001, 4.08839325, 4.0915842499999995, 4.0950035, 4.09868875, 4.102737, 4.106893250000001, 4.11155, 4.1162355, 4.1216729999999995, 4.1272975, 4.133553, 4.140458125, 4.149328799999999], [2.80628095, 2.898641, 2.98021655, 3.0438654, 3.09768495, 3.1450483, 3.18743065, 3.2250919, 3.2589743500000004, 3.2898764500000004, 3.3184533999999997, 3.34477015, 3.36892115, 3.39142155, 3.41233825, 3.43196315, 3.4503747999999996, 3.46756125, 3.4836606000000003, 3.4989578499999996, 3.5129258500000002, 3.5254527, 3.534516525, 3.539529195, 3.542624615, 3.545094545, 3.54731395, 3.549590255, 3.55191544, 3.55434642, 3.556853335, 3.55962127, 3.562339743, 3.565159865, 3.568445215, 3.57176209, 3.57549498, 3.5796407799999996, 3.58401321, 3.5889921, 3.5942460699999996, 3.59970785, 3.605558, 3.6116582499999996, 3.6176562, 3.624125045, 3.630193255, 3.63647943, 3.642907605, 3.6494968749999996, 3.656658275, 3.66343943, 3.6697452999999998, 3.67566683, 3.6816921099999997, 3.688071855, 3.694985375, 3.70213909, 3.709578885, 3.71680719, 3.72306527, 3.728501255, 3.7333418750000003, 3.7382934999999997, 3.743180825, 3.74842372, 3.7534718999999996, 3.758732045, 3.7639233130000003, 3.7693190600000004, 3.77442838, 3.779577785, 3.78444585, 3.7890145, 3.79322975, 3.7969735499999997, 3.80088915, 3.80458965, 3.8081521, 3.8116056, 3.81496235, 3.81827375, 3.8213045500000002, 3.8243603999999998, 3.82735795, 3.8302104999999997, 3.83303235, 3.8357669999999997, 3.8383588, 3.84098075, 3.8436251, 3.8460626500000004, 3.8483894000000003, 3.8509112500000002, 3.8533674, 3.85578395, 3.8581008, 3.8602290999999997, 3.862753, 3.8647912, 3.8671325, 3.8691984, 3.8712813, 3.8732364, 3.8752600999999998, 3.8772694, 3.8794151, 3.8812256, 3.8832111, 3.8852724000000003, 3.8871547, 3.88897805, 3.89105305, 3.8930631499999997, 3.8950457, 3.89692665, 3.8989583499999996, 3.90091095, 3.90303735, 3.90508075, 3.9071481, 3.9094995, 3.9116457000000002, 3.9139702, 3.91628345, 3.9185879, 3.92126665, 3.9239555, 3.92678395, 3.9298058, 3.9332471, 3.93712715, 3.9415615500000003, 3.9465062, 3.9523935, 3.9585624999999998, 3.9649137, 3.970967, 3.9760052, 3.9806921500000003, 3.98471605, 3.98824765, 3.99148305, 3.99464865, 3.9975752, 4.000395, 4.0031391, 4.005963, 4.0088308, 4.0113224, 4.0139388, 4.016435049999999, 4.018892500000001, 4.0212368, 4.0236241999999995, 4.0258953, 4.02798055, 4.0301081000000005, 4.032121699999999, 4.0341692, 4.03612095, 4.03792655, 4.0397466, 4.0413279, 4.04311915, 4.0448142, 4.04662435, 4.0483553, 4.0499498, 4.05147295, 4.05316935, 4.0548281, 4.0566325999999995, 4.05836265, 4.060136, 4.06193735, 4.0637387, 4.06562465, 4.0676366, 4.069704199999999, 4.0717898, 4.0739547, 4.0761008, 4.0786196, 4.08114415, 4.083566599999999, 4.0863899, 4.089237000000001, 4.09246785, 4.09557165, 4.0989263, 4.1025997499999995, 4.1065266, 4.11048785, 4.11511, 4.1195439, 4.1247714, 4.1300955, 4.1359954, 4.1421846250000005, 4.1497518399999995]]"
            R0 = "[4.6198e-3, 1.7810e-3, 1.1351e-3]"
            eta = "[0.98174, 0.99102, 0.98965]"
            cell_NO = "1"
            nom_Q_combo = "Total capacity"
            Q_discharge = "[14.592, 14.532, 14.444]"
            V_min = "2.81"
            I_dis = "15"
            Q_total = "[14.592, 14.532, 14.444]"
            execution_rate = "100e-6"
            visualize_luts = "Visualize Lookup Tables"
            RC_NO = "None"
            R1 = "8e-3"
            C1 = "60e3"
            R2 = "8e-3"
            C2 = "120e3"
            R3 = "8e-3"
            C3 = "180e3"
            T_vector_diff = "0"
            SOH_vector_diff = "0"
            H_type = "None"
            T_vector_h = "[5, 25, 45]"
            SOC_vector_h = "0"
            M0 = "[0.0031315, 0.0023535, 0.0011502]"
            M = "[0.039929, 0.020018, 0.020545]"
            gamma = "[67.207, 92.645, 67.840]"
            visualize_luts2 = "Visualize Lookup Tables"
            balancing = "None"
            R_balance = "10"
            thermal_flag = "True"
            Rth = "3.40"
            Cth = "17.65"
            cell_temp_init = "25"
            meas_SOH = "False"
            meas_SOC = "False"
            meas_OCV = "False"
            meas_Rint = "False"
            meas_Q = "False"
            meas_Ibal = "False"
            meas_Icell = "False"
            meas_T = "False"
            meas_hyst = "False"
            meas_diffusion = "False"
        }

        "core/Current Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "core/Rate Transition" {
            init_value = "0.0"
            execution_rate = "100e-6"
        }

        "core/Signal Controlled Current Source" {
            execution_rate = "inherit"
        }

        "core/Single Pole Single Throw Contactor" {
            signal_access = "inherit"
            ctrl_src = "Digital input"
            Sa = "1"
            Sa_logic = "active high"
            enable_fb_out = "False"
            fb_out_type = "real"
            execution_rate = "inherit"
            initial_state = "off"
            on_delay = "0"
            off_delay = "0"
            switching = "any current"
            hide_int_meas = "False"
        }

        "core/Voltage Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }
    }

    CODE model_init
        # Numpy module is imported as 'np'
        # Scipy module is imported as 'sp'
        # The Schematic API is imported as 'mdl'
        # To get the model file path, use 'mdl.get_model_file_path()'
        # To print information to the console, use info()
        
        r_bal = .3 #ohms
        exec_rate_fast = 250e-6
        exec_rate_slow = 500e-6
    ENDCODE
}
