/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::{Hash, Hasher};
use rustemo::Result;
use rustemo::lexer::{self, Token, AsStr};
use rustemo::parser::Parser;
use rustemo::builder::Builder;
use rustemo::lr::builder::{LRBuilder, SliceBuilder};
use rustemo::lr::parser::{LRParser, ParserDefinition};
use rustemo::lr::parser::Action::{self, Shift, Reduce, Accept, Error};
use rustemo::index::{StateIndex, TermIndex, NonTermIndex, ProdIndex};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
const TERMINAL_COUNT: usize = 17usize;
const NONTERMINAL_COUNT: usize = 21usize;
const STATE_COUNT: usize = 50usize;
#[allow(dead_code)]
const MAX_ACTIONS: usize = 6usize;
use rustemo::lexer::Lexer;
use super::outliner_actions;
use super::outliner_lexer::Input;
pub type Context<'i> = lexer::Context<'i, Input>;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    OBrace,
    CBrace,
    ComponentKW,
    ConfigurationKW,
    CodeKW,
    EndCodeKW,
    ModelKW,
    NotKW,
    ID,
    TillEndCodeKW,
    Anything,
    Name,
    CommentLine,
    OComment,
    CComment,
    NotComment,
}
impl AsStr for TokenKind {
    #[allow(dead_code)]
    fn as_str(&self) -> &'static str {
        match self {
            TokenKind::STOP => "STOP",
            TokenKind::OBrace => "OBrace",
            TokenKind::CBrace => "CBrace",
            TokenKind::ComponentKW => "ComponentKW",
            TokenKind::ConfigurationKW => "ConfigurationKW",
            TokenKind::CodeKW => "CodeKW",
            TokenKind::EndCodeKW => "EndCodeKW",
            TokenKind::ModelKW => "ModelKW",
            TokenKind::NotKW => "NotKW",
            TokenKind::ID => "ID",
            TokenKind::TillEndCodeKW => "TillEndCodeKW",
            TokenKind::Anything => "Anything",
            TokenKind::Name => "Name",
            TokenKind::CommentLine => "CommentLine",
            TokenKind::OComment => "OComment",
            TokenKind::CComment => "CComment",
            TokenKind::NotComment => "NotComment",
        }
    }
}
impl From<TermIndex> for TokenKind {
    fn from(term_index: TermIndex) -> Self {
        match term_index.0 {
            0usize => TokenKind::STOP,
            1usize => TokenKind::OBrace,
            2usize => TokenKind::CBrace,
            3usize => TokenKind::ComponentKW,
            4usize => TokenKind::ConfigurationKW,
            5usize => TokenKind::CodeKW,
            6usize => TokenKind::EndCodeKW,
            7usize => TokenKind::ModelKW,
            8usize => TokenKind::NotKW,
            9usize => TokenKind::ID,
            10usize => TokenKind::TillEndCodeKW,
            11usize => TokenKind::Anything,
            12usize => TokenKind::Name,
            13usize => TokenKind::CommentLine,
            14usize => TokenKind::OComment,
            15usize => TokenKind::CComment,
            16usize => TokenKind::NotComment,
            _ => unreachable!(),
        }
    }
}
impl From<TokenKind> for TermIndex {
    fn from(token_kind: TokenKind) -> Self {
        match token_kind {
            TokenKind::STOP => TermIndex(0usize),
            TokenKind::OBrace => TermIndex(1usize),
            TokenKind::CBrace => TermIndex(2usize),
            TokenKind::ComponentKW => TermIndex(3usize),
            TokenKind::ConfigurationKW => TermIndex(4usize),
            TokenKind::CodeKW => TermIndex(5usize),
            TokenKind::EndCodeKW => TermIndex(6usize),
            TokenKind::ModelKW => TermIndex(7usize),
            TokenKind::NotKW => TermIndex(8usize),
            TokenKind::ID => TermIndex(9usize),
            TokenKind::TillEndCodeKW => TermIndex(10usize),
            TokenKind::Anything => TermIndex(11usize),
            TokenKind::Name => TermIndex(12usize),
            TokenKind::CommentLine => TermIndex(13usize),
            TokenKind::OComment => TermIndex(14usize),
            TokenKind::CComment => TermIndex(15usize),
            TokenKind::NotComment => TermIndex(16usize),
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy)]
pub enum ProdKind {
    ModelP1,
    ElementP1,
    ElementP2,
    ElementP3,
    Element0P1,
    Element0P2,
    Element1P1,
    Element1P2,
    ComponentP1,
    IDOptP1,
    IDOptP2,
    ConfigurationP1,
    BlockP1,
    HandlerP1,
    TypeNameP1,
    TypeNameP2,
    LayoutP1,
    LayoutItem1P1,
    LayoutItem1P2,
    LayoutItem0P1,
    LayoutItem0P2,
    LayoutItemP1,
    LayoutItemP2,
    CommentP1,
    Cornc1P1,
    Cornc1P2,
    Cornc0P1,
    Cornc0P2,
    CommentP2,
    CorncP1,
    CorncP2,
}
impl AsStr for ProdKind {
    #[allow(dead_code)]
    fn as_str(&self) -> &'static str {
        match self {
            ProdKind::ModelP1 => "ModelP1",
            ProdKind::ElementP1 => "ElementP1",
            ProdKind::ElementP2 => "ElementP2",
            ProdKind::ElementP3 => "ElementP3",
            ProdKind::Element0P1 => "Element0P1",
            ProdKind::Element0P2 => "Element0P2",
            ProdKind::Element1P1 => "Element1P1",
            ProdKind::Element1P2 => "Element1P2",
            ProdKind::ComponentP1 => "ComponentP1",
            ProdKind::IDOptP1 => "IDOptP1",
            ProdKind::IDOptP2 => "IDOptP2",
            ProdKind::ConfigurationP1 => "ConfigurationP1",
            ProdKind::BlockP1 => "BlockP1",
            ProdKind::HandlerP1 => "HandlerP1",
            ProdKind::TypeNameP1 => "TypeNameP1",
            ProdKind::TypeNameP2 => "TypeNameP2",
            ProdKind::LayoutP1 => "LayoutP1",
            ProdKind::LayoutItem1P1 => "LayoutItem1P1",
            ProdKind::LayoutItem1P2 => "LayoutItem1P2",
            ProdKind::LayoutItem0P1 => "LayoutItem0P1",
            ProdKind::LayoutItem0P2 => "LayoutItem0P2",
            ProdKind::LayoutItemP1 => "LayoutItemP1",
            ProdKind::LayoutItemP2 => "LayoutItemP2",
            ProdKind::CommentP1 => "CommentP1",
            ProdKind::Cornc1P1 => "Cornc1P1",
            ProdKind::Cornc1P2 => "Cornc1P2",
            ProdKind::Cornc0P1 => "Cornc0P1",
            ProdKind::Cornc0P2 => "Cornc0P2",
            ProdKind::CommentP2 => "CommentP2",
            ProdKind::CorncP1 => "CorncP1",
            ProdKind::CorncP2 => "CorncP2",
        }
    }
}
impl std::fmt::Display for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::ModelP1 => {
                "Model: ModelKW Name OBrace Configuration Element0 CBrace"
            }
            ProdKind::ElementP1 => "Element: Component",
            ProdKind::ElementP2 => "Element: Handler",
            ProdKind::ElementP3 => "Element: Block",
            ProdKind::Element0P1 => "Element0: Element1",
            ProdKind::Element0P2 => "Element0: ",
            ProdKind::Element1P1 => "Element1: Element1 Element",
            ProdKind::Element1P2 => "Element1: Element",
            ProdKind::ComponentP1 => {
                "Component: ComponentKW TypeName Name IDOpt OBrace Element0 CBrace"
            }
            ProdKind::IDOptP1 => "IDOpt: ID",
            ProdKind::IDOptP2 => "IDOpt: ",
            ProdKind::ConfigurationP1 => "Configuration: ConfigurationKW Block",
            ProdKind::BlockP1 => "Block: OBrace Element0 CBrace",
            ProdKind::HandlerP1 => "Handler: CodeKW ID TillEndCodeKW EndCodeKW",
            ProdKind::TypeNameP1 => "TypeName: Name",
            ProdKind::TypeNameP2 => "TypeName: ID",
            ProdKind::LayoutP1 => "Layout: LayoutItem0",
            ProdKind::LayoutItem1P1 => "LayoutItem1: LayoutItem1 LayoutItem",
            ProdKind::LayoutItem1P2 => "LayoutItem1: LayoutItem",
            ProdKind::LayoutItem0P1 => "LayoutItem0: LayoutItem1",
            ProdKind::LayoutItem0P2 => "LayoutItem0: ",
            ProdKind::LayoutItemP1 => "LayoutItem: Comment",
            ProdKind::LayoutItemP2 => "LayoutItem: Anything",
            ProdKind::CommentP1 => "Comment: OComment Cornc0 CComment",
            ProdKind::Cornc1P1 => "Cornc1: Cornc1 Cornc",
            ProdKind::Cornc1P2 => "Cornc1: Cornc",
            ProdKind::Cornc0P1 => "Cornc0: Cornc1",
            ProdKind::Cornc0P2 => "Cornc0: ",
            ProdKind::CommentP2 => "Comment: CommentLine",
            ProdKind::CorncP1 => "Cornc: Comment",
            ProdKind::CorncP2 => "Cornc: NotComment",
        };
        write!(f, "{}", name)
    }
}
impl From<ProdIndex> for ProdKind {
    fn from(prod_index: ProdIndex) -> Self {
        match prod_index.0 {
            2usize => ProdKind::ModelP1,
            3usize => ProdKind::ElementP1,
            4usize => ProdKind::ElementP2,
            5usize => ProdKind::ElementP3,
            6usize => ProdKind::Element0P1,
            7usize => ProdKind::Element0P2,
            8usize => ProdKind::Element1P1,
            9usize => ProdKind::Element1P2,
            10usize => ProdKind::ComponentP1,
            11usize => ProdKind::IDOptP1,
            12usize => ProdKind::IDOptP2,
            13usize => ProdKind::ConfigurationP1,
            14usize => ProdKind::BlockP1,
            15usize => ProdKind::HandlerP1,
            16usize => ProdKind::TypeNameP1,
            17usize => ProdKind::TypeNameP2,
            18usize => ProdKind::LayoutP1,
            19usize => ProdKind::LayoutItem1P1,
            20usize => ProdKind::LayoutItem1P2,
            21usize => ProdKind::LayoutItem0P1,
            22usize => ProdKind::LayoutItem0P2,
            23usize => ProdKind::LayoutItemP1,
            24usize => ProdKind::LayoutItemP2,
            25usize => ProdKind::CommentP1,
            26usize => ProdKind::Cornc1P1,
            27usize => ProdKind::Cornc1P2,
            28usize => ProdKind::Cornc0P1,
            29usize => ProdKind::Cornc0P2,
            30usize => ProdKind::CommentP2,
            31usize => ProdKind::CorncP1,
            32usize => ProdKind::CorncP2,
            _ => unreachable!(),
        }
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    OBrace(outliner_actions::OBrace),
    CBrace(outliner_actions::CBrace),
    ComponentKW(outliner_actions::ComponentKW),
    ConfigurationKW(outliner_actions::ConfigurationKW),
    CodeKW(outliner_actions::CodeKW),
    EndCodeKW(outliner_actions::EndCodeKW),
    ModelKW(outliner_actions::ModelKW),
    ID(outliner_actions::ID),
    TillEndCodeKW(outliner_actions::TillEndCodeKW),
    Name(outliner_actions::Name),
}
#[derive(Debug)]
pub enum NonTerminal {
    Model(outliner_actions::Model),
    Element(outliner_actions::Element),
    Element0(outliner_actions::Element0),
    Element1(outliner_actions::Element1),
    Component(outliner_actions::Component),
    IDOpt(outliner_actions::IDOpt),
    Configuration(outliner_actions::Configuration),
    Block(outliner_actions::Block),
    Handler(outliner_actions::Handler),
    TypeName(outliner_actions::TypeName),
}
pub struct OutlinerParserDefinition {
    actions: [[Action; TERMINAL_COUNT]; STATE_COUNT],
    gotos: [[Option<StateIndex>; NONTERMINAL_COUNT]; STATE_COUNT],
    token_recognizers: [[Option<TokenRecognizer>; 6usize]; STATE_COUNT],
}
pub(crate) static PARSER_DEFINITION: OutlinerParserDefinition = OutlinerParserDefinition {
    actions: [
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(1usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(3usize)),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Accept,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(StateIndex(4usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(5usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(StateIndex(7usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(StateIndex(7usize)),
            Reduce(ProdIndex(7usize), 0usize, NonTermIndex(5usize)),
            Shift(StateIndex(9usize)),
            Error,
            Shift(StateIndex(10usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(StateIndex(7usize)),
            Reduce(ProdIndex(7usize), 0usize, NonTermIndex(5usize)),
            Shift(StateIndex(9usize)),
            Error,
            Shift(StateIndex(10usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdIndex(13usize), 2usize, NonTermIndex(9usize)),
            Reduce(ProdIndex(13usize), 2usize, NonTermIndex(9usize)),
            Reduce(ProdIndex(13usize), 2usize, NonTermIndex(9usize)),
            Error,
            Reduce(ProdIndex(13usize), 2usize, NonTermIndex(9usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(18usize)),
            Error,
            Error,
            Shift(StateIndex(19usize)),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(21usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdIndex(9usize), 1usize, NonTermIndex(6usize)),
            Reduce(ProdIndex(9usize), 1usize, NonTermIndex(6usize)),
            Reduce(ProdIndex(9usize), 1usize, NonTermIndex(6usize)),
            Error,
            Reduce(ProdIndex(9usize), 1usize, NonTermIndex(6usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Shift(StateIndex(22usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(StateIndex(7usize)),
            Reduce(ProdIndex(6usize), 1usize, NonTermIndex(5usize)),
            Shift(StateIndex(9usize)),
            Error,
            Shift(StateIndex(10usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdIndex(3usize), 1usize, NonTermIndex(4usize)),
            Reduce(ProdIndex(3usize), 1usize, NonTermIndex(4usize)),
            Reduce(ProdIndex(3usize), 1usize, NonTermIndex(4usize)),
            Error,
            Reduce(ProdIndex(3usize), 1usize, NonTermIndex(4usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdIndex(5usize), 1usize, NonTermIndex(4usize)),
            Reduce(ProdIndex(5usize), 1usize, NonTermIndex(4usize)),
            Reduce(ProdIndex(5usize), 1usize, NonTermIndex(4usize)),
            Error,
            Reduce(ProdIndex(5usize), 1usize, NonTermIndex(4usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdIndex(4usize), 1usize, NonTermIndex(4usize)),
            Reduce(ProdIndex(4usize), 1usize, NonTermIndex(4usize)),
            Reduce(ProdIndex(4usize), 1usize, NonTermIndex(4usize)),
            Error,
            Reduce(ProdIndex(4usize), 1usize, NonTermIndex(4usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Shift(StateIndex(24usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(17usize), 1usize, NonTermIndex(12usize)),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(16usize), 1usize, NonTermIndex(12usize)),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(25usize)),
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(26usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdIndex(2usize), 6usize, NonTermIndex(3usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdIndex(8usize), 2usize, NonTermIndex(6usize)),
            Reduce(ProdIndex(8usize), 2usize, NonTermIndex(6usize)),
            Reduce(ProdIndex(8usize), 2usize, NonTermIndex(6usize)),
            Error,
            Reduce(ProdIndex(8usize), 2usize, NonTermIndex(6usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdIndex(14usize), 3usize, NonTermIndex(10usize)),
            Reduce(ProdIndex(14usize), 3usize, NonTermIndex(10usize)),
            Reduce(ProdIndex(14usize), 3usize, NonTermIndex(10usize)),
            Error,
            Reduce(ProdIndex(14usize), 3usize, NonTermIndex(10usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdIndex(12usize), 0usize, NonTermIndex(8usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(27usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(29usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdIndex(11usize), 1usize, NonTermIndex(8usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(StateIndex(30usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdIndex(15usize), 4usize, NonTermIndex(11usize)),
            Reduce(ProdIndex(15usize), 4usize, NonTermIndex(11usize)),
            Reduce(ProdIndex(15usize), 4usize, NonTermIndex(11usize)),
            Error,
            Reduce(ProdIndex(15usize), 4usize, NonTermIndex(11usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(StateIndex(7usize)),
            Reduce(ProdIndex(7usize), 0usize, NonTermIndex(5usize)),
            Shift(StateIndex(9usize)),
            Error,
            Shift(StateIndex(10usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Shift(StateIndex(32usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdIndex(10usize), 7usize, NonTermIndex(7usize)),
            Reduce(ProdIndex(10usize), 7usize, NonTermIndex(7usize)),
            Reduce(ProdIndex(10usize), 7usize, NonTermIndex(7usize)),
            Error,
            Reduce(ProdIndex(10usize), 7usize, NonTermIndex(7usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdIndex(22usize), 0usize, NonTermIndex(15usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(34usize)),
            Error,
            Shift(StateIndex(35usize)),
            Shift(StateIndex(36usize)),
            Error,
            Error,
        ],
        [
            Reduce(ProdIndex(24usize), 1usize, NonTermIndex(16usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(24usize), 1usize, NonTermIndex(16usize)),
            Error,
            Reduce(ProdIndex(24usize), 1usize, NonTermIndex(16usize)),
            Reduce(ProdIndex(24usize), 1usize, NonTermIndex(16usize)),
            Error,
            Error,
        ],
        [
            Reduce(ProdIndex(30usize), 1usize, NonTermIndex(17usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(30usize), 1usize, NonTermIndex(17usize)),
            Error,
            Reduce(ProdIndex(30usize), 1usize, NonTermIndex(17usize)),
            Reduce(ProdIndex(30usize), 1usize, NonTermIndex(17usize)),
            Reduce(ProdIndex(30usize), 1usize, NonTermIndex(17usize)),
            Reduce(ProdIndex(30usize), 1usize, NonTermIndex(17usize)),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(35usize)),
            Shift(StateIndex(36usize)),
            Reduce(ProdIndex(29usize), 0usize, NonTermIndex(19usize)),
            Shift(StateIndex(42usize)),
        ],
        [
            Accept,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdIndex(21usize), 1usize, NonTermIndex(15usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(34usize)),
            Error,
            Shift(StateIndex(35usize)),
            Shift(StateIndex(36usize)),
            Error,
            Error,
        ],
        [
            Reduce(ProdIndex(18usize), 1usize, NonTermIndex(13usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdIndex(20usize), 1usize, NonTermIndex(14usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(20usize), 1usize, NonTermIndex(14usize)),
            Error,
            Reduce(ProdIndex(20usize), 1usize, NonTermIndex(14usize)),
            Reduce(ProdIndex(20usize), 1usize, NonTermIndex(14usize)),
            Error,
            Error,
        ],
        [
            Reduce(ProdIndex(23usize), 1usize, NonTermIndex(16usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(23usize), 1usize, NonTermIndex(16usize)),
            Error,
            Reduce(ProdIndex(23usize), 1usize, NonTermIndex(16usize)),
            Reduce(ProdIndex(23usize), 1usize, NonTermIndex(16usize)),
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(32usize), 1usize, NonTermIndex(20usize)),
            Reduce(ProdIndex(32usize), 1usize, NonTermIndex(20usize)),
            Reduce(ProdIndex(32usize), 1usize, NonTermIndex(20usize)),
            Reduce(ProdIndex(32usize), 1usize, NonTermIndex(20usize)),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(31usize), 1usize, NonTermIndex(20usize)),
            Reduce(ProdIndex(31usize), 1usize, NonTermIndex(20usize)),
            Reduce(ProdIndex(31usize), 1usize, NonTermIndex(20usize)),
            Reduce(ProdIndex(31usize), 1usize, NonTermIndex(20usize)),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(35usize)),
            Shift(StateIndex(36usize)),
            Reduce(ProdIndex(28usize), 1usize, NonTermIndex(19usize)),
            Shift(StateIndex(42usize)),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(StateIndex(49usize)),
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(27usize), 1usize, NonTermIndex(18usize)),
            Reduce(ProdIndex(27usize), 1usize, NonTermIndex(18usize)),
            Reduce(ProdIndex(27usize), 1usize, NonTermIndex(18usize)),
            Reduce(ProdIndex(27usize), 1usize, NonTermIndex(18usize)),
        ],
        [
            Reduce(ProdIndex(19usize), 2usize, NonTermIndex(14usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(19usize), 2usize, NonTermIndex(14usize)),
            Error,
            Reduce(ProdIndex(19usize), 2usize, NonTermIndex(14usize)),
            Reduce(ProdIndex(19usize), 2usize, NonTermIndex(14usize)),
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(26usize), 2usize, NonTermIndex(18usize)),
            Reduce(ProdIndex(26usize), 2usize, NonTermIndex(18usize)),
            Reduce(ProdIndex(26usize), 2usize, NonTermIndex(18usize)),
            Reduce(ProdIndex(26usize), 2usize, NonTermIndex(18usize)),
        ],
        [
            Reduce(ProdIndex(25usize), 3usize, NonTermIndex(17usize)),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdIndex(25usize), 3usize, NonTermIndex(17usize)),
            Error,
            Reduce(ProdIndex(25usize), 3usize, NonTermIndex(17usize)),
            Reduce(ProdIndex(25usize), 3usize, NonTermIndex(17usize)),
            Reduce(ProdIndex(25usize), 3usize, NonTermIndex(17usize)),
            Reduce(ProdIndex(25usize), 3usize, NonTermIndex(17usize)),
        ],
    ],
    gotos: [
        [
            None,
            None,
            None,
            Some(StateIndex(2usize)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(StateIndex(6usize)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(StateIndex(8usize)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            Some(StateIndex(11usize)),
            Some(StateIndex(12usize)),
            Some(StateIndex(13usize)),
            Some(StateIndex(14usize)),
            None,
            None,
            Some(StateIndex(15usize)),
            Some(StateIndex(16usize)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            Some(StateIndex(11usize)),
            Some(StateIndex(17usize)),
            Some(StateIndex(13usize)),
            Some(StateIndex(14usize)),
            None,
            None,
            Some(StateIndex(15usize)),
            Some(StateIndex(16usize)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(StateIndex(20usize)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            Some(StateIndex(23usize)),
            None,
            None,
            Some(StateIndex(14usize)),
            None,
            None,
            Some(StateIndex(15usize)),
            Some(StateIndex(16usize)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(StateIndex(28usize)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            Some(StateIndex(11usize)),
            Some(StateIndex(31usize)),
            Some(StateIndex(13usize)),
            Some(StateIndex(14usize)),
            None,
            None,
            Some(StateIndex(15usize)),
            Some(StateIndex(16usize)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(StateIndex(37usize)),
            Some(StateIndex(38usize)),
            Some(StateIndex(39usize)),
            Some(StateIndex(40usize)),
            Some(StateIndex(41usize)),
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(StateIndex(43usize)),
            Some(StateIndex(44usize)),
            Some(StateIndex(45usize)),
            Some(StateIndex(46usize)),
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(StateIndex(47usize)),
            Some(StateIndex(41usize)),
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(StateIndex(43usize)),
            None,
            None,
            Some(StateIndex(48usize)),
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
    ],
    token_recognizers: [
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelKW,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationKW,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ID,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ID,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::TillEndCodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ID,
            }),
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::EndCodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
        ],
    ],
};
impl ParserDefinition<TokenRecognizer> for OutlinerParserDefinition {
    fn action(&self, state_index: StateIndex, term_index: TermIndex) -> Action {
        PARSER_DEFINITION.actions[state_index.0][term_index.0]
    }
    fn goto(&self, state_index: StateIndex, nonterm_index: NonTermIndex) -> StateIndex {
        PARSER_DEFINITION.gotos[state_index.0][nonterm_index.0].unwrap()
    }
    fn recognizers(&self, state_index: StateIndex) -> Vec<&TokenRecognizer> {
        PARSER_DEFINITION
            .token_recognizers[state_index.0]
            .iter()
            .map_while(|tr| tr.as_ref())
            .collect()
    }
}
#[derive(Default)]
pub struct OutlinerParser<L> {
    content: Option<<Input as ToOwned>::Owned>,
    lexer: L,
}
#[allow(dead_code)]
impl<'i, L: Lexer<Input, TokenRecognizer>> OutlinerParser<L> {
    pub fn new(lexer: L) -> Self {
        Self { content: None, lexer }
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn parse_file<P: AsRef<std::path::Path>>(
        &'i mut self,
        file: P,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        self.content = Some(<Input as rustemo::lexer::Input>::read_file(&file)?);
        let mut context = Context::new(
            file.as_ref().to_string_lossy().to_string(),
            self.content.as_ref().unwrap(),
        );
        self.inner_parse(&mut context)
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn parse(
        &self,
        input: &'i Input,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        let mut context = Context::new("<str>".to_string(), input);
        self.inner_parse(&mut context)
    }
    #[allow(clippy::needless_lifetimes)]
    fn inner_parse(
        &self,
        context: &mut Context<'i>,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        let lexer = &self.lexer;
        let mut local_builder = DefaultBuilder::new();
        let builder = &mut local_builder;
        let mut parser = LRParser::new(&PARSER_DEFINITION, StateIndex(0), false);
        loop {
            log!("** Parsing content");
            let result = parser.parse(context, lexer, builder);
            if result.is_err() {
                let pos = context.position;
                log!("** Parsing layout");
                let mut builder = SliceBuilder::new();
                context
                    .layout_ahead = <LRParser<
                    OutlinerParserDefinition,
                    TokenRecognizer,
                > as rustemo::parser::Parser<
                    '_,
                    Input,
                    L,
                    SliceBuilder<'_, Input>,
                    TokenRecognizer,
                >>::parse(
                        &mut OutlinerLayoutParser::default().0,
                        context,
                        lexer,
                        &mut builder,
                    )
                    .unwrap_or_default();
                if context.position > pos {
                    continue;
                }
            }
            return result;
        }
    }
}
pub struct OutlinerLayoutParser(LRParser<OutlinerParserDefinition, TokenRecognizer>);
impl Default for OutlinerLayoutParser {
    fn default() -> Self {
        Self(LRParser::new(&PARSER_DEFINITION, StateIndex(33usize), true))
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer {
    pub token_kind: TokenKind,
}
impl lexer::TokenRecognizer for TokenRecognizer {
    type TokenKind = TokenKind;
    type Input = Input;
    fn token_kind(&self) -> Self::TokenKind {
        self.token_kind
    }
}
impl PartialEq for TokenRecognizer {
    fn eq(&self, other: &Self) -> bool {
        self.token_kind == other.token_kind
    }
}
impl Eq for TokenRecognizer {}
impl Hash for TokenRecognizer {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.token_kind.hash(state);
    }
}
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl Builder for DefaultBuilder {
    type Output = outliner_actions::Model;
    fn new() -> Self {
        Self { res_stack: vec![] }
    }
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Model(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, TokenKind> for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &mut Context<'i>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::OBrace => {
                Terminal::OBrace(outliner_actions::obrace(context, token))
            }
            TokenKind::CBrace => {
                Terminal::CBrace(outliner_actions::cbrace(context, token))
            }
            TokenKind::ComponentKW => {
                Terminal::ComponentKW(outliner_actions::component_kw(context, token))
            }
            TokenKind::ConfigurationKW => {
                Terminal::ConfigurationKW(
                    outliner_actions::configuration_kw(context, token),
                )
            }
            TokenKind::CodeKW => {
                Terminal::CodeKW(outliner_actions::code_kw(context, token))
            }
            TokenKind::EndCodeKW => {
                Terminal::EndCodeKW(outliner_actions::end_code_kw(context, token))
            }
            TokenKind::ModelKW => {
                Terminal::ModelKW(outliner_actions::model_kw(context, token))
            }
            TokenKind::ID => Terminal::ID(outliner_actions::id(context, token)),
            TokenKind::TillEndCodeKW => {
                Terminal::TillEndCodeKW(
                    outliner_actions::till_end_code_kw(context, token),
                )
            }
            TokenKind::Name => Terminal::Name(outliner_actions::name(context, token)),
            _ => panic!("Shift of unreachable terminal!"),
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &mut Context<'i>,
        prod_idx: ProdIndex,
        _prod_len: usize,
    ) {
        let prod = match ProdKind::from(prod_idx) {
            ProdKind::ModelP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::ModelKW(p0)),
                        Symbol::Terminal(Terminal::Name(p1)),
                        Symbol::Terminal(Terminal::OBrace(p2)),
                        Symbol::NonTerminal(NonTerminal::Configuration(p3)),
                        Symbol::NonTerminal(NonTerminal::Element0(p4)),
                        Symbol::Terminal(Terminal::CBrace(p5)),
                    ) => {
                        NonTerminal::Model(
                            outliner_actions::model_c1(context, p0, p1, p2, p3, p4, p5),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ElementP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Component(p0)) => {
                        NonTerminal::Element(
                            outliner_actions::element_component(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ElementP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Handler(p0)) => {
                        NonTerminal::Element(
                            outliner_actions::element_handler(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ElementP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Block(p0)) => {
                        NonTerminal::Element(
                            outliner_actions::element_block(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Element0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Element1(p0)) => {
                        NonTerminal::Element0(
                            outliner_actions::element0_element1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Element0P2 => {
                NonTerminal::Element0(outliner_actions::element0_empty(context))
            }
            ProdKind::Element1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Element1(p0)),
                        Symbol::NonTerminal(NonTerminal::Element(p1)),
                    ) => {
                        NonTerminal::Element1(
                            outliner_actions::element1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Element1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Element(p0)) => {
                        NonTerminal::Element1(
                            outliner_actions::element1_element(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ComponentP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 7usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::ComponentKW(p0)),
                        Symbol::NonTerminal(NonTerminal::TypeName(p1)),
                        Symbol::Terminal(Terminal::Name(p2)),
                        Symbol::NonTerminal(NonTerminal::IDOpt(p3)),
                        Symbol::Terminal(Terminal::OBrace(p4)),
                        Symbol::NonTerminal(NonTerminal::Element0(p5)),
                        Symbol::Terminal(Terminal::CBrace(p6)),
                    ) => {
                        NonTerminal::Component(
                            outliner_actions::component_c1(
                                context,
                                p0,
                                p1,
                                p2,
                                p3,
                                p4,
                                p5,
                                p6,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IDOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::ID(p0)) => {
                        NonTerminal::IDOpt(outliner_actions::idopt_id(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IDOptP2 => {
                NonTerminal::IDOpt(outliner_actions::idopt_empty(context))
            }
            ProdKind::ConfigurationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::ConfigurationKW(p0)),
                        Symbol::NonTerminal(NonTerminal::Block(p1)),
                    ) => {
                        NonTerminal::Configuration(
                            outliner_actions::configuration_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::OBrace(p0)),
                        Symbol::NonTerminal(NonTerminal::Element0(p1)),
                        Symbol::Terminal(Terminal::CBrace(p2)),
                    ) => {
                        NonTerminal::Block(
                            outliner_actions::block_c1(context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::HandlerP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::CodeKW(p0)),
                        Symbol::Terminal(Terminal::ID(p1)),
                        Symbol::Terminal(Terminal::TillEndCodeKW(p2)),
                        Symbol::Terminal(Terminal::EndCodeKW(p3)),
                    ) => {
                        NonTerminal::Handler(
                            outliner_actions::handler_c1(context, p0, p1, p2, p3),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeNameP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Name(p0)) => {
                        NonTerminal::TypeName(
                            outliner_actions::type_name_name(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeNameP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::ID(p0)) => {
                        NonTerminal::TypeName(
                            outliner_actions::type_name_id(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            _ => panic!("Reduce of unreachable nonterminal!"),
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
