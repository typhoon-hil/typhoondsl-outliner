/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::{Hash, Hasher};
use rustemo::Result;
use rustemo::lexer::{self, Token};
use rustemo::parser::Parser;
use rustemo::builder::Builder;
use rustemo::lr::builder::{LRBuilder, SliceBuilder};
use rustemo::lr::parser::{LRParser, ParserDefinition};
use rustemo::lr::parser::Action::{self, Shift, Reduce, Accept, Error};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use colored::*;
const TERMINAL_COUNT: usize = 26usize;
const NONTERMINAL_COUNT: usize = 27usize;
const STATE_COUNT: usize = 66usize;
#[allow(dead_code)]
const MAX_ACTIONS: usize = 11usize;
use rustemo::lexer::Lexer;
use super::outliner_actions;
use super::outliner_lexer::Input;
pub type Context<'i> = lexer::Context<'i, Input>;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    OBrace,
    CBrace,
    ComponentKW,
    ConfigurationKW,
    CodeKW,
    EndCodeKW,
    ModelKW,
    LibraryKW,
    CommentKW,
    CommentName,
    StartCommentKW,
    EndCommentKW,
    TillEndCommentKW,
    ID,
    TillEndCodeKW,
    ModelProperty,
    ConfigurationProperty,
    Anything,
    String,
    Name,
    WS,
    CommentLine,
    OComment,
    CComment,
    NotComment,
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy)]
pub enum ProdKind {
    ModelP1,
    ConfigurationOptP1,
    ConfigurationOptP2,
    ModelOrLibraryP1,
    ModelOrLibraryP2,
    ElementP1,
    ElementP2,
    ElementP3,
    Element0P1,
    Element0P2,
    Element1P1,
    Element1P2,
    ComponentP1,
    IDOptP1,
    IDOptP2,
    ConfigurationP1,
    BlockP1,
    HandlerP1,
    TillEndCodeKWOptP1,
    TillEndCodeKWOptP2,
    TypeNameP1,
    TypeNameP2,
    LayoutP1,
    LayoutItem1P1,
    LayoutItem1P2,
    LayoutItem0P1,
    LayoutItem0P2,
    LayoutItemP1,
    LayoutItemP2,
    LayoutItemP3,
    LayoutItemP4,
    LayoutItemP5,
    LayoutItemP6,
    LayoutItemP7,
    CommentP1,
    Cornc1P1,
    Cornc1P2,
    Cornc0P1,
    Cornc0P2,
    CommentP2,
    ModelCommentP1,
    CommentNameOptP1,
    CommentNameOptP2,
    TillEndCommentKWOptP1,
    TillEndCommentKWOptP2,
    CorncP1,
    CorncP2,
}
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::ModelP1 => {
                "Model: ModelOrLibrary Name OBrace ConfigurationOpt Element0 CBrace"
            }
            ProdKind::ConfigurationOptP1 => "ConfigurationOpt: Configuration",
            ProdKind::ConfigurationOptP2 => "ConfigurationOpt: ",
            ProdKind::ModelOrLibraryP1 => "ModelOrLibrary: ModelKW",
            ProdKind::ModelOrLibraryP2 => "ModelOrLibrary: LibraryKW",
            ProdKind::ElementP1 => "Element: Component",
            ProdKind::ElementP2 => "Element: Handler",
            ProdKind::ElementP3 => "Element: Block",
            ProdKind::Element0P1 => "Element0: Element1",
            ProdKind::Element0P2 => "Element0: ",
            ProdKind::Element1P1 => "Element1: Element1 Element",
            ProdKind::Element1P2 => "Element1: Element",
            ProdKind::ComponentP1 => {
                "Component: ComponentKW TypeName Name IDOpt OBrace Element0 CBrace"
            }
            ProdKind::IDOptP1 => "IDOpt: ID",
            ProdKind::IDOptP2 => "IDOpt: ",
            ProdKind::ConfigurationP1 => "Configuration: ConfigurationKW Block",
            ProdKind::BlockP1 => "Block: OBrace Element0 CBrace",
            ProdKind::HandlerP1 => "Handler: CodeKW ID TillEndCodeKWOpt EndCodeKW",
            ProdKind::TillEndCodeKWOptP1 => "TillEndCodeKWOpt: TillEndCodeKW",
            ProdKind::TillEndCodeKWOptP2 => "TillEndCodeKWOpt: ",
            ProdKind::TypeNameP1 => "TypeName: Name",
            ProdKind::TypeNameP2 => "TypeName: ID",
            ProdKind::LayoutP1 => "Layout: LayoutItem0",
            ProdKind::LayoutItem1P1 => "LayoutItem1: LayoutItem1 LayoutItem",
            ProdKind::LayoutItem1P2 => "LayoutItem1: LayoutItem",
            ProdKind::LayoutItem0P1 => "LayoutItem0: LayoutItem1",
            ProdKind::LayoutItem0P2 => "LayoutItem0: ",
            ProdKind::LayoutItemP1 => "LayoutItem: WS",
            ProdKind::LayoutItemP2 => "LayoutItem: Comment",
            ProdKind::LayoutItemP3 => "LayoutItem: Anything",
            ProdKind::LayoutItemP4 => "LayoutItem: String",
            ProdKind::LayoutItemP5 => "LayoutItem: ModelComment",
            ProdKind::LayoutItemP6 => "LayoutItem: ModelProperty",
            ProdKind::LayoutItemP7 => "LayoutItem: ConfigurationProperty",
            ProdKind::CommentP1 => "Comment: OComment Cornc0 CComment",
            ProdKind::Cornc1P1 => "Cornc1: Cornc1 Cornc",
            ProdKind::Cornc1P2 => "Cornc1: Cornc",
            ProdKind::Cornc0P1 => "Cornc0: Cornc1",
            ProdKind::Cornc0P2 => "Cornc0: ",
            ProdKind::CommentP2 => "Comment: CommentLine",
            ProdKind::ModelCommentP1 => {
                "ModelComment: CommentKW CommentNameOpt StartCommentKW TillEndCommentKWOpt EndCommentKW"
            }
            ProdKind::CommentNameOptP1 => "CommentNameOpt: CommentName",
            ProdKind::CommentNameOptP2 => "CommentNameOpt: ",
            ProdKind::TillEndCommentKWOptP1 => "TillEndCommentKWOpt: TillEndCommentKW",
            ProdKind::TillEndCommentKWOptP2 => "TillEndCommentKWOpt: ",
            ProdKind::CorncP1 => "Cornc: Comment",
            ProdKind::CorncP2 => "Cornc: NotComment",
        };
        write!(f, "{}", name)
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    AUGL,
    Model,
    ConfigurationOpt,
    ModelOrLibrary,
    Element,
    Element0,
    Element1,
    Component,
    IDOpt,
    Configuration,
    Block,
    Handler,
    TillEndCodeKWOpt,
    TypeName,
    Layout,
    LayoutItem1,
    LayoutItem0,
    LayoutItem,
    Comment,
    Cornc1,
    Cornc0,
    ModelComment,
    CommentNameOpt,
    TillEndCommentKWOpt,
    Cornc,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::ModelP1 => NonTermKind::Model,
            ProdKind::ConfigurationOptP1 => NonTermKind::ConfigurationOpt,
            ProdKind::ConfigurationOptP2 => NonTermKind::ConfigurationOpt,
            ProdKind::ModelOrLibraryP1 => NonTermKind::ModelOrLibrary,
            ProdKind::ModelOrLibraryP2 => NonTermKind::ModelOrLibrary,
            ProdKind::ElementP1 => NonTermKind::Element,
            ProdKind::ElementP2 => NonTermKind::Element,
            ProdKind::ElementP3 => NonTermKind::Element,
            ProdKind::Element0P1 => NonTermKind::Element0,
            ProdKind::Element0P2 => NonTermKind::Element0,
            ProdKind::Element1P1 => NonTermKind::Element1,
            ProdKind::Element1P2 => NonTermKind::Element1,
            ProdKind::ComponentP1 => NonTermKind::Component,
            ProdKind::IDOptP1 => NonTermKind::IDOpt,
            ProdKind::IDOptP2 => NonTermKind::IDOpt,
            ProdKind::ConfigurationP1 => NonTermKind::Configuration,
            ProdKind::BlockP1 => NonTermKind::Block,
            ProdKind::HandlerP1 => NonTermKind::Handler,
            ProdKind::TillEndCodeKWOptP1 => NonTermKind::TillEndCodeKWOpt,
            ProdKind::TillEndCodeKWOptP2 => NonTermKind::TillEndCodeKWOpt,
            ProdKind::TypeNameP1 => NonTermKind::TypeName,
            ProdKind::TypeNameP2 => NonTermKind::TypeName,
            ProdKind::LayoutP1 => NonTermKind::Layout,
            ProdKind::LayoutItem1P1 => NonTermKind::LayoutItem1,
            ProdKind::LayoutItem1P2 => NonTermKind::LayoutItem1,
            ProdKind::LayoutItem0P1 => NonTermKind::LayoutItem0,
            ProdKind::LayoutItem0P2 => NonTermKind::LayoutItem0,
            ProdKind::LayoutItemP1 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP2 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP3 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP4 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP5 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP6 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP7 => NonTermKind::LayoutItem,
            ProdKind::CommentP1 => NonTermKind::Comment,
            ProdKind::Cornc1P1 => NonTermKind::Cornc1,
            ProdKind::Cornc1P2 => NonTermKind::Cornc1,
            ProdKind::Cornc0P1 => NonTermKind::Cornc0,
            ProdKind::Cornc0P2 => NonTermKind::Cornc0,
            ProdKind::CommentP2 => NonTermKind::Comment,
            ProdKind::ModelCommentP1 => NonTermKind::ModelComment,
            ProdKind::CommentNameOptP1 => NonTermKind::CommentNameOpt,
            ProdKind::CommentNameOptP2 => NonTermKind::CommentNameOpt,
            ProdKind::TillEndCommentKWOptP1 => NonTermKind::TillEndCommentKWOpt,
            ProdKind::TillEndCommentKWOptP2 => NonTermKind::TillEndCommentKWOpt,
            ProdKind::CorncP1 => NonTermKind::Cornc,
            ProdKind::CorncP2 => NonTermKind::Cornc,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy)]
pub enum State {
    AUGS0,
    ModelKWS1,
    LibraryKWS2,
    ModelS3,
    ModelOrLibraryS4,
    NameS5,
    OBraceS6,
    ConfigurationKWS7,
    ConfigurationOptS8,
    ConfigurationS9,
    OBraceS10,
    BlockS11,
    ComponentKWS12,
    CodeKWS13,
    ElementS14,
    Element0S15,
    Element1S16,
    ComponentS17,
    BlockS18,
    HandlerS19,
    Element0S20,
    IDS21,
    NameS22,
    TypeNameS23,
    IDS24,
    CBraceS25,
    ElementS26,
    CBraceS27,
    NameS28,
    TillEndCodeKWS29,
    TillEndCodeKWOptS30,
    IDS31,
    IDOptS32,
    EndCodeKWS33,
    OBraceS34,
    Element0S35,
    CBraceS36,
    AUGLS37,
    CommentKWS38,
    ModelPropertyS39,
    ConfigurationPropertyS40,
    AnythingS41,
    StringS42,
    WSS43,
    CommentLineS44,
    OCommentS45,
    LayoutS46,
    LayoutItem1S47,
    LayoutItem0S48,
    LayoutItemS49,
    CommentS50,
    ModelCommentS51,
    CommentNameS52,
    CommentNameOptS53,
    NotCommentS54,
    CommentS55,
    Cornc1S56,
    Cornc0S57,
    CorncS58,
    LayoutItemS59,
    StartCommentKWS60,
    CorncS61,
    CCommentS62,
    TillEndCommentKWS63,
    TillEndCommentKWOptS64,
    EndCommentKWS65,
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::ModelKWS1 => "1:ModelKW",
            State::LibraryKWS2 => "2:LibraryKW",
            State::ModelS3 => "3:Model",
            State::ModelOrLibraryS4 => "4:ModelOrLibrary",
            State::NameS5 => "5:Name",
            State::OBraceS6 => "6:OBrace",
            State::ConfigurationKWS7 => "7:ConfigurationKW",
            State::ConfigurationOptS8 => "8:ConfigurationOpt",
            State::ConfigurationS9 => "9:Configuration",
            State::OBraceS10 => "10:OBrace",
            State::BlockS11 => "11:Block",
            State::ComponentKWS12 => "12:ComponentKW",
            State::CodeKWS13 => "13:CodeKW",
            State::ElementS14 => "14:Element",
            State::Element0S15 => "15:Element0",
            State::Element1S16 => "16:Element1",
            State::ComponentS17 => "17:Component",
            State::BlockS18 => "18:Block",
            State::HandlerS19 => "19:Handler",
            State::Element0S20 => "20:Element0",
            State::IDS21 => "21:ID",
            State::NameS22 => "22:Name",
            State::TypeNameS23 => "23:TypeName",
            State::IDS24 => "24:ID",
            State::CBraceS25 => "25:CBrace",
            State::ElementS26 => "26:Element",
            State::CBraceS27 => "27:CBrace",
            State::NameS28 => "28:Name",
            State::TillEndCodeKWS29 => "29:TillEndCodeKW",
            State::TillEndCodeKWOptS30 => "30:TillEndCodeKWOpt",
            State::IDS31 => "31:ID",
            State::IDOptS32 => "32:IDOpt",
            State::EndCodeKWS33 => "33:EndCodeKW",
            State::OBraceS34 => "34:OBrace",
            State::Element0S35 => "35:Element0",
            State::CBraceS36 => "36:CBrace",
            State::AUGLS37 => "37:AUGL",
            State::CommentKWS38 => "38:CommentKW",
            State::ModelPropertyS39 => "39:ModelProperty",
            State::ConfigurationPropertyS40 => "40:ConfigurationProperty",
            State::AnythingS41 => "41:Anything",
            State::StringS42 => "42:String",
            State::WSS43 => "43:WS",
            State::CommentLineS44 => "44:CommentLine",
            State::OCommentS45 => "45:OComment",
            State::LayoutS46 => "46:Layout",
            State::LayoutItem1S47 => "47:LayoutItem1",
            State::LayoutItem0S48 => "48:LayoutItem0",
            State::LayoutItemS49 => "49:LayoutItem",
            State::CommentS50 => "50:Comment",
            State::ModelCommentS51 => "51:ModelComment",
            State::CommentNameS52 => "52:CommentName",
            State::CommentNameOptS53 => "53:CommentNameOpt",
            State::NotCommentS54 => "54:NotComment",
            State::CommentS55 => "55:Comment",
            State::Cornc1S56 => "56:Cornc1",
            State::Cornc0S57 => "57:Cornc0",
            State::CorncS58 => "58:Cornc",
            State::LayoutItemS59 => "59:LayoutItem",
            State::StartCommentKWS60 => "60:StartCommentKW",
            State::CorncS61 => "61:Cornc",
            State::CCommentS62 => "62:CComment",
            State::TillEndCommentKWS63 => "63:TillEndCommentKW",
            State::TillEndCommentKWOptS64 => "64:TillEndCommentKWOpt",
            State::EndCommentKWS65 => "65:EndCommentKW",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    OBrace(outliner_actions::OBrace),
    CBrace(outliner_actions::CBrace),
    ComponentKW(outliner_actions::ComponentKW),
    ConfigurationKW(outliner_actions::ConfigurationKW),
    CodeKW(outliner_actions::CodeKW),
    EndCodeKW(outliner_actions::EndCodeKW),
    ModelKW(outliner_actions::ModelKW),
    LibraryKW(outliner_actions::LibraryKW),
    ID(outliner_actions::ID),
    TillEndCodeKW(outliner_actions::TillEndCodeKW),
    Name(outliner_actions::Name),
}
#[derive(Debug)]
pub enum NonTerminal {
    Model(outliner_actions::Model),
    ConfigurationOpt(outliner_actions::ConfigurationOpt),
    ModelOrLibrary(outliner_actions::ModelOrLibrary),
    Element(outliner_actions::Element),
    Element0(outliner_actions::Element0),
    Element1(outliner_actions::Element1),
    Component(outliner_actions::Component),
    IDOpt(outliner_actions::IDOpt),
    Configuration(outliner_actions::Configuration),
    Block(outliner_actions::Block),
    Handler(outliner_actions::Handler),
    TillEndCodeKWOpt(outliner_actions::TillEndCodeKWOpt),
    TypeName(outliner_actions::TypeName),
}
pub struct OutlinerParserDefinition {
    actions: [[Action<State, ProdKind>; TERMINAL_COUNT]; STATE_COUNT],
    gotos: [[Option<State>; NONTERMINAL_COUNT]; STATE_COUNT],
    token_recognizers: [[Option<TokenRecognizer>; 11usize]; STATE_COUNT],
}
pub(crate) static PARSER_DEFINITION: OutlinerParserDefinition = OutlinerParserDefinition {
    actions: [
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::ModelKWS1),
            Shift(State::LibraryKWS2),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ModelOrLibraryP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ModelOrLibraryP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Accept,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS5),
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(State::OBraceS6),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::ConfigurationOptP2, 0usize),
            Reduce(ProdKind::ConfigurationOptP2, 0usize),
            Reduce(ProdKind::ConfigurationOptP2, 0usize),
            Shift(State::ConfigurationKWS7),
            Reduce(ProdKind::ConfigurationOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(State::OBraceS10),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(State::OBraceS10),
            Reduce(ProdKind::Element0P2, 0usize),
            Shift(State::ComponentKWS12),
            Error,
            Shift(State::CodeKWS13),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::ConfigurationOptP1, 1usize),
            Reduce(ProdKind::ConfigurationOptP1, 1usize),
            Reduce(ProdKind::ConfigurationOptP1, 1usize),
            Error,
            Reduce(ProdKind::ConfigurationOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(State::OBraceS10),
            Reduce(ProdKind::Element0P2, 0usize),
            Shift(State::ComponentKWS12),
            Error,
            Shift(State::CodeKWS13),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::ConfigurationP1, 2usize),
            Reduce(ProdKind::ConfigurationP1, 2usize),
            Reduce(ProdKind::ConfigurationP1, 2usize),
            Error,
            Reduce(ProdKind::ConfigurationP1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::IDS21),
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS22),
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::IDS24),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::Element1P2, 1usize),
            Reduce(ProdKind::Element1P2, 1usize),
            Reduce(ProdKind::Element1P2, 1usize),
            Error,
            Reduce(ProdKind::Element1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Shift(State::CBraceS25),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(State::OBraceS10),
            Reduce(ProdKind::Element0P1, 1usize),
            Shift(State::ComponentKWS12),
            Error,
            Shift(State::CodeKWS13),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::ElementP1, 1usize),
            Reduce(ProdKind::ElementP1, 1usize),
            Reduce(ProdKind::ElementP1, 1usize),
            Error,
            Reduce(ProdKind::ElementP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::ElementP3, 1usize),
            Reduce(ProdKind::ElementP3, 1usize),
            Reduce(ProdKind::ElementP3, 1usize),
            Error,
            Reduce(ProdKind::ElementP3, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::ElementP2, 1usize),
            Reduce(ProdKind::ElementP2, 1usize),
            Reduce(ProdKind::ElementP2, 1usize),
            Error,
            Reduce(ProdKind::ElementP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Shift(State::CBraceS27),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TypeNameP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TypeNameP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::NameS28),
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TillEndCodeKWOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::TillEndCodeKWS29),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::ModelP1, 6usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::Element1P1, 2usize),
            Reduce(ProdKind::Element1P1, 2usize),
            Reduce(ProdKind::Element1P1, 2usize),
            Error,
            Reduce(ProdKind::Element1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::BlockP1, 3usize),
            Reduce(ProdKind::BlockP1, 3usize),
            Reduce(ProdKind::BlockP1, 3usize),
            Error,
            Reduce(ProdKind::BlockP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::IDOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::IDS31),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TillEndCodeKWOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::EndCodeKWS33),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::IDOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(State::OBraceS34),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::HandlerP1, 4usize),
            Reduce(ProdKind::HandlerP1, 4usize),
            Reduce(ProdKind::HandlerP1, 4usize),
            Error,
            Reduce(ProdKind::HandlerP1, 4usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Shift(State::OBraceS10),
            Reduce(ProdKind::Element0P2, 0usize),
            Shift(State::ComponentKWS12),
            Error,
            Shift(State::CodeKWS13),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Shift(State::CBraceS36),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Reduce(ProdKind::ComponentP1, 7usize),
            Reduce(ProdKind::ComponentP1, 7usize),
            Reduce(ProdKind::ComponentP1, 7usize),
            Error,
            Reduce(ProdKind::ComponentP1, 7usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItem0P2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CommentKWS38),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::ModelPropertyS39),
            Shift(State::ConfigurationPropertyS40),
            Shift(State::AnythingS41),
            Shift(State::StringS42),
            Error,
            Shift(State::WSS43),
            Shift(State::CommentLineS44),
            Shift(State::OCommentS45),
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CommentNameS52),
            Reduce(ProdKind::CommentNameOptP2, 0usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItemP6, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP6, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP6, 1usize),
            Reduce(ProdKind::LayoutItemP6, 1usize),
            Reduce(ProdKind::LayoutItemP6, 1usize),
            Reduce(ProdKind::LayoutItemP6, 1usize),
            Error,
            Reduce(ProdKind::LayoutItemP6, 1usize),
            Reduce(ProdKind::LayoutItemP6, 1usize),
            Reduce(ProdKind::LayoutItemP6, 1usize),
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItemP7, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP7, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP7, 1usize),
            Reduce(ProdKind::LayoutItemP7, 1usize),
            Reduce(ProdKind::LayoutItemP7, 1usize),
            Reduce(ProdKind::LayoutItemP7, 1usize),
            Error,
            Reduce(ProdKind::LayoutItemP7, 1usize),
            Reduce(ProdKind::LayoutItemP7, 1usize),
            Reduce(ProdKind::LayoutItemP7, 1usize),
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItemP3, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP3, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP3, 1usize),
            Reduce(ProdKind::LayoutItemP3, 1usize),
            Reduce(ProdKind::LayoutItemP3, 1usize),
            Reduce(ProdKind::LayoutItemP3, 1usize),
            Error,
            Reduce(ProdKind::LayoutItemP3, 1usize),
            Reduce(ProdKind::LayoutItemP3, 1usize),
            Reduce(ProdKind::LayoutItemP3, 1usize),
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItemP4, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP4, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP4, 1usize),
            Reduce(ProdKind::LayoutItemP4, 1usize),
            Reduce(ProdKind::LayoutItemP4, 1usize),
            Reduce(ProdKind::LayoutItemP4, 1usize),
            Error,
            Reduce(ProdKind::LayoutItemP4, 1usize),
            Reduce(ProdKind::LayoutItemP4, 1usize),
            Reduce(ProdKind::LayoutItemP4, 1usize),
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Error,
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Reduce(ProdKind::LayoutItemP1, 1usize),
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::CommentP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CommentP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CommentP2, 1usize),
            Reduce(ProdKind::CommentP2, 1usize),
            Reduce(ProdKind::CommentP2, 1usize),
            Reduce(ProdKind::CommentP2, 1usize),
            Error,
            Reduce(ProdKind::CommentP2, 1usize),
            Reduce(ProdKind::CommentP2, 1usize),
            Reduce(ProdKind::CommentP2, 1usize),
            Reduce(ProdKind::CommentP2, 1usize),
            Reduce(ProdKind::CommentP2, 1usize),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CommentLineS44),
            Shift(State::OCommentS45),
            Reduce(ProdKind::Cornc0P2, 0usize),
            Shift(State::NotCommentS54),
        ],
        [
            Accept,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItem0P1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CommentKWS38),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::ModelPropertyS39),
            Shift(State::ConfigurationPropertyS40),
            Shift(State::AnythingS41),
            Shift(State::StringS42),
            Error,
            Shift(State::WSS43),
            Shift(State::CommentLineS44),
            Shift(State::OCommentS45),
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Error,
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Reduce(ProdKind::LayoutItem1P2, 1usize),
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Error,
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Reduce(ProdKind::LayoutItemP2, 1usize),
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::LayoutItemP5, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP5, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItemP5, 1usize),
            Reduce(ProdKind::LayoutItemP5, 1usize),
            Reduce(ProdKind::LayoutItemP5, 1usize),
            Reduce(ProdKind::LayoutItemP5, 1usize),
            Error,
            Reduce(ProdKind::LayoutItemP5, 1usize),
            Reduce(ProdKind::LayoutItemP5, 1usize),
            Reduce(ProdKind::LayoutItemP5, 1usize),
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CommentNameOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::StartCommentKWS60),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CorncP2, 1usize),
            Reduce(ProdKind::CorncP2, 1usize),
            Reduce(ProdKind::CorncP2, 1usize),
            Reduce(ProdKind::CorncP2, 1usize),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CorncP1, 1usize),
            Reduce(ProdKind::CorncP1, 1usize),
            Reduce(ProdKind::CorncP1, 1usize),
            Reduce(ProdKind::CorncP1, 1usize),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CommentLineS44),
            Shift(State::OCommentS45),
            Reduce(ProdKind::Cornc0P1, 1usize),
            Shift(State::NotCommentS54),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::CCommentS62),
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Cornc1P2, 1usize),
            Reduce(ProdKind::Cornc1P2, 1usize),
            Reduce(ProdKind::Cornc1P2, 1usize),
            Reduce(ProdKind::Cornc1P2, 1usize),
        ],
        [
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Error,
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Reduce(ProdKind::LayoutItem1P1, 2usize),
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TillEndCommentKWOptP2, 0usize),
            Shift(State::TillEndCommentKWS63),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::Cornc1P1, 2usize),
            Reduce(ProdKind::Cornc1P1, 2usize),
            Reduce(ProdKind::Cornc1P1, 2usize),
            Reduce(ProdKind::Cornc1P1, 2usize),
        ],
        [
            Reduce(ProdKind::CommentP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CommentP1, 3usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::CommentP1, 3usize),
            Reduce(ProdKind::CommentP1, 3usize),
            Reduce(ProdKind::CommentP1, 3usize),
            Reduce(ProdKind::CommentP1, 3usize),
            Error,
            Reduce(ProdKind::CommentP1, 3usize),
            Reduce(ProdKind::CommentP1, 3usize),
            Reduce(ProdKind::CommentP1, 3usize),
            Reduce(ProdKind::CommentP1, 3usize),
            Reduce(ProdKind::CommentP1, 3usize),
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::TillEndCommentKWOptP1, 1usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Shift(State::EndCommentKWS65),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
        ],
        [
            Reduce(ProdKind::ModelCommentP1, 5usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ModelCommentP1, 5usize),
            Error,
            Error,
            Error,
            Error,
            Error,
            Error,
            Reduce(ProdKind::ModelCommentP1, 5usize),
            Reduce(ProdKind::ModelCommentP1, 5usize),
            Reduce(ProdKind::ModelCommentP1, 5usize),
            Reduce(ProdKind::ModelCommentP1, 5usize),
            Error,
            Reduce(ProdKind::ModelCommentP1, 5usize),
            Reduce(ProdKind::ModelCommentP1, 5usize),
            Reduce(ProdKind::ModelCommentP1, 5usize),
            Error,
            Error,
        ],
    ],
    gotos: [
        [
            None,
            None,
            None,
            Some(State::ModelS3),
            None,
            Some(State::ModelOrLibraryS4),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            Some(State::ConfigurationOptS8),
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ConfigurationS9),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::BlockS11),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ElementS14),
            Some(State::Element0S15),
            Some(State::Element1S16),
            Some(State::ComponentS17),
            None,
            None,
            Some(State::BlockS18),
            Some(State::HandlerS19),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ElementS14),
            Some(State::Element0S20),
            Some(State::Element1S16),
            Some(State::ComponentS17),
            None,
            None,
            Some(State::BlockS18),
            Some(State::HandlerS19),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::TypeNameS23),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ElementS26),
            None,
            None,
            Some(State::ComponentS17),
            None,
            None,
            Some(State::BlockS18),
            Some(State::HandlerS19),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::TillEndCodeKWOptS30),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::IDOptS32),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::ElementS14),
            Some(State::Element0S35),
            Some(State::Element1S16),
            Some(State::ComponentS17),
            None,
            None,
            Some(State::BlockS18),
            Some(State::HandlerS19),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::LayoutS46),
            Some(State::LayoutItem1S47),
            Some(State::LayoutItem0S48),
            Some(State::LayoutItemS49),
            Some(State::CommentS50),
            None,
            None,
            Some(State::ModelCommentS51),
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::CommentNameOptS53),
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::CommentS55),
            Some(State::Cornc1S56),
            Some(State::Cornc0S57),
            None,
            None,
            None,
            Some(State::CorncS58),
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::LayoutItemS59),
            Some(State::CommentS50),
            None,
            None,
            Some(State::ModelCommentS51),
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::CommentS55),
            None,
            None,
            None,
            None,
            None,
            Some(State::CorncS61),
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(State::TillEndCommentKWOptS64),
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
    ],
    token_recognizers: [
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::LibraryKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ID,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::ID,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::Name,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::EndCodeKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::TillEndCodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ID,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::EndCodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::EndCodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::OBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CBrace,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ComponentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CodeKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentName,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::StartCommentKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::StartCommentKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::StartCommentKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::EndCommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::TillEndCommentKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CComment,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::NotComment,
            }),
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::EndCommentKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::EndCommentKW,
            }),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some(TokenRecognizer {
                token_kind: TokenKind::STOP,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentKW,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ModelProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::ConfigurationProperty,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::Anything,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::String,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::WS,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::CommentLine,
            }),
            Some(TokenRecognizer {
                token_kind: TokenKind::OComment,
            }),
            None,
            None,
        ],
    ],
};
impl ParserDefinition<TokenRecognizer, State, ProdKind, TokenKind, NonTermKind>
for OutlinerParserDefinition {
    fn action(&self, state: State, token: TokenKind) -> Action<State, ProdKind> {
        PARSER_DEFINITION.actions[state as usize][token as usize]
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize][nonterm as usize].unwrap()
    }
    fn recognizers(&self, state: State) -> Vec<&TokenRecognizer> {
        PARSER_DEFINITION
            .token_recognizers[state as usize]
            .iter()
            .map_while(|tr| tr.as_ref())
            .collect()
    }
}
#[derive(Default)]
pub struct OutlinerParser<L> {
    content: Option<<Input as ToOwned>::Owned>,
    lexer: L,
}
#[allow(dead_code)]
impl<'i, L: Lexer<Input, TokenRecognizer>> OutlinerParser<L> {
    pub fn new(lexer: L) -> Self {
        Self { content: None, lexer }
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn parse_file<P: AsRef<std::path::Path>>(
        &'i mut self,
        file: P,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        self.content = Some(<Input as rustemo::lexer::Input>::read_file(&file)?);
        let mut context = Context::new(
            file.as_ref().to_string_lossy().to_string(),
            self.content.as_ref().unwrap(),
        );
        self.inner_parse(&mut context)
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn parse(
        &self,
        input: &'i Input,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        let mut context = Context::new("<str>".to_string(), input);
        self.inner_parse(&mut context)
    }
    #[allow(clippy::needless_lifetimes)]
    fn inner_parse(
        &self,
        context: &mut Context<'i>,
    ) -> Result<<DefaultBuilder as Builder>::Output> {
        let lexer = &self.lexer;
        let mut local_builder = DefaultBuilder::new();
        let builder = &mut local_builder;
        let mut parser = LRParser::new(&PARSER_DEFINITION, State::AUGS0, false);
        loop {
            log!("\n{}", "*** Parsing content".red().bold());
            let result = parser.parse(context, lexer, builder);
            if result.is_err() {
                let pos = context.position;
                log!("\n{}", "*** Parsing layout".red().bold());
                let mut builder = SliceBuilder::new();
                context
                    .layout_ahead = <LRParser<
                    State,
                    ProdKind,
                    TokenKind,
                    NonTermKind,
                    OutlinerParserDefinition,
                    TokenRecognizer,
                > as rustemo::parser::Parser<
                    '_,
                    Input,
                    L,
                    SliceBuilder<'_, Input>,
                    TokenRecognizer,
                >>::parse(
                        &mut OutlinerLayoutParser::default().0,
                        context,
                        lexer,
                        &mut builder,
                    )
                    .unwrap_or_default();
                if context.position > pos {
                    continue;
                }
            }
            return result;
        }
    }
}
pub struct OutlinerLayoutParser(
    LRParser<
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        OutlinerParserDefinition,
        TokenRecognizer,
    >,
);
impl Default for OutlinerLayoutParser {
    fn default() -> Self {
        Self(LRParser::new(&PARSER_DEFINITION, State::AUGLS37, true))
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer {
    pub token_kind: TokenKind,
}
impl lexer::TokenRecognizer for TokenRecognizer {
    type TokenKind = TokenKind;
    type Input = Input;
    fn token_kind(&self) -> Self::TokenKind {
        self.token_kind
    }
}
impl PartialEq for TokenRecognizer {
    fn eq(&self, other: &Self) -> bool {
        self.token_kind == other.token_kind
    }
}
impl Eq for TokenRecognizer {}
impl Hash for TokenRecognizer {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.token_kind.hash(state);
    }
}
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl Builder for DefaultBuilder {
    type Output = outliner_actions::Model;
    fn new() -> Self {
        Self { res_stack: vec![] }
    }
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Model(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, ProdKind, TokenKind> for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &mut Context<'i>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::OBrace => {
                Terminal::OBrace(outliner_actions::obrace(context, token))
            }
            TokenKind::CBrace => {
                Terminal::CBrace(outliner_actions::cbrace(context, token))
            }
            TokenKind::ComponentKW => {
                Terminal::ComponentKW(outliner_actions::component_kw(context, token))
            }
            TokenKind::ConfigurationKW => {
                Terminal::ConfigurationKW(
                    outliner_actions::configuration_kw(context, token),
                )
            }
            TokenKind::CodeKW => {
                Terminal::CodeKW(outliner_actions::code_kw(context, token))
            }
            TokenKind::EndCodeKW => {
                Terminal::EndCodeKW(outliner_actions::end_code_kw(context, token))
            }
            TokenKind::ModelKW => {
                Terminal::ModelKW(outliner_actions::model_kw(context, token))
            }
            TokenKind::LibraryKW => {
                Terminal::LibraryKW(outliner_actions::library_kw(context, token))
            }
            TokenKind::ID => Terminal::ID(outliner_actions::id(context, token)),
            TokenKind::TillEndCodeKW => {
                Terminal::TillEndCodeKW(
                    outliner_actions::till_end_code_kw(context, token),
                )
            }
            TokenKind::Name => Terminal::Name(outliner_actions::name(context, token)),
            _ => panic!("Shift of unreachable terminal!"),
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &mut Context<'i>,
        prod: ProdKind,
        _prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::ModelP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::ModelOrLibrary(p0)),
                        Symbol::Terminal(Terminal::Name(p1)),
                        Symbol::Terminal(Terminal::OBrace(p2)),
                        Symbol::NonTerminal(NonTerminal::ConfigurationOpt(p3)),
                        Symbol::NonTerminal(NonTerminal::Element0(p4)),
                        Symbol::Terminal(Terminal::CBrace(p5)),
                    ) => {
                        NonTerminal::Model(
                            outliner_actions::model_c1(context, p0, p1, p2, p3, p4, p5),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConfigurationOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Configuration(p0)) => {
                        NonTerminal::ConfigurationOpt(
                            outliner_actions::configuration_opt_configuration(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConfigurationOptP2 => {
                NonTerminal::ConfigurationOpt(
                    outliner_actions::configuration_opt_empty(context),
                )
            }
            ProdKind::ModelOrLibraryP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::ModelKW(p0)) => {
                        NonTerminal::ModelOrLibrary(
                            outliner_actions::model_or_library_model_kw(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ModelOrLibraryP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::LibraryKW(p0)) => {
                        NonTerminal::ModelOrLibrary(
                            outliner_actions::model_or_library_library_kw(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ElementP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Component(p0)) => {
                        NonTerminal::Element(
                            outliner_actions::element_component(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ElementP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Handler(p0)) => {
                        NonTerminal::Element(
                            outliner_actions::element_handler(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ElementP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Block(p0)) => {
                        NonTerminal::Element(
                            outliner_actions::element_block(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Element0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Element1(p0)) => {
                        NonTerminal::Element0(
                            outliner_actions::element0_element1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Element0P2 => {
                NonTerminal::Element0(outliner_actions::element0_empty(context))
            }
            ProdKind::Element1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Element1(p0)),
                        Symbol::NonTerminal(NonTerminal::Element(p1)),
                    ) => {
                        NonTerminal::Element1(
                            outliner_actions::element1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Element1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Element(p0)) => {
                        NonTerminal::Element1(
                            outliner_actions::element1_element(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ComponentP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 7usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::ComponentKW(p0)),
                        Symbol::NonTerminal(NonTerminal::TypeName(p1)),
                        Symbol::Terminal(Terminal::Name(p2)),
                        Symbol::NonTerminal(NonTerminal::IDOpt(p3)),
                        Symbol::Terminal(Terminal::OBrace(p4)),
                        Symbol::NonTerminal(NonTerminal::Element0(p5)),
                        Symbol::Terminal(Terminal::CBrace(p6)),
                    ) => {
                        NonTerminal::Component(
                            outliner_actions::component_c1(
                                context,
                                p0,
                                p1,
                                p2,
                                p3,
                                p4,
                                p5,
                                p6,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IDOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::ID(p0)) => {
                        NonTerminal::IDOpt(outliner_actions::idopt_id(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IDOptP2 => {
                NonTerminal::IDOpt(outliner_actions::idopt_empty(context))
            }
            ProdKind::ConfigurationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::ConfigurationKW(p0)),
                        Symbol::NonTerminal(NonTerminal::Block(p1)),
                    ) => {
                        NonTerminal::Configuration(
                            outliner_actions::configuration_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::OBrace(p0)),
                        Symbol::NonTerminal(NonTerminal::Element0(p1)),
                        Symbol::Terminal(Terminal::CBrace(p2)),
                    ) => {
                        NonTerminal::Block(
                            outliner_actions::block_c1(context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::HandlerP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::CodeKW(p0)),
                        Symbol::Terminal(Terminal::ID(p1)),
                        Symbol::NonTerminal(NonTerminal::TillEndCodeKWOpt(p2)),
                        Symbol::Terminal(Terminal::EndCodeKW(p3)),
                    ) => {
                        NonTerminal::Handler(
                            outliner_actions::handler_c1(context, p0, p1, p2, p3),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TillEndCodeKWOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TillEndCodeKW(p0)) => {
                        NonTerminal::TillEndCodeKWOpt(
                            outliner_actions::till_end_code_kwopt_till_end_code_kw(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TillEndCodeKWOptP2 => {
                NonTerminal::TillEndCodeKWOpt(
                    outliner_actions::till_end_code_kwopt_empty(context),
                )
            }
            ProdKind::TypeNameP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Name(p0)) => {
                        NonTerminal::TypeName(
                            outliner_actions::type_name_name(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeNameP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::ID(p0)) => {
                        NonTerminal::TypeName(
                            outliner_actions::type_name_id(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            _ => panic!("Reduce of unreachable nonterminal!"),
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
