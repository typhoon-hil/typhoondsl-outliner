/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use rustemo::LRBuilder;
use super::outliner_actions;
use rustemo::{LRParser, LRContext};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use colored::*;
pub type Input = str;
const STATE_COUNT: usize = 66usize;
const MAX_RECOGNIZERS: usize = 11usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 26usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    OBrace,
    CBrace,
    ComponentKW,
    ConfigurationKW,
    CodeKW,
    EndCodeKW,
    ModelKW,
    LibraryKW,
    CommentKW,
    CommentName,
    StartCommentKW,
    EndCommentKW,
    TillEndCommentKW,
    ID,
    TillEndCodeKW,
    ModelProperty,
    ConfigurationProperty,
    Anything,
    String,
    Name,
    WS,
    CommentLine,
    OComment,
    CComment,
    NotComment,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    ModelP1,
    ConfigurationOptP1,
    ConfigurationOptP2,
    ModelOrLibraryP1,
    ModelOrLibraryP2,
    ElementP1,
    ElementP2,
    ElementP3,
    Element0P1,
    Element0P2,
    Element1P1,
    Element1P2,
    ComponentP1,
    IDOptP1,
    IDOptP2,
    ConfigurationP1,
    BlockP1,
    HandlerP1,
    TillEndCodeKWOptP1,
    TillEndCodeKWOptP2,
    TypeNameP1,
    TypeNameP2,
    LayoutP1,
    LayoutItem1P1,
    LayoutItem1P2,
    LayoutItem0P1,
    LayoutItem0P2,
    LayoutItemP1,
    LayoutItemP2,
    LayoutItemP3,
    LayoutItemP4,
    LayoutItemP5,
    LayoutItemP6,
    LayoutItemP7,
    CommentP1,
    Cornc1P1,
    Cornc1P2,
    Cornc0P1,
    Cornc0P2,
    CommentP2,
    ModelCommentP1,
    CommentNameOptP1,
    CommentNameOptP2,
    TillEndCommentKWOptP1,
    TillEndCommentKWOptP2,
    CorncP1,
    CorncP2,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::ModelP1 => {
                "Model: ModelOrLibrary Name OBrace ConfigurationOpt Element0 CBrace"
            }
            ProdKind::ConfigurationOptP1 => "ConfigurationOpt: Configuration",
            ProdKind::ConfigurationOptP2 => "ConfigurationOpt: ",
            ProdKind::ModelOrLibraryP1 => "ModelOrLibrary: ModelKW",
            ProdKind::ModelOrLibraryP2 => "ModelOrLibrary: LibraryKW",
            ProdKind::ElementP1 => "Element: Component",
            ProdKind::ElementP2 => "Element: Handler",
            ProdKind::ElementP3 => "Element: Block",
            ProdKind::Element0P1 => "Element0: Element1",
            ProdKind::Element0P2 => "Element0: ",
            ProdKind::Element1P1 => "Element1: Element1 Element",
            ProdKind::Element1P2 => "Element1: Element",
            ProdKind::ComponentP1 => {
                "Component: ComponentKW TypeName Name IDOpt OBrace Element0 CBrace"
            }
            ProdKind::IDOptP1 => "IDOpt: ID",
            ProdKind::IDOptP2 => "IDOpt: ",
            ProdKind::ConfigurationP1 => "Configuration: ConfigurationKW Block",
            ProdKind::BlockP1 => "Block: OBrace Element0 CBrace",
            ProdKind::HandlerP1 => "Handler: CodeKW ID TillEndCodeKWOpt EndCodeKW",
            ProdKind::TillEndCodeKWOptP1 => "TillEndCodeKWOpt: TillEndCodeKW",
            ProdKind::TillEndCodeKWOptP2 => "TillEndCodeKWOpt: ",
            ProdKind::TypeNameP1 => "TypeName: Name",
            ProdKind::TypeNameP2 => "TypeName: ID",
            ProdKind::LayoutP1 => "Layout: LayoutItem0",
            ProdKind::LayoutItem1P1 => "LayoutItem1: LayoutItem1 LayoutItem",
            ProdKind::LayoutItem1P2 => "LayoutItem1: LayoutItem",
            ProdKind::LayoutItem0P1 => "LayoutItem0: LayoutItem1",
            ProdKind::LayoutItem0P2 => "LayoutItem0: ",
            ProdKind::LayoutItemP1 => "LayoutItem: WS",
            ProdKind::LayoutItemP2 => "LayoutItem: Comment",
            ProdKind::LayoutItemP3 => "LayoutItem: Anything",
            ProdKind::LayoutItemP4 => "LayoutItem: String",
            ProdKind::LayoutItemP5 => "LayoutItem: ModelComment",
            ProdKind::LayoutItemP6 => "LayoutItem: ModelProperty",
            ProdKind::LayoutItemP7 => "LayoutItem: ConfigurationProperty",
            ProdKind::CommentP1 => "Comment: OComment Cornc0 CComment",
            ProdKind::Cornc1P1 => "Cornc1: Cornc1 Cornc",
            ProdKind::Cornc1P2 => "Cornc1: Cornc",
            ProdKind::Cornc0P1 => "Cornc0: Cornc1",
            ProdKind::Cornc0P2 => "Cornc0: ",
            ProdKind::CommentP2 => "Comment: CommentLine",
            ProdKind::ModelCommentP1 => {
                "ModelComment: CommentKW CommentNameOpt StartCommentKW TillEndCommentKWOpt EndCommentKW"
            }
            ProdKind::CommentNameOptP1 => "CommentNameOpt: CommentName",
            ProdKind::CommentNameOptP2 => "CommentNameOpt: ",
            ProdKind::TillEndCommentKWOptP1 => "TillEndCommentKWOpt: TillEndCommentKW",
            ProdKind::TillEndCommentKWOptP2 => "TillEndCommentKWOpt: ",
            ProdKind::CorncP1 => "Cornc: Comment",
            ProdKind::CorncP2 => "Cornc: NotComment",
        };
        write!(f, "{}", name)
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    AUGL,
    Model,
    ConfigurationOpt,
    ModelOrLibrary,
    Element,
    Element0,
    Element1,
    Component,
    IDOpt,
    Configuration,
    Block,
    Handler,
    TillEndCodeKWOpt,
    TypeName,
    Layout,
    LayoutItem1,
    LayoutItem0,
    LayoutItem,
    Comment,
    Cornc1,
    Cornc0,
    ModelComment,
    CommentNameOpt,
    TillEndCommentKWOpt,
    Cornc,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::ModelP1 => NonTermKind::Model,
            ProdKind::ConfigurationOptP1 => NonTermKind::ConfigurationOpt,
            ProdKind::ConfigurationOptP2 => NonTermKind::ConfigurationOpt,
            ProdKind::ModelOrLibraryP1 => NonTermKind::ModelOrLibrary,
            ProdKind::ModelOrLibraryP2 => NonTermKind::ModelOrLibrary,
            ProdKind::ElementP1 => NonTermKind::Element,
            ProdKind::ElementP2 => NonTermKind::Element,
            ProdKind::ElementP3 => NonTermKind::Element,
            ProdKind::Element0P1 => NonTermKind::Element0,
            ProdKind::Element0P2 => NonTermKind::Element0,
            ProdKind::Element1P1 => NonTermKind::Element1,
            ProdKind::Element1P2 => NonTermKind::Element1,
            ProdKind::ComponentP1 => NonTermKind::Component,
            ProdKind::IDOptP1 => NonTermKind::IDOpt,
            ProdKind::IDOptP2 => NonTermKind::IDOpt,
            ProdKind::ConfigurationP1 => NonTermKind::Configuration,
            ProdKind::BlockP1 => NonTermKind::Block,
            ProdKind::HandlerP1 => NonTermKind::Handler,
            ProdKind::TillEndCodeKWOptP1 => NonTermKind::TillEndCodeKWOpt,
            ProdKind::TillEndCodeKWOptP2 => NonTermKind::TillEndCodeKWOpt,
            ProdKind::TypeNameP1 => NonTermKind::TypeName,
            ProdKind::TypeNameP2 => NonTermKind::TypeName,
            ProdKind::LayoutP1 => NonTermKind::Layout,
            ProdKind::LayoutItem1P1 => NonTermKind::LayoutItem1,
            ProdKind::LayoutItem1P2 => NonTermKind::LayoutItem1,
            ProdKind::LayoutItem0P1 => NonTermKind::LayoutItem0,
            ProdKind::LayoutItem0P2 => NonTermKind::LayoutItem0,
            ProdKind::LayoutItemP1 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP2 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP3 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP4 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP5 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP6 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP7 => NonTermKind::LayoutItem,
            ProdKind::CommentP1 => NonTermKind::Comment,
            ProdKind::Cornc1P1 => NonTermKind::Cornc1,
            ProdKind::Cornc1P2 => NonTermKind::Cornc1,
            ProdKind::Cornc0P1 => NonTermKind::Cornc0,
            ProdKind::Cornc0P2 => NonTermKind::Cornc0,
            ProdKind::CommentP2 => NonTermKind::Comment,
            ProdKind::ModelCommentP1 => NonTermKind::ModelComment,
            ProdKind::CommentNameOptP1 => NonTermKind::CommentNameOpt,
            ProdKind::CommentNameOptP2 => NonTermKind::CommentNameOpt,
            ProdKind::TillEndCommentKWOptP1 => NonTermKind::TillEndCommentKWOpt,
            ProdKind::TillEndCommentKWOptP2 => NonTermKind::TillEndCommentKWOpt,
            ProdKind::CorncP1 => NonTermKind::Cornc,
            ProdKind::CorncP2 => NonTermKind::Cornc,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    ModelKWS1,
    LibraryKWS2,
    ModelS3,
    ModelOrLibraryS4,
    NameS5,
    OBraceS6,
    ConfigurationKWS7,
    ConfigurationOptS8,
    ConfigurationS9,
    OBraceS10,
    BlockS11,
    ComponentKWS12,
    CodeKWS13,
    ElementS14,
    Element0S15,
    Element1S16,
    ComponentS17,
    BlockS18,
    HandlerS19,
    Element0S20,
    IDS21,
    NameS22,
    TypeNameS23,
    IDS24,
    CBraceS25,
    ElementS26,
    CBraceS27,
    NameS28,
    TillEndCodeKWS29,
    TillEndCodeKWOptS30,
    IDS31,
    IDOptS32,
    EndCodeKWS33,
    OBraceS34,
    Element0S35,
    CBraceS36,
    AUGLS37,
    CommentKWS38,
    ModelPropertyS39,
    ConfigurationPropertyS40,
    AnythingS41,
    StringS42,
    WSS43,
    CommentLineS44,
    OCommentS45,
    LayoutS46,
    LayoutItem1S47,
    LayoutItem0S48,
    LayoutItemS49,
    CommentS50,
    ModelCommentS51,
    CommentNameS52,
    CommentNameOptS53,
    NotCommentS54,
    CommentS55,
    Cornc1S56,
    Cornc0S57,
    CorncS58,
    LayoutItemS59,
    StartCommentKWS60,
    CorncS61,
    CCommentS62,
    TillEndCommentKWS63,
    TillEndCommentKWOptS64,
    EndCommentKWS65,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        Some(State::AUGLS37)
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::ModelKWS1 => "1:ModelKW",
            State::LibraryKWS2 => "2:LibraryKW",
            State::ModelS3 => "3:Model",
            State::ModelOrLibraryS4 => "4:ModelOrLibrary",
            State::NameS5 => "5:Name",
            State::OBraceS6 => "6:OBrace",
            State::ConfigurationKWS7 => "7:ConfigurationKW",
            State::ConfigurationOptS8 => "8:ConfigurationOpt",
            State::ConfigurationS9 => "9:Configuration",
            State::OBraceS10 => "10:OBrace",
            State::BlockS11 => "11:Block",
            State::ComponentKWS12 => "12:ComponentKW",
            State::CodeKWS13 => "13:CodeKW",
            State::ElementS14 => "14:Element",
            State::Element0S15 => "15:Element0",
            State::Element1S16 => "16:Element1",
            State::ComponentS17 => "17:Component",
            State::BlockS18 => "18:Block",
            State::HandlerS19 => "19:Handler",
            State::Element0S20 => "20:Element0",
            State::IDS21 => "21:ID",
            State::NameS22 => "22:Name",
            State::TypeNameS23 => "23:TypeName",
            State::IDS24 => "24:ID",
            State::CBraceS25 => "25:CBrace",
            State::ElementS26 => "26:Element",
            State::CBraceS27 => "27:CBrace",
            State::NameS28 => "28:Name",
            State::TillEndCodeKWS29 => "29:TillEndCodeKW",
            State::TillEndCodeKWOptS30 => "30:TillEndCodeKWOpt",
            State::IDS31 => "31:ID",
            State::IDOptS32 => "32:IDOpt",
            State::EndCodeKWS33 => "33:EndCodeKW",
            State::OBraceS34 => "34:OBrace",
            State::Element0S35 => "35:Element0",
            State::CBraceS36 => "36:CBrace",
            State::AUGLS37 => "37:AUGL",
            State::CommentKWS38 => "38:CommentKW",
            State::ModelPropertyS39 => "39:ModelProperty",
            State::ConfigurationPropertyS40 => "40:ConfigurationProperty",
            State::AnythingS41 => "41:Anything",
            State::StringS42 => "42:String",
            State::WSS43 => "43:WS",
            State::CommentLineS44 => "44:CommentLine",
            State::OCommentS45 => "45:OComment",
            State::LayoutS46 => "46:Layout",
            State::LayoutItem1S47 => "47:LayoutItem1",
            State::LayoutItem0S48 => "48:LayoutItem0",
            State::LayoutItemS49 => "49:LayoutItem",
            State::CommentS50 => "50:Comment",
            State::ModelCommentS51 => "51:ModelComment",
            State::CommentNameS52 => "52:CommentName",
            State::CommentNameOptS53 => "53:CommentNameOpt",
            State::NotCommentS54 => "54:NotComment",
            State::CommentS55 => "55:Comment",
            State::Cornc1S56 => "56:Cornc1",
            State::Cornc0S57 => "57:Cornc0",
            State::CorncS58 => "58:Cornc",
            State::LayoutItemS59 => "59:LayoutItem",
            State::StartCommentKWS60 => "60:StartCommentKW",
            State::CorncS61 => "61:Cornc",
            State::CCommentS62 => "62:CComment",
            State::TillEndCommentKWS63 => "63:TillEndCommentKW",
            State::TillEndCommentKWOptS64 => "64:TillEndCommentKWOpt",
            State::EndCommentKWS65 => "65:EndCommentKW",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    OBrace(outliner_actions::OBrace),
    CBrace(outliner_actions::CBrace),
    ComponentKW(outliner_actions::ComponentKW),
    ConfigurationKW(outliner_actions::ConfigurationKW),
    CodeKW(outliner_actions::CodeKW),
    EndCodeKW(outliner_actions::EndCodeKW),
    ModelKW(outliner_actions::ModelKW),
    LibraryKW(outliner_actions::LibraryKW),
    ID(outliner_actions::ID),
    TillEndCodeKW(outliner_actions::TillEndCodeKW),
    Name(outliner_actions::Name),
}
#[derive(Debug)]
pub enum NonTerminal {
    Model(outliner_actions::Model),
    ConfigurationOpt(outliner_actions::ConfigurationOpt),
    ModelOrLibrary(outliner_actions::ModelOrLibrary),
    Element(outliner_actions::Element),
    Element0(outliner_actions::Element0),
    Element1(outliner_actions::Element1),
    Component(outliner_actions::Component),
    IDOpt(outliner_actions::IDOpt),
    Configuration(outliner_actions::Configuration),
    Block(outliner_actions::Block),
    Handler(outliner_actions::Handler),
    TillEndCodeKWOpt(outliner_actions::TillEndCodeKWOpt),
    TypeName(outliner_actions::TypeName),
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct OutlinerParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::ModelKW => Vec::from(&[Shift(State::ModelKWS1)]),
        TK::LibraryKW => Vec::from(&[Shift(State::LibraryKWS2)]),
        _ => vec![],
    }
}
fn action_modelkw_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Name => Vec::from(&[Reduce(PK::ModelOrLibraryP1, 1usize)]),
        _ => vec![],
    }
}
fn action_librarykw_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Name => Vec::from(&[Reduce(PK::ModelOrLibraryP2, 1usize)]),
        _ => vec![],
    }
}
fn action_model_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_modelorlibrary_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Name => Vec::from(&[Shift(State::NameS5)]),
        _ => vec![],
    }
}
fn action_name_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Shift(State::OBraceS6)]),
        _ => vec![],
    }
}
fn action_obrace_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::ConfigurationOptP2, 0usize)]),
        TK::CBrace => Vec::from(&[Reduce(PK::ConfigurationOptP2, 0usize)]),
        TK::ComponentKW => Vec::from(&[Reduce(PK::ConfigurationOptP2, 0usize)]),
        TK::ConfigurationKW => Vec::from(&[Shift(State::ConfigurationKWS7)]),
        TK::CodeKW => Vec::from(&[Reduce(PK::ConfigurationOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_configurationkw_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Shift(State::OBraceS10)]),
        _ => vec![],
    }
}
fn action_configurationopt_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Shift(State::OBraceS10)]),
        TK::CBrace => Vec::from(&[Reduce(PK::Element0P2, 0usize)]),
        TK::ComponentKW => Vec::from(&[Shift(State::ComponentKWS12)]),
        TK::CodeKW => Vec::from(&[Shift(State::CodeKWS13)]),
        _ => vec![],
    }
}
fn action_configuration_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::ConfigurationOptP1, 1usize)]),
        TK::CBrace => Vec::from(&[Reduce(PK::ConfigurationOptP1, 1usize)]),
        TK::ComponentKW => Vec::from(&[Reduce(PK::ConfigurationOptP1, 1usize)]),
        TK::CodeKW => Vec::from(&[Reduce(PK::ConfigurationOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_obrace_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Shift(State::OBraceS10)]),
        TK::CBrace => Vec::from(&[Reduce(PK::Element0P2, 0usize)]),
        TK::ComponentKW => Vec::from(&[Shift(State::ComponentKWS12)]),
        TK::CodeKW => Vec::from(&[Shift(State::CodeKWS13)]),
        _ => vec![],
    }
}
fn action_block_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::ConfigurationP1, 2usize)]),
        TK::CBrace => Vec::from(&[Reduce(PK::ConfigurationP1, 2usize)]),
        TK::ComponentKW => Vec::from(&[Reduce(PK::ConfigurationP1, 2usize)]),
        TK::CodeKW => Vec::from(&[Reduce(PK::ConfigurationP1, 2usize)]),
        _ => vec![],
    }
}
fn action_componentkw_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::ID => Vec::from(&[Shift(State::IDS21)]),
        TK::Name => Vec::from(&[Shift(State::NameS22)]),
        _ => vec![],
    }
}
fn action_codekw_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::ID => Vec::from(&[Shift(State::IDS24)]),
        _ => vec![],
    }
}
fn action_element_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::Element1P2, 1usize)]),
        TK::CBrace => Vec::from(&[Reduce(PK::Element1P2, 1usize)]),
        TK::ComponentKW => Vec::from(&[Reduce(PK::Element1P2, 1usize)]),
        TK::CodeKW => Vec::from(&[Reduce(PK::Element1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_element0_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CBrace => Vec::from(&[Shift(State::CBraceS25)]),
        _ => vec![],
    }
}
fn action_element1_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Shift(State::OBraceS10)]),
        TK::CBrace => Vec::from(&[Reduce(PK::Element0P1, 1usize)]),
        TK::ComponentKW => Vec::from(&[Shift(State::ComponentKWS12)]),
        TK::CodeKW => Vec::from(&[Shift(State::CodeKWS13)]),
        _ => vec![],
    }
}
fn action_component_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::ElementP1, 1usize)]),
        TK::CBrace => Vec::from(&[Reduce(PK::ElementP1, 1usize)]),
        TK::ComponentKW => Vec::from(&[Reduce(PK::ElementP1, 1usize)]),
        TK::CodeKW => Vec::from(&[Reduce(PK::ElementP1, 1usize)]),
        _ => vec![],
    }
}
fn action_block_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::ElementP3, 1usize)]),
        TK::CBrace => Vec::from(&[Reduce(PK::ElementP3, 1usize)]),
        TK::ComponentKW => Vec::from(&[Reduce(PK::ElementP3, 1usize)]),
        TK::CodeKW => Vec::from(&[Reduce(PK::ElementP3, 1usize)]),
        _ => vec![],
    }
}
fn action_handler_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::ElementP2, 1usize)]),
        TK::CBrace => Vec::from(&[Reduce(PK::ElementP2, 1usize)]),
        TK::ComponentKW => Vec::from(&[Reduce(PK::ElementP2, 1usize)]),
        TK::CodeKW => Vec::from(&[Reduce(PK::ElementP2, 1usize)]),
        _ => vec![],
    }
}
fn action_element0_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CBrace => Vec::from(&[Shift(State::CBraceS27)]),
        _ => vec![],
    }
}
fn action_id_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Name => Vec::from(&[Reduce(PK::TypeNameP2, 1usize)]),
        _ => vec![],
    }
}
fn action_name_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Name => Vec::from(&[Reduce(PK::TypeNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_typename_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Name => Vec::from(&[Shift(State::NameS28)]),
        _ => vec![],
    }
}
fn action_id_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndCodeKW => Vec::from(&[Reduce(PK::TillEndCodeKWOptP2, 0usize)]),
        TK::TillEndCodeKW => Vec::from(&[Shift(State::TillEndCodeKWS29)]),
        _ => vec![],
    }
}
fn action_cbrace_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ModelP1, 6usize)]),
        _ => vec![],
    }
}
fn action_element_s26(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::Element1P1, 2usize)]),
        TK::CBrace => Vec::from(&[Reduce(PK::Element1P1, 2usize)]),
        TK::ComponentKW => Vec::from(&[Reduce(PK::Element1P1, 2usize)]),
        TK::CodeKW => Vec::from(&[Reduce(PK::Element1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_cbrace_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::BlockP1, 3usize)]),
        TK::CBrace => Vec::from(&[Reduce(PK::BlockP1, 3usize)]),
        TK::ComponentKW => Vec::from(&[Reduce(PK::BlockP1, 3usize)]),
        TK::CodeKW => Vec::from(&[Reduce(PK::BlockP1, 3usize)]),
        _ => vec![],
    }
}
fn action_name_s28(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::IDOptP2, 0usize)]),
        TK::ID => Vec::from(&[Shift(State::IDS31)]),
        _ => vec![],
    }
}
fn action_tillendcodekw_s29(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndCodeKW => Vec::from(&[Reduce(PK::TillEndCodeKWOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_tillendcodekwopt_s30(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndCodeKW => Vec::from(&[Shift(State::EndCodeKWS33)]),
        _ => vec![],
    }
}
fn action_id_s31(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::IDOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_idopt_s32(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Shift(State::OBraceS34)]),
        _ => vec![],
    }
}
fn action_endcodekw_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::HandlerP1, 4usize)]),
        TK::CBrace => Vec::from(&[Reduce(PK::HandlerP1, 4usize)]),
        TK::ComponentKW => Vec::from(&[Reduce(PK::HandlerP1, 4usize)]),
        TK::CodeKW => Vec::from(&[Reduce(PK::HandlerP1, 4usize)]),
        _ => vec![],
    }
}
fn action_obrace_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Shift(State::OBraceS10)]),
        TK::CBrace => Vec::from(&[Reduce(PK::Element0P2, 0usize)]),
        TK::ComponentKW => Vec::from(&[Shift(State::ComponentKWS12)]),
        TK::CodeKW => Vec::from(&[Shift(State::CodeKWS13)]),
        _ => vec![],
    }
}
fn action_element0_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CBrace => Vec::from(&[Shift(State::CBraceS36)]),
        _ => vec![],
    }
}
fn action_cbrace_s36(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OBrace => Vec::from(&[Reduce(PK::ComponentP1, 7usize)]),
        TK::CBrace => Vec::from(&[Reduce(PK::ComponentP1, 7usize)]),
        TK::ComponentKW => Vec::from(&[Reduce(PK::ComponentP1, 7usize)]),
        TK::CodeKW => Vec::from(&[Reduce(PK::ComponentP1, 7usize)]),
        _ => vec![],
    }
}
fn action_augl_s37(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem0P2, 0usize)]),
        TK::CommentKW => Vec::from(&[Shift(State::CommentKWS38)]),
        TK::ModelProperty => Vec::from(&[Shift(State::ModelPropertyS39)]),
        TK::ConfigurationProperty => Vec::from(&[Shift(State::ConfigurationPropertyS40)]),
        TK::Anything => Vec::from(&[Shift(State::AnythingS41)]),
        TK::String => Vec::from(&[Shift(State::StringS42)]),
        TK::WS => Vec::from(&[Shift(State::WSS43)]),
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS44)]),
        TK::OComment => Vec::from(&[Shift(State::OCommentS45)]),
        _ => vec![],
    }
}
fn action_commentkw_s38(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CommentName => Vec::from(&[Shift(State::CommentNameS52)]),
        TK::StartCommentKW => Vec::from(&[Reduce(PK::CommentNameOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_modelproperty_s39(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItemP6, 1usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::LayoutItemP6, 1usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::LayoutItemP6, 1usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::LayoutItemP6, 1usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::LayoutItemP6, 1usize)]),
        TK::String => Vec::from(&[Reduce(PK::LayoutItemP6, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItemP6, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItemP6, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::LayoutItemP6, 1usize)]),
        _ => vec![],
    }
}
fn action_configurationproperty_s40(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItemP7, 1usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::LayoutItemP7, 1usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::LayoutItemP7, 1usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::LayoutItemP7, 1usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::LayoutItemP7, 1usize)]),
        TK::String => Vec::from(&[Reduce(PK::LayoutItemP7, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItemP7, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItemP7, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::LayoutItemP7, 1usize)]),
        _ => vec![],
    }
}
fn action_anything_s41(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItemP3, 1usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::LayoutItemP3, 1usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::LayoutItemP3, 1usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::LayoutItemP3, 1usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::LayoutItemP3, 1usize)]),
        TK::String => Vec::from(&[Reduce(PK::LayoutItemP3, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItemP3, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItemP3, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::LayoutItemP3, 1usize)]),
        _ => vec![],
    }
}
fn action_string_s42(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItemP4, 1usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::LayoutItemP4, 1usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::LayoutItemP4, 1usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::LayoutItemP4, 1usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::LayoutItemP4, 1usize)]),
        TK::String => Vec::from(&[Reduce(PK::LayoutItemP4, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItemP4, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItemP4, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::LayoutItemP4, 1usize)]),
        _ => vec![],
    }
}
fn action_ws_s43(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::String => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        _ => vec![],
    }
}
fn action_commentline_s44(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::String => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::CComment => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        _ => vec![],
    }
}
fn action_ocomment_s45(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS44)]),
        TK::OComment => Vec::from(&[Shift(State::OCommentS45)]),
        TK::CComment => Vec::from(&[Reduce(PK::Cornc0P2, 0usize)]),
        TK::NotComment => Vec::from(&[Shift(State::NotCommentS54)]),
        _ => vec![],
    }
}
fn action_layout_s46(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_layoutitem1_s47(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem0P1, 1usize)]),
        TK::CommentKW => Vec::from(&[Shift(State::CommentKWS38)]),
        TK::ModelProperty => Vec::from(&[Shift(State::ModelPropertyS39)]),
        TK::ConfigurationProperty => Vec::from(&[Shift(State::ConfigurationPropertyS40)]),
        TK::Anything => Vec::from(&[Shift(State::AnythingS41)]),
        TK::String => Vec::from(&[Shift(State::StringS42)]),
        TK::WS => Vec::from(&[Shift(State::WSS43)]),
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS44)]),
        TK::OComment => Vec::from(&[Shift(State::OCommentS45)]),
        _ => vec![],
    }
}
fn action_layoutitem0_s48(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutP1, 1usize)]),
        _ => vec![],
    }
}
fn action_layoutitem_s49(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::String => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_comment_s50(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::String => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        _ => vec![],
    }
}
fn action_modelcomment_s51(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItemP5, 1usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::LayoutItemP5, 1usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::LayoutItemP5, 1usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::LayoutItemP5, 1usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::LayoutItemP5, 1usize)]),
        TK::String => Vec::from(&[Reduce(PK::LayoutItemP5, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItemP5, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItemP5, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::LayoutItemP5, 1usize)]),
        _ => vec![],
    }
}
fn action_commentname_s52(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::StartCommentKW => Vec::from(&[Reduce(PK::CommentNameOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_commentnameopt_s53(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::StartCommentKW => Vec::from(&[Shift(State::StartCommentKWS60)]),
        _ => vec![],
    }
}
fn action_notcomment_s54(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CommentLine => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        TK::CComment => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        _ => vec![],
    }
}
fn action_comment_s55(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CommentLine => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        TK::CComment => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        _ => vec![],
    }
}
fn action_cornc1_s56(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS44)]),
        TK::OComment => Vec::from(&[Shift(State::OCommentS45)]),
        TK::CComment => Vec::from(&[Reduce(PK::Cornc0P1, 1usize)]),
        TK::NotComment => Vec::from(&[Shift(State::NotCommentS54)]),
        _ => vec![],
    }
}
fn action_cornc0_s57(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CComment => Vec::from(&[Shift(State::CCommentS62)]),
        _ => vec![],
    }
}
fn action_cornc_s58(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CommentLine => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        TK::CComment => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_layoutitem_s59(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::String => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_startcommentkw_s60(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndCommentKW => Vec::from(&[Reduce(PK::TillEndCommentKWOptP2, 0usize)]),
        TK::TillEndCommentKW => Vec::from(&[Shift(State::TillEndCommentKWS63)]),
        _ => vec![],
    }
}
fn action_cornc_s61(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CommentLine => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        TK::CComment => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_ccomment_s62(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::String => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::WS => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::CComment => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        _ => vec![],
    }
}
fn action_tillendcommentkw_s63(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndCommentKW => Vec::from(&[Reduce(PK::TillEndCommentKWOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_tillendcommentkwopt_s64(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndCommentKW => Vec::from(&[Shift(State::EndCommentKWS65)]),
        _ => vec![],
    }
}
fn action_endcommentkw_s65(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ModelCommentP1, 5usize)]),
        TK::CommentKW => Vec::from(&[Reduce(PK::ModelCommentP1, 5usize)]),
        TK::ModelProperty => Vec::from(&[Reduce(PK::ModelCommentP1, 5usize)]),
        TK::ConfigurationProperty => Vec::from(&[Reduce(PK::ModelCommentP1, 5usize)]),
        TK::Anything => Vec::from(&[Reduce(PK::ModelCommentP1, 5usize)]),
        TK::String => Vec::from(&[Reduce(PK::ModelCommentP1, 5usize)]),
        TK::WS => Vec::from(&[Reduce(PK::ModelCommentP1, 5usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::ModelCommentP1, 5usize)]),
        TK::OComment => Vec::from(&[Reduce(PK::ModelCommentP1, 5usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Model => State::ModelS3,
        NonTermKind::ModelOrLibrary => State::ModelOrLibraryS4,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_obrace_s6(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ConfigurationOpt => State::ConfigurationOptS8,
        NonTermKind::Configuration => State::ConfigurationS9,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OBraceS6
            )
        }
    }
}
fn goto_configurationkw_s7(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Block => State::BlockS11,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ConfigurationKWS7
            )
        }
    }
}
fn goto_configurationopt_s8(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Element => State::ElementS14,
        NonTermKind::Element0 => State::Element0S15,
        NonTermKind::Element1 => State::Element1S16,
        NonTermKind::Component => State::ComponentS17,
        NonTermKind::Block => State::BlockS18,
        NonTermKind::Handler => State::HandlerS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ConfigurationOptS8
            )
        }
    }
}
fn goto_obrace_s10(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Element => State::ElementS14,
        NonTermKind::Element0 => State::Element0S20,
        NonTermKind::Element1 => State::Element1S16,
        NonTermKind::Component => State::ComponentS17,
        NonTermKind::Block => State::BlockS18,
        NonTermKind::Handler => State::HandlerS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OBraceS10
            )
        }
    }
}
fn goto_componentkw_s12(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeName => State::TypeNameS23,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ComponentKWS12
            )
        }
    }
}
fn goto_element1_s16(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Element => State::ElementS26,
        NonTermKind::Component => State::ComponentS17,
        NonTermKind::Block => State::BlockS18,
        NonTermKind::Handler => State::HandlerS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Element1S16
            )
        }
    }
}
fn goto_id_s24(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TillEndCodeKWOpt => State::TillEndCodeKWOptS30,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::IDS24
            )
        }
    }
}
fn goto_name_s28(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::IDOpt => State::IDOptS32,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::NameS28
            )
        }
    }
}
fn goto_obrace_s34(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Element => State::ElementS14,
        NonTermKind::Element0 => State::Element0S35,
        NonTermKind::Element1 => State::Element1S16,
        NonTermKind::Component => State::ComponentS17,
        NonTermKind::Block => State::BlockS18,
        NonTermKind::Handler => State::HandlerS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OBraceS34
            )
        }
    }
}
fn goto_augl_s37(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Layout => State::LayoutS46,
        NonTermKind::LayoutItem1 => State::LayoutItem1S47,
        NonTermKind::LayoutItem0 => State::LayoutItem0S48,
        NonTermKind::LayoutItem => State::LayoutItemS49,
        NonTermKind::Comment => State::CommentS50,
        NonTermKind::ModelComment => State::ModelCommentS51,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGLS37
            )
        }
    }
}
fn goto_commentkw_s38(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CommentNameOpt => State::CommentNameOptS53,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommentKWS38
            )
        }
    }
}
fn goto_ocomment_s45(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Comment => State::CommentS55,
        NonTermKind::Cornc1 => State::Cornc1S56,
        NonTermKind::Cornc0 => State::Cornc0S57,
        NonTermKind::Cornc => State::CorncS58,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OCommentS45
            )
        }
    }
}
fn goto_layoutitem1_s47(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LayoutItem => State::LayoutItemS59,
        NonTermKind::Comment => State::CommentS50,
        NonTermKind::ModelComment => State::ModelCommentS51,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LayoutItem1S47
            )
        }
    }
}
fn goto_cornc1_s56(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Comment => State::CommentS55,
        NonTermKind::Cornc => State::CorncS61,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Cornc1S56
            )
        }
    }
}
fn goto_startcommentkw_s60(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TillEndCommentKWOpt => State::TillEndCommentKWOptS64,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StartCommentKWS60
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: OutlinerParserDefinition = OutlinerParserDefinition {
    actions: [
        action_aug_s0,
        action_modelkw_s1,
        action_librarykw_s2,
        action_model_s3,
        action_modelorlibrary_s4,
        action_name_s5,
        action_obrace_s6,
        action_configurationkw_s7,
        action_configurationopt_s8,
        action_configuration_s9,
        action_obrace_s10,
        action_block_s11,
        action_componentkw_s12,
        action_codekw_s13,
        action_element_s14,
        action_element0_s15,
        action_element1_s16,
        action_component_s17,
        action_block_s18,
        action_handler_s19,
        action_element0_s20,
        action_id_s21,
        action_name_s22,
        action_typename_s23,
        action_id_s24,
        action_cbrace_s25,
        action_element_s26,
        action_cbrace_s27,
        action_name_s28,
        action_tillendcodekw_s29,
        action_tillendcodekwopt_s30,
        action_id_s31,
        action_idopt_s32,
        action_endcodekw_s33,
        action_obrace_s34,
        action_element0_s35,
        action_cbrace_s36,
        action_augl_s37,
        action_commentkw_s38,
        action_modelproperty_s39,
        action_configurationproperty_s40,
        action_anything_s41,
        action_string_s42,
        action_ws_s43,
        action_commentline_s44,
        action_ocomment_s45,
        action_layout_s46,
        action_layoutitem1_s47,
        action_layoutitem0_s48,
        action_layoutitem_s49,
        action_comment_s50,
        action_modelcomment_s51,
        action_commentname_s52,
        action_commentnameopt_s53,
        action_notcomment_s54,
        action_comment_s55,
        action_cornc1_s56,
        action_cornc0_s57,
        action_cornc_s58,
        action_layoutitem_s59,
        action_startcommentkw_s60,
        action_cornc_s61,
        action_ccomment_s62,
        action_tillendcommentkw_s63,
        action_tillendcommentkwopt_s64,
        action_endcommentkw_s65,
    ],
    gotos: [
        goto_aug_s0,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_obrace_s6,
        goto_configurationkw_s7,
        goto_configurationopt_s8,
        goto_invalid,
        goto_obrace_s10,
        goto_invalid,
        goto_componentkw_s12,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_element1_s16,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_id_s24,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_name_s28,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_obrace_s34,
        goto_invalid,
        goto_invalid,
        goto_augl_s37,
        goto_commentkw_s38,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_ocomment_s45,
        goto_invalid,
        goto_layoutitem1_s47,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_cornc1_s56,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_startcommentkw_s60,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
    ],
    token_kinds: [
        [
            Some((TK::ModelKW, false)),
            Some((TK::LibraryKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Name, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Name, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Name, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::ConfigurationKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::ID, false)),
            Some((TK::Name, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::ID, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CBrace, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CBrace, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Name, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Name, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Name, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::EndCodeKW, false)),
            Some((TK::TillEndCodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::ID, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::EndCodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::EndCodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CBrace, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::OBrace, false)),
            Some((TK::CBrace, false)),
            Some((TK::ComponentKW, false)),
            Some((TK::CodeKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
        [
            Some((TK::CommentName, false)),
            Some((TK::StartCommentKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            Some((TK::CComment, false)),
            Some((TK::NotComment, false)),
        ],
        [
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            Some((TK::CComment, false)),
            Some((TK::NotComment, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
        [
            Some((TK::StartCommentKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::StartCommentKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            Some((TK::CComment, false)),
            Some((TK::NotComment, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            Some((TK::CComment, false)),
            Some((TK::NotComment, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            Some((TK::CComment, false)),
            Some((TK::NotComment, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CComment, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            Some((TK::CComment, false)),
            Some((TK::NotComment, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
        [
            Some((TK::EndCommentKW, false)),
            Some((TK::TillEndCommentKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            Some((TK::CComment, false)),
            Some((TK::NotComment, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            Some((TK::CComment, false)),
            Some((TK::NotComment, false)),
        ],
        [
            Some((TK::EndCommentKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::EndCommentKW, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CommentKW, false)),
            Some((TK::ModelProperty, false)),
            Some((TK::ConfigurationProperty, false)),
            Some((TK::Anything, false)),
            Some((TK::String, false)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::OComment, false)),
            None,
            None,
        ],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind>
for OutlinerParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        true
    }
}
pub(crate) type Context<'i, I> = LRContext<'i, I, State, TokenKind>;
pub struct OutlinerParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    LRParser<
        'i,
        Context<'i, I>,
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        OutlinerParserDefinition,
        L,
        B,
        I,
    >,
);
#[allow(dead_code)]
impl<'i, L> OutlinerParser<'i, Input, L, DefaultBuilder>
where
    L: Lexer<'i, Context<'i, Input>, State, TokenKind, Input = Input>,
{
    pub fn new(lexer: L) -> Self {
        Self(
            LRParser::new(
                &PARSER_DEFINITION,
                State::default(),
                false,
                true,
                lexer,
                DefaultBuilder::new(),
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for OutlinerParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = B::Output;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl DefaultBuilder {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Self { res_stack: vec![] }
    }
}
impl Builder for DefaultBuilder {
    type Output = outliner_actions::Model;
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Model(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>
for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &mut Context<'i, Input>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::OBrace => {
                Terminal::OBrace(outliner_actions::obrace(&*context, token))
            }
            TokenKind::CBrace => {
                Terminal::CBrace(outliner_actions::cbrace(&*context, token))
            }
            TokenKind::ComponentKW => {
                Terminal::ComponentKW(outliner_actions::component_kw(&*context, token))
            }
            TokenKind::ConfigurationKW => {
                Terminal::ConfigurationKW(
                    outliner_actions::configuration_kw(&*context, token),
                )
            }
            TokenKind::CodeKW => {
                Terminal::CodeKW(outliner_actions::code_kw(&*context, token))
            }
            TokenKind::EndCodeKW => {
                Terminal::EndCodeKW(outliner_actions::end_code_kw(&*context, token))
            }
            TokenKind::ModelKW => {
                Terminal::ModelKW(outliner_actions::model_kw(&*context, token))
            }
            TokenKind::LibraryKW => {
                Terminal::LibraryKW(outliner_actions::library_kw(&*context, token))
            }
            TokenKind::ID => Terminal::ID(outliner_actions::id(&*context, token)),
            TokenKind::TillEndCodeKW => {
                Terminal::TillEndCodeKW(
                    outliner_actions::till_end_code_kw(&*context, token),
                )
            }
            TokenKind::Name => Terminal::Name(outliner_actions::name(&*context, token)),
            _ => panic!("Shift of unreachable terminal!"),
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &mut Context<'i, Input>,
        prod: ProdKind,
        _prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::ModelP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::ModelOrLibrary(p0)),
                        Symbol::Terminal(Terminal::Name(p1)),
                        Symbol::Terminal(Terminal::OBrace(p2)),
                        Symbol::NonTerminal(NonTerminal::ConfigurationOpt(p3)),
                        Symbol::NonTerminal(NonTerminal::Element0(p4)),
                        Symbol::Terminal(Terminal::CBrace(p5)),
                    ) => {
                        NonTerminal::Model(
                            outliner_actions::model_c1(&*context, p0, p1, p2, p3, p4, p5),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConfigurationOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Configuration(p0)) => {
                        NonTerminal::ConfigurationOpt(
                            outliner_actions::configuration_opt_configuration(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConfigurationOptP2 => {
                NonTerminal::ConfigurationOpt(
                    outliner_actions::configuration_opt_empty(context),
                )
            }
            ProdKind::ModelOrLibraryP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::ModelKW(p0)) => {
                        NonTerminal::ModelOrLibrary(
                            outliner_actions::model_or_library_model_kw(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ModelOrLibraryP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::LibraryKW(p0)) => {
                        NonTerminal::ModelOrLibrary(
                            outliner_actions::model_or_library_library_kw(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ElementP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Component(p0)) => {
                        NonTerminal::Element(
                            outliner_actions::element_component(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ElementP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Handler(p0)) => {
                        NonTerminal::Element(
                            outliner_actions::element_handler(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ElementP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Block(p0)) => {
                        NonTerminal::Element(
                            outliner_actions::element_block(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Element0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Element1(p0)) => {
                        NonTerminal::Element0(
                            outliner_actions::element0_element1(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Element0P2 => {
                NonTerminal::Element0(outliner_actions::element0_empty(context))
            }
            ProdKind::Element1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Element1(p0)),
                        Symbol::NonTerminal(NonTerminal::Element(p1)),
                    ) => {
                        NonTerminal::Element1(
                            outliner_actions::element1_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Element1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Element(p0)) => {
                        NonTerminal::Element1(
                            outliner_actions::element1_element(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ComponentP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 7usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::ComponentKW(p0)),
                        Symbol::NonTerminal(NonTerminal::TypeName(p1)),
                        Symbol::Terminal(Terminal::Name(p2)),
                        Symbol::NonTerminal(NonTerminal::IDOpt(p3)),
                        Symbol::Terminal(Terminal::OBrace(p4)),
                        Symbol::NonTerminal(NonTerminal::Element0(p5)),
                        Symbol::Terminal(Terminal::CBrace(p6)),
                    ) => {
                        NonTerminal::Component(
                            outliner_actions::component_c1(
                                &*context,
                                p0,
                                p1,
                                p2,
                                p3,
                                p4,
                                p5,
                                p6,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IDOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::ID(p0)) => {
                        NonTerminal::IDOpt(outliner_actions::idopt_id(&*context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IDOptP2 => {
                NonTerminal::IDOpt(outliner_actions::idopt_empty(context))
            }
            ProdKind::ConfigurationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::ConfigurationKW(p0)),
                        Symbol::NonTerminal(NonTerminal::Block(p1)),
                    ) => {
                        NonTerminal::Configuration(
                            outliner_actions::configuration_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::OBrace(p0)),
                        Symbol::NonTerminal(NonTerminal::Element0(p1)),
                        Symbol::Terminal(Terminal::CBrace(p2)),
                    ) => {
                        NonTerminal::Block(
                            outliner_actions::block_c1(&*context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::HandlerP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::CodeKW(p0)),
                        Symbol::Terminal(Terminal::ID(p1)),
                        Symbol::NonTerminal(NonTerminal::TillEndCodeKWOpt(p2)),
                        Symbol::Terminal(Terminal::EndCodeKW(p3)),
                    ) => {
                        NonTerminal::Handler(
                            outliner_actions::handler_c1(&*context, p0, p1, p2, p3),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TillEndCodeKWOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TillEndCodeKW(p0)) => {
                        NonTerminal::TillEndCodeKWOpt(
                            outliner_actions::till_end_code_kwopt_till_end_code_kw(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TillEndCodeKWOptP2 => {
                NonTerminal::TillEndCodeKWOpt(
                    outliner_actions::till_end_code_kwopt_empty(context),
                )
            }
            ProdKind::TypeNameP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Name(p0)) => {
                        NonTerminal::TypeName(
                            outliner_actions::type_name_name(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeNameP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::ID(p0)) => {
                        NonTerminal::TypeName(
                            outliner_actions::type_name_id(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            _ => panic!("Reduce of unreachable nonterminal!"),
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
